/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!(
            (bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len(),
        );
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!(
            (bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len(),
        );
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(transparent)]
pub struct __BindgenFloat16(pub u16);
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const PHP_API_VERSION: u32 = 20230831;
pub const YYDEBUG: u32 = 0;
pub const PHP_DEFAULT_CHARSET: &[u8; 6] = b"UTF-8\0";
pub const PHP_MAJOR_VERSION: u32 = 8;
pub const PHP_MINOR_VERSION: u32 = 3;
pub const PHP_RELEASE_VERSION: u32 = 2;
pub const PHP_EXTRA_VERSION: &[u8; 1] = b"\0";
pub const PHP_VERSION: &[u8; 6] = b"8.3.2\0";
pub const PHP_VERSION_ID: u32 = 80302;
pub const ZEND_VERSION: &[u8; 6] = b"4.3.2\0";
pub const COMPILE_DL_OPCACHE: u32 = 1;
pub const COOKIE_SEEKER_USES_OFF64_T: u32 = 1;
pub const DEFAULT_SHORT_OPEN_TAG: &[u8; 2] = b"1\0";
pub const ENABLE_CHROOT_FUNC: u32 = 1;
pub const HAVE_AARCH64_CRC32: u32 = 1;
pub const HAVE_ALIGNOF: u32 = 1;
pub const HAVE_ALLOCA: u32 = 1;
pub const HAVE_ALLOCA_H: u32 = 1;
pub const HAVE_ALPHASORT: u32 = 1;
pub const HAVE_ARPA_INET_H: u32 = 1;
pub const HAVE_ARPA_NAMESER_H: u32 = 1;
pub const HAVE_ASCTIME_R: u32 = 1;
pub const HAVE_ASM_GOTO: u32 = 1;
pub const HAVE_ASPRINTF: u32 = 1;
pub const HAVE_ATOLL: u32 = 1;
pub const HAVE_ATTRIBUTE_ALIGNED: u32 = 1;
pub const HAVE_BCMATH: u32 = 1;
pub const HAVE_BIND_TEXTDOMAIN_CODESET: u32 = 1;
pub const HAVE_BUILD_DEFS_H: u32 = 1;
pub const HAVE_BUNDLED_PCRE: u32 = 1;
pub const HAVE_CANCEL_CALLBACK: u32 = 1;
pub const HAVE_CHROOT: u32 = 1;
pub const HAVE_COPY_FILE_RANGE: u32 = 1;
pub const HAVE_CRYPT_H: u32 = 1;
pub const HAVE_CTIME_R: u32 = 1;
pub const HAVE_CURL: u32 = 1;
pub const HAVE_CURL_OLD_OPENSSL: u32 = 1;
pub const HAVE_DCNGETTEXT: u32 = 1;
pub const HAVE_DECL_ARC4RANDOM_BUF: u32 = 0;
pub const HAVE_DECL_STRERROR_R: u32 = 1;
pub const HAVE_DIRENT_H: u32 = 1;
pub const HAVE_DLFCN_H: u32 = 1;
pub const HAVE_DLOPEN: u32 = 1;
pub const HAVE_DLSYM: u32 = 1;
pub const HAVE_DNGETTEXT: u32 = 1;
pub const HAVE_DN_EXPAND: u32 = 1;
pub const HAVE_DN_SKIPNAME: u32 = 1;
pub const HAVE_DOM: u32 = 1;
pub const HAVE_ENCRYPTION: u32 = 1;
pub const HAVE_EXIF: u32 = 1;
pub const HAVE_EXPLICIT_BZERO: u32 = 1;
pub const HAVE_FCNTL_H: u32 = 1;
pub const HAVE_FDATASYNC: u32 = 1;
pub const HAVE_FLOCK: u32 = 1;
pub const HAVE_FNMATCH: u32 = 1;
pub const HAVE_FOPENCOOKIE: u32 = 1;
pub const HAVE_FORK: u32 = 1;
pub const HAVE_FTOK: u32 = 1;
pub const HAVE_FUNC_ATTRIBUTE_IFUNC: u32 = 1;
pub const HAVE_FUNC_GETHOSTBYNAME_R_6: u32 = 1;
pub const HAVE_GAI_STRERROR: u32 = 1;
pub const HAVE_GCC_GLOBAL_REGS: u32 = 1;
pub const HAVE_GETADDRINFO: u32 = 1;
pub const HAVE_GETCWD: u32 = 1;
pub const HAVE_GETGRNAM_R: u32 = 1;
pub const HAVE_GETHOSTBYADDR: u32 = 1;
pub const HAVE_GETHOSTBYNAME_R: u32 = 1;
pub const HAVE_GETHOSTNAME: u32 = 1;
pub const HAVE_GETIFADDRS: u32 = 1;
pub const HAVE_GETLOADAVG: u32 = 1;
pub const HAVE_GETLOGIN: u32 = 1;
pub const HAVE_GETOPT: u32 = 1;
pub const HAVE_GETPID: u32 = 1;
pub const HAVE_GETPROTOBYNAME: u32 = 1;
pub const HAVE_GETPROTOBYNUMBER: u32 = 1;
pub const HAVE_GETPWNAM_R: u32 = 1;
pub const HAVE_GETPWUID_R: u32 = 1;
pub const HAVE_GETRUSAGE: u32 = 1;
pub const HAVE_GETSERVBYNAME: u32 = 1;
pub const HAVE_GETSERVBYPORT: u32 = 1;
pub const HAVE_GETTID: u32 = 1;
pub const HAVE_GETTIMEOFDAY: u32 = 1;
pub const HAVE_GETWD: u32 = 1;
pub const HAVE_GLOB: u32 = 1;
pub const HAVE_GMTIME_R: u32 = 1;
pub const HAVE_GRP_H: u32 = 1;
pub const HAVE_HTONL: u32 = 1;
pub const HAVE_HUGE_CODE_PAGES: u32 = 1;
pub const HAVE_INET_ATON: u32 = 1;
pub const HAVE_INET_NTOA: u32 = 1;
pub const HAVE_INET_NTOP: u32 = 1;
pub const HAVE_INET_PTON: u32 = 1;
pub const HAVE_INTMAX_T: u32 = 1;
pub const HAVE_INTTYPES_H: u32 = 1;
pub const HAVE_IPV6: u32 = 1;
pub const HAVE_JIT: u32 = 1;
pub const HAVE_JSON: u32 = 1;
pub const HAVE_KILL: u32 = 1;
pub const HAVE_LANGINFO_H: u32 = 1;
pub const HAVE_LCHOWN: u32 = 1;
pub const HAVE_LIBDL: u32 = 1;
pub const HAVE_LIBINTL: u32 = 1;
pub const HAVE_LIBM: u32 = 1;
pub const HAVE_LIBRT: u32 = 1;
pub const HAVE_LIBXML: u32 = 1;
pub const HAVE_LIBZIP_VERSION: u32 = 1;
pub const HAVE_LINUX_FILTER_H: u32 = 1;
pub const HAVE_LINUX_SOCK_DIAG_H: u32 = 1;
pub const HAVE_LOCALTIME_R: u32 = 1;
pub const HAVE_MALLOC_H: u32 = 1;
pub const HAVE_MBREGEX: u32 = 1;
pub const HAVE_MBSTRING: u32 = 1;
pub const HAVE_MEMFD_CREATE: u32 = 1;
pub const HAVE_MEMMEM: u32 = 1;
pub const HAVE_MEMMOVE: u32 = 1;
pub const HAVE_MEMORY_H: u32 = 1;
pub const HAVE_MEMRCHR: u32 = 1;
pub const HAVE_METHOD_SUPPORTED: u32 = 1;
pub const HAVE_MKSTEMP: u32 = 1;
pub const HAVE_MMAP: u32 = 1;
pub const HAVE_MPROTECT: u32 = 1;
pub const HAVE_MREMAP: u32 = 1;
pub const HAVE_NANOSLEEP: u32 = 1;
pub const HAVE_NETINET_IN_H: u32 = 1;
pub const HAVE_NET_IF_H: u32 = 1;
pub const HAVE_NGETTEXT: u32 = 1;
pub const HAVE_NICE: u32 = 1;
pub const HAVE_NL_LANGINFO: u32 = 1;
pub const HAVE_OPENPTY: u32 = 1;
pub const HAVE_OPENSSL_CRYPTO_H: u32 = 1;
pub const HAVE_OPENSSL_EXT: u32 = 1;
pub const HAVE_PCRE_JIT_SUPPORT: u32 = 1;
pub const HAVE_PHP_SESSION: u32 = 1;
pub const HAVE_POLL: u32 = 1;
pub const HAVE_POLL_H: u32 = 1;
pub const HAVE_POSIX_SPAWN_FILE_ACTIONS_ADDCHDIR_NP: u32 = 1;
pub const HAVE_PRCTL: u32 = 1;
pub const HAVE_PREAD: u32 = 1;
pub const HAVE_PROGRESS_CALLBACK: u32 = 1;
pub const HAVE_PTHREAD_ATTR_GETSTACK: u32 = 1;
pub const HAVE_PTHREAD_GETATTR_NP: u32 = 1;
pub const HAVE_PTRDIFF_T: u32 = 1;
pub const HAVE_PTY_H: u32 = 1;
pub const HAVE_PUTENV: u32 = 1;
pub const HAVE_PWD_H: u32 = 1;
pub const HAVE_PWRITE: u32 = 1;
pub const HAVE_RESOLV_H: u32 = 1;
pub const HAVE_RES_NSEARCH: u32 = 1;
pub const HAVE_RES_SEARCH: u32 = 1;
pub const HAVE_SCANDIR: u32 = 1;
pub const HAVE_SETENV: u32 = 1;
pub const HAVE_SETITIMER: u32 = 1;
pub const HAVE_SET_MTIME: u32 = 1;
pub const HAVE_SHMOP: u32 = 1;
pub const HAVE_SHM_IPC: u32 = 1;
pub const HAVE_SHM_MMAP_ANON: u32 = 1;
pub const HAVE_SHM_MMAP_POSIX: u32 = 1;
pub const HAVE_SHM_OPEN: u32 = 1;
pub const HAVE_SHUTDOWN: u32 = 1;
pub const HAVE_SIGACTION: u32 = 1;
pub const HAVE_SIGPROCMASK: u32 = 1;
pub const HAVE_SOCKADDR_STORAGE: u32 = 1;
pub const HAVE_SOCKET: u32 = 1;
pub const HAVE_SOCKETPAIR: u32 = 1;
pub const HAVE_SOCKLEN_T: u32 = 1;
pub const HAVE_SSIZE_T: u32 = 1;
pub const HAVE_STATFS: u32 = 1;
pub const HAVE_STATVFS: u32 = 1;
pub const HAVE_STDINT_H: u32 = 1;
pub const HAVE_STDLIB_H: u32 = 1;
pub const HAVE_STRCASECMP: u32 = 1;
pub const HAVE_STRERROR_R: u32 = 1;
pub const HAVE_STRINGS_H: u32 = 1;
pub const HAVE_STRING_H: u32 = 1;
pub const HAVE_STRNDUP: u32 = 1;
pub const HAVE_STRNLEN: u32 = 1;
pub const HAVE_STRPTIME: u32 = 1;
pub const HAVE_STRPTIME_DECL_FAILS: u32 = 1;
pub const HAVE_STRTOK_R: u32 = 1;
pub const HAVE_STRTOLL: u32 = 1;
pub const HAVE_STRUCT_FLOCK: u32 = 1;
pub const HAVE_STRUCT_STAT_ST_BLKSIZE: u32 = 1;
pub const HAVE_STRUCT_STAT_ST_BLOCKS: u32 = 1;
pub const HAVE_STRUCT_STAT_ST_RDEV: u32 = 1;
pub const HAVE_STRUCT_TM_TM_GMTOFF: u32 = 1;
pub const HAVE_STRUCT_TM_TM_ZONE: u32 = 1;
pub const HAVE_ST_BLOCKS: u32 = 1;
pub const HAVE_SYMLINK: u32 = 1;
pub const HAVE_SYSEXITS_H: u32 = 1;
pub const HAVE_SYSLOG_H: u32 = 1;
pub const HAVE_SYS_FILE_H: u32 = 1;
pub const HAVE_SYS_IOCTL_H: u32 = 1;
pub const HAVE_SYS_IPC_H: u32 = 1;
pub const HAVE_SYS_MMAN_H: u32 = 1;
pub const HAVE_SYS_MOUNT_H: u32 = 1;
pub const HAVE_SYS_PARAM_H: u32 = 1;
pub const HAVE_SYS_POLL_H: u32 = 1;
pub const HAVE_SYS_RESOURCE_H: u32 = 1;
pub const HAVE_SYS_SELECT_H: u32 = 1;
pub const HAVE_SYS_SOCKET_H: u32 = 1;
pub const HAVE_SYS_STATFS_H: u32 = 1;
pub const HAVE_SYS_STATVFS_H: u32 = 1;
pub const HAVE_SYS_STAT_H: u32 = 1;
pub const HAVE_SYS_TIME_H: u32 = 1;
pub const HAVE_SYS_TYPES_H: u32 = 1;
pub const HAVE_SYS_UIO_H: u32 = 1;
pub const HAVE_SYS_UTSNAME_H: u32 = 1;
pub const HAVE_SYS_VFS_H: u32 = 1;
pub const HAVE_SYS_WAIT_H: u32 = 1;
pub const HAVE_TIMELIB_CONFIG_H: u32 = 1;
pub const HAVE_TIMER_CREATE: u32 = 1;
pub const HAVE_TM_ZONE: u32 = 1;
pub const HAVE_TZSET: u32 = 1;
pub const HAVE_UNISTD_H: u32 = 1;
pub const HAVE_UNSETENV: u32 = 1;
pub const HAVE_USLEEP: u32 = 1;
pub const HAVE_UTIME: u32 = 1;
pub const HAVE_UTIMES: u32 = 1;
pub const HAVE_UTIME_H: u32 = 1;
pub const HAVE_VASPRINTF: u32 = 1;
pub const HAVE_XML: u32 = 1;
pub const HAVE_ZIP: u32 = 1;
pub const HAVE_ZLIB: u32 = 1;
pub const MISSING_FCLOSE_DECL: u32 = 0;
pub const MYSQLND_COMPRESSION_ENABLED: u32 = 1;
pub const MYSQLND_HAVE_SSL: u32 = 1;
pub const MYSQLND_SSL_SUPPORTED: u32 = 1;
pub const ODBCVER: u32 = 768;
pub const PCRE2_CODE_UNIT_WIDTH: u32 = 8;
pub const PHP_BUILD_SYSTEM: &[u8; 108] = b"Linux buildkitsandbox 6.6.22-linuxkit #1 SMP Fri Mar 29 12:21:27 UTC 2024 aarch64 aarch64 aarch64 GNU/Linux\0";
pub const PHP_CAN_SUPPORT_PROC_OPEN: u32 = 1;
pub const PHP_HAVE_AVX512_SUPPORTS: u32 = 0;
pub const PHP_HAVE_AVX512_VBMI_SUPPORTS: u32 = 0;
pub const PHP_HAVE_BUILTIN_CLZ: u32 = 1;
pub const PHP_HAVE_BUILTIN_CLZL: u32 = 1;
pub const PHP_HAVE_BUILTIN_CLZLL: u32 = 1;
pub const PHP_HAVE_BUILTIN_CPU_INIT: u32 = 0;
pub const PHP_HAVE_BUILTIN_CPU_SUPPORTS: u32 = 0;
pub const PHP_HAVE_BUILTIN_CTZL: u32 = 1;
pub const PHP_HAVE_BUILTIN_CTZLL: u32 = 1;
pub const PHP_HAVE_BUILTIN_EXPECT: u32 = 1;
pub const PHP_HAVE_BUILTIN_FRAME_ADDRESS: u32 = 1;
pub const PHP_HAVE_BUILTIN_SADDLL_OVERFLOW: u32 = 1;
pub const PHP_HAVE_BUILTIN_SADDL_OVERFLOW: u32 = 1;
pub const PHP_HAVE_BUILTIN_SMULLL_OVERFLOW: u32 = 1;
pub const PHP_HAVE_BUILTIN_SMULL_OVERFLOW: u32 = 1;
pub const PHP_HAVE_BUILTIN_SSUBLL_OVERFLOW: u32 = 1;
pub const PHP_HAVE_BUILTIN_SSUBL_OVERFLOW: u32 = 1;
pub const PHP_HAVE_BUILTIN_USUB_OVERFLOW: u32 = 1;
pub const PHP_ONIG_BAD_KOI8_ENTRY: u32 = 1;
pub const PHP_OS: &[u8; 6] = b"Linux\0";
pub const PHP_SIGCHILD: u32 = 0;
pub const PHP_UNAME: &[u8; 108] = b"Linux buildkitsandbox 6.6.22-linuxkit #1 SMP Fri Mar 29 12:21:27 UTC 2024 aarch64 aarch64 aarch64 GNU/Linux\0";
pub const PHP_USE_PHP_CRYPT_R: u32 = 1;
pub const PHP_WRITE_STDOUT: u32 = 1;
pub const SIZEOF_INT: u32 = 4;
pub const SIZEOF_INTMAX_T: u32 = 8;
pub const SIZEOF_LONG: u32 = 8;
pub const SIZEOF_LONG_LONG: u32 = 8;
pub const SIZEOF_OFF_T: u32 = 8;
pub const SIZEOF_PTRDIFF_T: u32 = 8;
pub const SIZEOF_SHORT: u32 = 2;
pub const SIZEOF_SIZE_T: u32 = 8;
pub const SIZEOF_SSIZE_T: u32 = 8;
pub const STDC_HEADERS: u32 = 1;
pub const STRERROR_R_CHAR_P: u32 = 1;
pub const _ALL_SOURCE: u32 = 1;
pub const _GNU_SOURCE: u32 = 1;
pub const _POSIX_PTHREAD_SEMANTICS: u32 = 1;
pub const _TANDEM_SOURCE: u32 = 1;
pub const __EXTENSIONS__: u32 = 1;
pub const ZEND_CHECK_STACK_LIMIT: u32 = 1;
pub const ZEND_DEBUG: u32 = 0;
pub const ZEND_FIBER_ASM: u32 = 1;
pub const ZEND_MM_NEED_EIGHT_BYTE_REALIGNMENT: u32 = 0;
pub const ZEND_SIGNALS: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 0;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 34;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 1;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 64;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 48;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const ZEND_PATHS_SEPARATOR: u8 = 58u8;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_DATA: u32 = 3;
pub const SEEK_HOLE: u32 = 4;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const L_cuserid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const RENAME_NOREPLACE: u32 = 1;
pub const RENAME_EXCHANGE: u32 = 2;
pub const RENAME_WHITEOUT: u32 = 4;
pub const _ASSERT_H: u32 = 1;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __FP_LOGB0_IS_MIN: u32 = 0;
pub const __FP_LOGBNAN_IS_MIN: u32 = 0;
pub const __FP_LONG_MAX: u64 = 9223372036854775807;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const M_El: f64 = 2.718281828459045;
pub const M_LOG2El: f64 = 1.4426950408889634;
pub const M_LOG10El: f64 = 0.4342944819032518;
pub const M_LN2l: f64 = 0.6931471805599453;
pub const M_LN10l: f64 = 2.302585092994046;
pub const M_PIl: f64 = 3.141592653589793;
pub const M_PI_2l: f64 = 1.5707963267948966;
pub const M_PI_4l: f64 = 0.7853981633974483;
pub const M_1_PIl: f64 = 0.3183098861837907;
pub const M_2_PIl: f64 = 0.6366197723675814;
pub const M_2_SQRTPIl: f64 = 1.1283791670955126;
pub const M_SQRT2l: f64 = 1.4142135623730951;
pub const M_SQRT1_2l: f64 = 0.7071067811865476;
pub const _DLFCN_H: u32 = 1;
pub const RTLD_LAZY: u32 = 1;
pub const RTLD_NOW: u32 = 2;
pub const RTLD_BINDING_MASK: u32 = 3;
pub const RTLD_NOLOAD: u32 = 4;
pub const RTLD_DEEPBIND: u32 = 8;
pub const RTLD_GLOBAL: u32 = 256;
pub const RTLD_LOCAL: u32 = 0;
pub const RTLD_NODELETE: u32 = 4096;
pub const LM_ID_BASE: u32 = 0;
pub const LM_ID_NEWLM: i32 = -1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const CHAR_WIDTH: u32 = 8;
pub const SCHAR_WIDTH: u32 = 8;
pub const UCHAR_WIDTH: u32 = 8;
pub const SHRT_WIDTH: u32 = 16;
pub const USHRT_WIDTH: u32 = 16;
pub const INT_WIDTH: u32 = 32;
pub const UINT_WIDTH: u32 = 32;
pub const LONG_WIDTH: u32 = 64;
pub const ULONG_WIDTH: u32 = 64;
pub const LLONG_WIDTH: u32 = 64;
pub const ULLONG_WIDTH: u32 = 64;
pub const BOOL_MAX: u32 = 1;
pub const BOOL_WIDTH: u32 = 1;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_FD_SETSIZE: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_QLIMIT: u32 = 1;
pub const _POSIX_HIWAT: u32 = 512;
pub const _POSIX_UIO_MAXIOV: u32 = 16;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const __SC_THREAD_STACK_MIN_VALUE: u32 = 75;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _XOPEN_LIM_H: u32 = 1;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const _BITS_UIO_LIM_H: u32 = 1;
pub const __IOV_MAX: u32 = 1024;
pub const IOV_MAX: u32 = 1024;
pub const NL_ARGMAX: u32 = 4096;
pub const NL_LANGMAX: u32 = 2048;
pub const NZERO: u32 = 20;
pub const WORD_BIT: u32 = 32;
pub const LONG_BIT: u32 = 64;
pub const CHAR_MIN: u32 = 0;
pub const _INTTYPES_H: u32 = 1;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const ZEND_ENABLE_ZVAL_LONG64: u32 = 1;
pub const SIZEOF_ZEND_LONG: u32 = 8;
pub const ZEND_LTOA_BUF_LEN: u32 = 65;
pub const ZEND_LONG_FMT: &[u8; 4] = b"%ld\0";
pub const ZEND_ULONG_FMT: &[u8; 4] = b"%lu\0";
pub const ZEND_XLONG_FMT: &[u8; 4] = b"%lx\0";
pub const ZEND_LONG_FMT_SPEC: &[u8; 3] = b"ld\0";
pub const ZEND_ULONG_FMT_SPEC: &[u8; 3] = b"lu\0";
pub const MAX_LENGTH_OF_LONG: u32 = 20;
pub const LONG_MIN_DIGITS: &[u8; 20] = b"9223372036854775808\0";
pub const ZEND_ADDR_FMT: &[u8; 9] = b"0x%016zx\0";
pub const ZEND_LONG_CAN_OVFL_INT: u32 = 1;
pub const ZEND_LONG_CAN_OVFL_UINT: u32 = 1;
pub const ZEND_SIZE_T_CAN_OVFL_UINT: u32 = 1;
pub const PHP_RTLD_MODE: u32 = 1;
pub const ZEND_EXTENSIONS_SUPPORT: u32 = 1;
pub const ZEND_ALLOCA_MAX_SIZE: u32 = 32768;
pub const ZTS_V: u32 = 0;
pub const MAX_LENGTH_OF_DOUBLE: u32 = 32;
pub const ZEND_MAX_RESERVED_RESOURCES: u32 = 6;
pub const ZEND_SIZE_MAX: i32 = -1;
pub const _ZEND_TYPE_EXTRA_FLAGS_SHIFT: u32 = 25;
pub const _ZEND_TYPE_MASK: u32 = 33554431;
pub const _ZEND_TYPE_NAME_BIT: u32 = 16777216;
pub const _ZEND_TYPE_LITERAL_NAME_BIT: u32 = 8388608;
pub const _ZEND_TYPE_LIST_BIT: u32 = 4194304;
pub const _ZEND_TYPE_KIND_MASK: u32 = 29360128;
pub const _ZEND_TYPE_ITERABLE_BIT: u32 = 2097152;
pub const _ZEND_TYPE_ARENA_BIT: u32 = 1048576;
pub const _ZEND_TYPE_INTERSECTION_BIT: u32 = 524288;
pub const _ZEND_TYPE_UNION_BIT: u32 = 262144;
pub const _ZEND_TYPE_MAY_BE_MASK: u32 = 262143;
pub const _ZEND_TYPE_NULLABLE_BIT: u32 = 2;
pub const HT_MIN_SIZE: u32 = 8;
pub const HT_MAX_SIZE: u32 = 1073741824;
pub const IS_UNDEF: u32 = 0;
pub const IS_NULL: u32 = 1;
pub const IS_FALSE: u32 = 2;
pub const IS_TRUE: u32 = 3;
pub const IS_LONG: u32 = 4;
pub const IS_DOUBLE: u32 = 5;
pub const IS_STRING: u32 = 6;
pub const IS_ARRAY: u32 = 7;
pub const IS_OBJECT: u32 = 8;
pub const IS_RESOURCE: u32 = 9;
pub const IS_REFERENCE: u32 = 10;
pub const IS_CONSTANT_AST: u32 = 11;
pub const IS_CALLABLE: u32 = 12;
pub const IS_ITERABLE: u32 = 13;
pub const IS_VOID: u32 = 14;
pub const IS_STATIC: u32 = 15;
pub const IS_MIXED: u32 = 16;
pub const IS_NEVER: u32 = 17;
pub const IS_INDIRECT: u32 = 12;
pub const IS_PTR: u32 = 13;
pub const IS_ALIAS_PTR: u32 = 14;
pub const _IS_ERROR: u32 = 15;
pub const _IS_BOOL: u32 = 18;
pub const _IS_NUMBER: u32 = 19;
pub const ZEND_GUARD_PROPERTY_GET: u32 = 1;
pub const ZEND_GUARD_PROPERTY_SET: u32 = 2;
pub const ZEND_GUARD_PROPERTY_UNSET: u32 = 4;
pub const ZEND_GUARD_PROPERTY_ISSET: u32 = 8;
pub const ZEND_GUARD_PROPERTY_MASK: u32 = 15;
pub const ZEND_GUARD_RECURSION_DEBUG: u32 = 16;
pub const ZEND_GUARD_RECURSION_EXPORT: u32 = 32;
pub const ZEND_GUARD_RECURSION_JSON: u32 = 64;
pub const Z_TYPE_MASK: u32 = 255;
pub const Z_TYPE_FLAGS_MASK: u32 = 65280;
pub const Z_TYPE_FLAGS_SHIFT: u32 = 8;
pub const Z_TYPE_INFO_EXTRA_SHIFT: u32 = 16;
pub const GC_TYPE_MASK: u32 = 15;
pub const GC_FLAGS_MASK: u32 = 1008;
pub const GC_INFO_MASK: u32 = 4294966272;
pub const GC_FLAGS_SHIFT: u32 = 0;
pub const GC_INFO_SHIFT: u32 = 10;
pub const GC_NOT_COLLECTABLE: u32 = 16;
pub const GC_PROTECTED: u32 = 32;
pub const GC_IMMUTABLE: u32 = 64;
pub const GC_PERSISTENT: u32 = 128;
pub const GC_PERSISTENT_LOCAL: u32 = 256;
pub const GC_NULL: u32 = 17;
pub const GC_STRING: u32 = 22;
pub const GC_ARRAY: u32 = 7;
pub const GC_OBJECT: u32 = 8;
pub const GC_RESOURCE: u32 = 25;
pub const GC_REFERENCE: u32 = 26;
pub const GC_CONSTANT_AST: u32 = 27;
pub const IS_TYPE_REFCOUNTED: u32 = 1;
pub const IS_TYPE_COLLECTABLE: u32 = 2;
pub const IS_STATIC_VAR_UNINITIALIZED: u32 = 1;
pub const IS_INTERNED_STRING_EX: u32 = 6;
pub const IS_STRING_EX: u32 = 262;
pub const IS_ARRAY_EX: u32 = 775;
pub const IS_OBJECT_EX: u32 = 776;
pub const IS_RESOURCE_EX: u32 = 265;
pub const IS_REFERENCE_EX: u32 = 266;
pub const IS_CONSTANT_AST_EX: u32 = 267;
pub const IS_STR_CLASS_NAME_MAP_PTR: u32 = 32;
pub const IS_STR_INTERNED: u32 = 64;
pub const IS_STR_PERSISTENT: u32 = 128;
pub const IS_STR_PERMANENT: u32 = 256;
pub const IS_STR_VALID_UTF8: u32 = 512;
pub const IS_ARRAY_IMMUTABLE: u32 = 64;
pub const IS_ARRAY_PERSISTENT: u32 = 128;
pub const IS_OBJ_WEAKLY_REFERENCED: u32 = 128;
pub const IS_OBJ_DESTRUCTOR_CALLED: u32 = 256;
pub const IS_OBJ_FREE_CALLED: u32 = 512;
pub const ZEND_RC_DEBUG: u32 = 0;
pub const IS_PROP_UNINIT: u32 = 1;
pub const IS_PROP_REINITABLE: u32 = 2;
pub const ZEND_MAP_PTR_KIND_PTR: u32 = 0;
pub const ZEND_MAP_PTR_KIND_PTR_OR_OFFSET: u32 = 1;
pub const ZEND_MAP_PTR_KIND: u32 = 1;
pub const E_ERROR: u32 = 1;
pub const E_WARNING: u32 = 2;
pub const E_PARSE: u32 = 4;
pub const E_NOTICE: u32 = 8;
pub const E_CORE_ERROR: u32 = 16;
pub const E_CORE_WARNING: u32 = 32;
pub const E_COMPILE_ERROR: u32 = 64;
pub const E_COMPILE_WARNING: u32 = 128;
pub const E_USER_ERROR: u32 = 256;
pub const E_USER_WARNING: u32 = 512;
pub const E_USER_NOTICE: u32 = 1024;
pub const E_STRICT: u32 = 2048;
pub const E_RECOVERABLE_ERROR: u32 = 4096;
pub const E_DEPRECATED: u32 = 8192;
pub const E_USER_DEPRECATED: u32 = 16384;
pub const E_DONT_BAIL: u32 = 32768;
pub const E_ALL: u32 = 32767;
pub const E_CORE: u32 = 48;
pub const E_FATAL_ERRORS: u32 = 4437;
pub const ZEND_MM_OVERHEAD: u32 = 0;
pub const ZEND_MM_PAGE_SIZE: u32 = 4096;
pub const ZEND_MM_FIRST_PAGE: u32 = 1;
pub const ZEND_MM_MIN_SMALL_SIZE: u32 = 8;
pub const ZEND_MM_MAX_SMALL_SIZE: u32 = 3072;
pub const ZEND_MM_CUSTOM_HEAP_NONE: u32 = 0;
pub const ZEND_MM_CUSTOM_HEAP_STD: u32 = 1;
pub const ZEND_MM_CUSTOM_HEAP_DEBUG: u32 = 2;
pub const ZSTR_COPYABLE_CONCAT_PROPERTIES: u32 = 512;
pub const HASH_KEY_IS_STRING: u32 = 1;
pub const HASH_KEY_IS_LONG: u32 = 2;
pub const HASH_KEY_NON_EXISTENT: u32 = 3;
pub const HASH_UPDATE: u32 = 1;
pub const HASH_ADD: u32 = 2;
pub const HASH_UPDATE_INDIRECT: u32 = 4;
pub const HASH_ADD_NEW: u32 = 8;
pub const HASH_ADD_NEXT: u32 = 16;
pub const HASH_LOOKUP: u32 = 32;
pub const HASH_FLAG_CONSISTENCY: u32 = 3;
pub const HASH_FLAG_PACKED: u32 = 4;
pub const HASH_FLAG_UNINITIALIZED: u32 = 8;
pub const HASH_FLAG_STATIC_KEYS: u32 = 16;
pub const HASH_FLAG_HAS_EMPTY_IND: u32 = 32;
pub const HASH_FLAG_ALLOW_COW_VIOLATION: u32 = 64;
pub const HASH_FLAG_MASK: u32 = 255;
pub const ZEND_HASH_APPLY_KEEP: u32 = 0;
pub const ZEND_HASH_APPLY_REMOVE: u32 = 1;
pub const ZEND_HASH_APPLY_STOP: u32 = 2;
pub const ZEND_AST_SPEC: u32 = 1;
pub const ZEND_AST_SPECIAL_SHIFT: u32 = 6;
pub const ZEND_AST_IS_LIST_SHIFT: u32 = 7;
pub const ZEND_AST_NUM_CHILDREN_SHIFT: u32 = 8;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_ILP32_OFF32: i32 = -1;
pub const _POSIX_V7_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V6_ILP32_OFF32: i32 = -1;
pub const _POSIX_V6_ILP32_OFFBIG: i32 = -1;
pub const _XBS5_ILP32_OFF32: i32 = -1;
pub const _XBS5_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const CLOSE_RANGE_UNSHARE: u32 = 2;
pub const CLOSE_RANGE_CLOEXEC: u32 = 4;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const _BITS_TIMEX_H: u32 = 1;
pub const ADJ_OFFSET: u32 = 1;
pub const ADJ_FREQUENCY: u32 = 2;
pub const ADJ_MAXERROR: u32 = 4;
pub const ADJ_ESTERROR: u32 = 8;
pub const ADJ_STATUS: u32 = 16;
pub const ADJ_TIMECONST: u32 = 32;
pub const ADJ_TAI: u32 = 128;
pub const ADJ_SETOFFSET: u32 = 256;
pub const ADJ_MICRO: u32 = 4096;
pub const ADJ_NANO: u32 = 8192;
pub const ADJ_TICK: u32 = 16384;
pub const ADJ_OFFSET_SINGLESHOT: u32 = 32769;
pub const ADJ_OFFSET_SS_READ: u32 = 40961;
pub const MOD_OFFSET: u32 = 1;
pub const MOD_FREQUENCY: u32 = 2;
pub const MOD_MAXERROR: u32 = 4;
pub const MOD_ESTERROR: u32 = 8;
pub const MOD_STATUS: u32 = 16;
pub const MOD_TIMECONST: u32 = 32;
pub const MOD_CLKB: u32 = 16384;
pub const MOD_CLKA: u32 = 32769;
pub const MOD_TAI: u32 = 128;
pub const MOD_MICRO: u32 = 4096;
pub const MOD_NANO: u32 = 8192;
pub const STA_PLL: u32 = 1;
pub const STA_PPSFREQ: u32 = 2;
pub const STA_PPSTIME: u32 = 4;
pub const STA_FLL: u32 = 8;
pub const STA_INS: u32 = 16;
pub const STA_DEL: u32 = 32;
pub const STA_UNSYNC: u32 = 64;
pub const STA_FREQHOLD: u32 = 128;
pub const STA_PPSSIGNAL: u32 = 256;
pub const STA_PPSJITTER: u32 = 512;
pub const STA_PPSWANDER: u32 = 1024;
pub const STA_PPSERROR: u32 = 2048;
pub const STA_CLOCKERR: u32 = 4096;
pub const STA_NANO: u32 = 8192;
pub const STA_MODE: u32 = 16384;
pub const STA_CLK: u32 = 32768;
pub const STA_RONLY: u32 = 65280;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const ZEND_HRTIME_PLATFORM_POSIX: u32 = 0;
pub const ZEND_HRTIME_PLATFORM_WINDOWS: u32 = 0;
pub const ZEND_HRTIME_PLATFORM_APPLE: u32 = 0;
pub const ZEND_HRTIME_PLATFORM_HPUX: u32 = 0;
pub const ZEND_HRTIME_PLATFORM_AIX: u32 = 0;
pub const GC_BENCH: u32 = 0;
pub const _SYS_STAT_H: u32 = 1;
pub const _BITS_STAT_H: u32 = 1;
pub const _BITS_STRUCT_STAT_H: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const __BITS_PER_LONG: u32 = 64;
pub const STATX_TYPE: u32 = 1;
pub const STATX_MODE: u32 = 2;
pub const STATX_NLINK: u32 = 4;
pub const STATX_UID: u32 = 8;
pub const STATX_GID: u32 = 16;
pub const STATX_ATIME: u32 = 32;
pub const STATX_MTIME: u32 = 64;
pub const STATX_CTIME: u32 = 128;
pub const STATX_INO: u32 = 256;
pub const STATX_SIZE: u32 = 512;
pub const STATX_BLOCKS: u32 = 1024;
pub const STATX_BASIC_STATS: u32 = 2047;
pub const STATX_BTIME: u32 = 2048;
pub const STATX_MNT_ID: u32 = 4096;
pub const STATX_DIOALIGN: u32 = 8192;
pub const STATX__RESERVED: u32 = 2147483648;
pub const STATX_ALL: u32 = 4095;
pub const STATX_ATTR_COMPRESSED: u32 = 4;
pub const STATX_ATTR_IMMUTABLE: u32 = 16;
pub const STATX_ATTR_APPEND: u32 = 32;
pub const STATX_ATTR_NODUMP: u32 = 64;
pub const STATX_ATTR_ENCRYPTED: u32 = 2048;
pub const STATX_ATTR_AUTOMOUNT: u32 = 4096;
pub const STATX_ATTR_MOUNT_ROOT: u32 = 8192;
pub const STATX_ATTR_VERITY: u32 = 1048576;
pub const STATX_ATTR_DAX: u32 = 2097152;
pub const __statx_timestamp_defined: u32 = 1;
pub const __statx_defined: u32 = 1;
pub const ZEND_MMAP_AHEAD: u32 = 32;
pub const _BITS_SIGNUM_GENERIC_H: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGILL: u32 = 4;
pub const SIGABRT: u32 = 6;
pub const SIGFPE: u32 = 8;
pub const SIGSEGV: u32 = 11;
pub const SIGTERM: u32 = 15;
pub const SIGHUP: u32 = 1;
pub const SIGQUIT: u32 = 3;
pub const SIGTRAP: u32 = 5;
pub const SIGKILL: u32 = 9;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGIOT: u32 = 6;
pub const _BITS_SIGNUM_ARCH_H: u32 = 1;
pub const SIGSTKFLT: u32 = 16;
pub const SIGPWR: u32 = 30;
pub const SIGBUS: u32 = 7;
pub const SIGSYS: u32 = 31;
pub const SIGURG: u32 = 23;
pub const SIGSTOP: u32 = 19;
pub const SIGTSTP: u32 = 20;
pub const SIGCONT: u32 = 18;
pub const SIGCHLD: u32 = 17;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGPOLL: u32 = 29;
pub const SIGXFSZ: u32 = 25;
pub const SIGXCPU: u32 = 24;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGUSR1: u32 = 10;
pub const SIGUSR2: u32 = 12;
pub const SIGWINCH: u32 = 28;
pub const SIGIO: u32 = 29;
pub const SIGCLD: u32 = 17;
pub const __SIGRTMIN: u32 = 32;
pub const __SIGRTMAX: u32 = 64;
pub const _NSIG: u32 = 65;
pub const __sig_atomic_t_defined: u32 = 1;
pub const __siginfo_t_defined: u32 = 1;
pub const __SI_MAX_SIZE: u32 = 128;
pub const _BITS_SIGINFO_ARCH_H: u32 = 1;
pub const __SI_ERRNO_THEN_CODE: u32 = 1;
pub const __SI_HAVE_SIGSYS: u32 = 1;
pub const _BITS_SIGINFO_CONSTS_H: u32 = 1;
pub const __SI_ASYNCIO_AFTER_SIGIO: u32 = 1;
pub const _BITS_SIGINFO_CONSTS_ARCH_H: u32 = 1;
pub const __sigevent_t_defined: u32 = 1;
pub const __SIGEV_MAX_SIZE: u32 = 64;
pub const _BITS_SIGEVENT_CONSTS_H: u32 = 1;
pub const NSIG: u32 = 65;
pub const _BITS_SIGACTION_H: u32 = 1;
pub const SA_NOCLDSTOP: u32 = 1;
pub const SA_NOCLDWAIT: u32 = 2;
pub const SA_SIGINFO: u32 = 4;
pub const SA_ONSTACK: u32 = 134217728;
pub const SA_RESTART: u32 = 268435456;
pub const SA_NODEFER: u32 = 1073741824;
pub const SA_RESETHAND: u32 = 2147483648;
pub const SA_INTERRUPT: u32 = 536870912;
pub const SA_NOMASK: u32 = 1073741824;
pub const SA_ONESHOT: u32 = 2147483648;
pub const SA_STACK: u32 = 134217728;
pub const SIG_BLOCK: u32 = 0;
pub const SIG_UNBLOCK: u32 = 1;
pub const SIG_SETMASK: u32 = 2;
pub const _BITS_SIGCONTEXT_H: u32 = 1;
pub const FPSIMD_MAGIC: u32 = 1179680769;
pub const ESR_MAGIC: u32 = 1163088385;
pub const EXTRA_MAGIC: u32 = 1163416577;
pub const SVE_MAGIC: u32 = 1398162689;
pub const SVE_SIG_FLAG_SM: u32 = 1;
pub const ZA_MAGIC: u32 = 1412850501;
pub const __SVE_VQ_BYTES: u32 = 16;
pub const __SVE_VQ_MIN: u32 = 1;
pub const __SVE_VQ_MAX: u32 = 512;
pub const __SVE_VL_MIN: u32 = 16;
pub const __SVE_VL_MAX: u32 = 8192;
pub const __SVE_NUM_ZREGS: u32 = 32;
pub const __SVE_NUM_PREGS: u32 = 16;
pub const __SVE_ZREGS_OFFSET: u32 = 0;
pub const SVE_VQ_BYTES: u32 = 16;
pub const SVE_VQ_MIN: u32 = 1;
pub const SVE_VQ_MAX: u32 = 512;
pub const SVE_VL_MIN: u32 = 16;
pub const SVE_VL_MAX: u32 = 8192;
pub const SVE_NUM_ZREGS: u32 = 32;
pub const SVE_NUM_PREGS: u32 = 16;
pub const __stack_t_defined: u32 = 1;
pub const _SYS_UCONTEXT_H: u32 = 1;
pub const _SYS_PROCFS_H: u32 = 1;
pub const _SYS_TIME_H: u32 = 1;
pub const _SYS_USER_H: u32 = 1;
pub const ELF_PRARGSZ: u32 = 80;
pub const _BITS_SIGSTACK_H: u32 = 1;
pub const MINSIGSTKSZ: u32 = 5120;
pub const SIGSTKSZ: u32 = 16384;
pub const _BITS_SS_FLAGS_H: u32 = 1;
pub const __sigstack_defined: u32 = 1;
pub const _BITS_SIGTHREAD_H: u32 = 1;
pub const ZEND_SIGNAL_QUEUE_SIZE: u32 = 64;
pub const ZMSG_FAILED_INCLUDE_FOPEN: u32 = 1;
pub const ZMSG_FAILED_REQUIRE_FOPEN: u32 = 2;
pub const ZMSG_FAILED_HIGHLIGHT_FOPEN: u32 = 3;
pub const ZMSG_MEMORY_LEAK_DETECTED: u32 = 4;
pub const ZMSG_MEMORY_LEAK_REPEATED: u32 = 5;
pub const ZMSG_LOG_SCRIPT_NAME: u32 = 6;
pub const ZMSG_MEMORY_LEAKS_GRAND_TOTAL: u32 = 7;
pub const DEBUG_BACKTRACE_PROVIDE_OBJECT: u32 = 1;
pub const DEBUG_BACKTRACE_IGNORE_ARGS: u32 = 2;
pub const ZEND_PROPERTY_ISSET: u32 = 0;
pub const ZEND_PROPERTY_EXISTS: u32 = 2;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const __error_t_defined: u32 = 1;
pub const ZEND_UNCOMPARABLE: u32 = 1;
pub const ZEND_USE_ASM_ARITHMETIC: u32 = 1;
pub const XML_CONTEXT_BYTES: u32 = 1024;
pub const XML_DTD: u32 = 1;
pub const XML_NS: u32 = 1;
pub const ZEND_USE_ABS_JMP_ADDR: u32 = 0;
pub const ZEND_USE_ABS_CONST_ADDR: u32 = 0;
pub const ZEND_LIVE_TMPVAR: u32 = 0;
pub const ZEND_LIVE_LOOP: u32 = 1;
pub const ZEND_LIVE_SILENCE: u32 = 2;
pub const ZEND_LIVE_ROPE: u32 = 3;
pub const ZEND_LIVE_NEW: u32 = 4;
pub const ZEND_LIVE_MASK: u32 = 7;
pub const ZEND_ACC_PUBLIC: u32 = 1;
pub const ZEND_ACC_PROTECTED: u32 = 2;
pub const ZEND_ACC_PRIVATE: u32 = 4;
pub const ZEND_ACC_CHANGED: u32 = 8;
pub const ZEND_ACC_STATIC: u32 = 16;
pub const ZEND_ACC_PROMOTED: u32 = 32;
pub const ZEND_ACC_FINAL: u32 = 32;
pub const ZEND_ACC_ABSTRACT: u32 = 64;
pub const ZEND_ACC_EXPLICIT_ABSTRACT_CLASS: u32 = 64;
pub const ZEND_ACC_READONLY: u32 = 128;
pub const ZEND_ACC_IMMUTABLE: u32 = 128;
pub const ZEND_ACC_HAS_TYPE_HINTS: u32 = 256;
pub const ZEND_ACC_TOP_LEVEL: u32 = 512;
pub const ZEND_ACC_PRELOADED: u32 = 1024;
pub const ZEND_CLASS_CONST_IS_CASE: u32 = 64;
pub const ZEND_ACC_INTERFACE: u32 = 1;
pub const ZEND_ACC_TRAIT: u32 = 2;
pub const ZEND_ACC_ANON_CLASS: u32 = 4;
pub const ZEND_ACC_ENUM: u32 = 268435456;
pub const ZEND_ACC_LINKED: u32 = 8;
pub const ZEND_ACC_IMPLICIT_ABSTRACT_CLASS: u32 = 16;
pub const ZEND_ACC_USE_GUARDS: u32 = 2048;
pub const ZEND_ACC_CONSTANTS_UPDATED: u32 = 4096;
pub const ZEND_ACC_NO_DYNAMIC_PROPERTIES: u32 = 8192;
pub const ZEND_HAS_STATIC_IN_METHODS: u32 = 16384;
pub const ZEND_ACC_ALLOW_DYNAMIC_PROPERTIES: u32 = 32768;
pub const ZEND_ACC_READONLY_CLASS: u32 = 65536;
pub const ZEND_ACC_RESOLVED_PARENT: u32 = 131072;
pub const ZEND_ACC_RESOLVED_INTERFACES: u32 = 262144;
pub const ZEND_ACC_UNRESOLVED_VARIANCE: u32 = 524288;
pub const ZEND_ACC_NEARLY_LINKED: u32 = 1048576;
pub const ZEND_ACC_HAS_READONLY_PROPS: u32 = 2097152;
pub const ZEND_ACC_CACHED: u32 = 4194304;
pub const ZEND_ACC_CACHEABLE: u32 = 8388608;
pub const ZEND_ACC_HAS_AST_CONSTANTS: u32 = 16777216;
pub const ZEND_ACC_HAS_AST_PROPERTIES: u32 = 33554432;
pub const ZEND_ACC_HAS_AST_STATICS: u32 = 67108864;
pub const ZEND_ACC_FILE_CACHED: u32 = 134217728;
pub const ZEND_ACC_NOT_SERIALIZABLE: u32 = 536870912;
pub const ZEND_ACC_DEPRECATED: u32 = 2048;
pub const ZEND_ACC_RETURN_REFERENCE: u32 = 4096;
pub const ZEND_ACC_HAS_RETURN_TYPE: u32 = 8192;
pub const ZEND_ACC_VARIADIC: u32 = 16384;
pub const ZEND_ACC_HAS_FINALLY_BLOCK: u32 = 32768;
pub const ZEND_ACC_EARLY_BINDING: u32 = 65536;
pub const ZEND_ACC_USES_THIS: u32 = 131072;
pub const ZEND_ACC_CALL_VIA_TRAMPOLINE: u32 = 262144;
pub const ZEND_ACC_NEVER_CACHE: u32 = 524288;
pub const ZEND_ACC_TRAIT_CLONE: u32 = 1048576;
pub const ZEND_ACC_CTOR: u32 = 2097152;
pub const ZEND_ACC_CLOSURE: u32 = 4194304;
pub const ZEND_ACC_FAKE_CLOSURE: u32 = 8388608;
pub const ZEND_ACC_GENERATOR: u32 = 16777216;
pub const ZEND_ACC_DONE_PASS_TWO: u32 = 33554432;
pub const ZEND_ACC_ARENA_ALLOCATED: u32 = 33554432;
pub const ZEND_ACC_HEAP_RT_CACHE: u32 = 67108864;
pub const ZEND_ACC_USER_ARG_INFO: u32 = 67108864;
pub const ZEND_ACC_COMPILE_TIME_EVAL: u32 = 134217728;
pub const ZEND_ACC_OVERRIDE: u32 = 268435456;
pub const ZEND_ACC_STRICT_TYPES: u32 = 2147483648;
pub const ZEND_ACC_PPP_MASK: u32 = 7;
pub const ZEND_ACC_CALL_VIA_HANDLER: u32 = 262144;
pub const ZEND_SHORT_CIRCUITING_CHAIN_MASK: u32 = 3;
pub const ZEND_SHORT_CIRCUITING_CHAIN_EXPR: u32 = 0;
pub const ZEND_SHORT_CIRCUITING_CHAIN_ISSET: u32 = 1;
pub const ZEND_SHORT_CIRCUITING_CHAIN_EMPTY: u32 = 2;
pub const ZEND_JMP_NULL_BP_VAR_IS: u32 = 4;
pub const ZEND_RETURN_VALUE: u32 = 0;
pub const ZEND_RETURN_REFERENCE: u32 = 1;
pub const ZEND_CALL_HAS_THIS: u32 = 776;
pub const ZEND_CALL_FUNCTION: u32 = 0;
pub const ZEND_CALL_CODE: u32 = 65536;
pub const ZEND_CALL_NESTED: u32 = 0;
pub const ZEND_CALL_TOP: u32 = 131072;
pub const ZEND_CALL_ALLOCATED: u32 = 262144;
pub const ZEND_CALL_FREE_EXTRA_ARGS: u32 = 524288;
pub const ZEND_CALL_HAS_SYMBOL_TABLE: u32 = 1048576;
pub const ZEND_CALL_RELEASE_THIS: u32 = 2097152;
pub const ZEND_CALL_CLOSURE: u32 = 4194304;
pub const ZEND_CALL_FAKE_CLOSURE: u32 = 8388608;
pub const ZEND_CALL_GENERATOR: u32 = 16777216;
pub const ZEND_CALL_DYNAMIC: u32 = 33554432;
pub const ZEND_CALL_MAY_HAVE_UNDEF: u32 = 67108864;
pub const ZEND_CALL_HAS_EXTRA_NAMED_PARAMS: u32 = 134217728;
pub const ZEND_CALL_OBSERVED: u32 = 268435456;
pub const ZEND_CALL_JIT_RESERVED: u32 = 536870912;
pub const ZEND_CALL_NEEDS_REATTACH: u32 = 1073741824;
pub const ZEND_CALL_SEND_ARG_BY_REF: u32 = 2147483648;
pub const ZEND_CALL_NESTED_FUNCTION: u32 = 0;
pub const ZEND_CALL_NESTED_CODE: u32 = 65536;
pub const ZEND_CALL_TOP_FUNCTION: u32 = 131072;
pub const ZEND_CALL_TOP_CODE: u32 = 196608;
pub const IS_UNUSED: u32 = 0;
pub const IS_CONST: u32 = 1;
pub const IS_TMP_VAR: u32 = 2;
pub const IS_VAR: u32 = 4;
pub const IS_CV: u32 = 8;
pub const IS_SMART_BRANCH_JMPZ: u32 = 16;
pub const IS_SMART_BRANCH_JMPNZ: u32 = 32;
pub const ZEND_EXTRA_VALUE: u32 = 1;
pub const _SETJMP_H: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __jmp_buf_tag_defined: u32 = 1;
pub const HAVE_C11_ATOMICS: u32 = 1;
pub const STACK_BLOCK_SIZE: u32 = 16;
pub const PTR_STACK_BLOCK_SIZE: u32 = 64;
pub const ZEND_PTR_STACK_NUM_ARGS: u32 = 3;
pub const OBJ_BUCKET_INVALID: u32 = 1;
pub const XPFPA_HAVE_CW: u32 = 0;
pub const SYMTABLE_CACHE_SIZE: u32 = 32;
pub const ZEND_MAX_ALLOWED_STACK_SIZE_UNCHECKED: i32 = -1;
pub const ZEND_MAX_ALLOWED_STACK_SIZE_DETECT: u32 = 0;
pub const EG_FLAGS_INITIAL: u32 = 0;
pub const EG_FLAGS_IN_SHUTDOWN: u32 = 1;
pub const EG_FLAGS_OBJECT_STORE_NO_REUSE: u32 = 2;
pub const EG_FLAGS_IN_RESOURCE_SHUTDOWN: u32 = 4;
pub const INITIAL_OP_ARRAY_SIZE: u32 = 64;
pub const ZEND_VM_SPEC: u32 = 1;
pub const ZEND_VM_LINES: u32 = 0;
pub const ZEND_VM_KIND_CALL: u32 = 1;
pub const ZEND_VM_KIND_SWITCH: u32 = 2;
pub const ZEND_VM_KIND_GOTO: u32 = 3;
pub const ZEND_VM_KIND_HYBRID: u32 = 4;
pub const ZEND_VM_KIND: u32 = 4;
pub const ZEND_VM_OP_SPEC: u32 = 1;
pub const ZEND_VM_OP_CONST: u32 = 2;
pub const ZEND_VM_OP_TMPVAR: u32 = 4;
pub const ZEND_VM_OP_TMPVARCV: u32 = 8;
pub const ZEND_VM_OP_MASK: u32 = 240;
pub const ZEND_VM_OP_NUM: u32 = 16;
pub const ZEND_VM_OP_JMP_ADDR: u32 = 32;
pub const ZEND_VM_OP_TRY_CATCH: u32 = 48;
pub const ZEND_VM_OP_THIS: u32 = 80;
pub const ZEND_VM_OP_NEXT: u32 = 96;
pub const ZEND_VM_OP_CLASS_FETCH: u32 = 112;
pub const ZEND_VM_OP_CONSTRUCTOR: u32 = 128;
pub const ZEND_VM_OP_CONST_FETCH: u32 = 144;
pub const ZEND_VM_OP_CACHE_SLOT: u32 = 160;
pub const ZEND_VM_EXT_VAR_FETCH: u32 = 65536;
pub const ZEND_VM_EXT_ISSET: u32 = 131072;
pub const ZEND_VM_EXT_CACHE_SLOT: u32 = 262144;
pub const ZEND_VM_EXT_ARRAY_INIT: u32 = 524288;
pub const ZEND_VM_EXT_REF: u32 = 1048576;
pub const ZEND_VM_EXT_FETCH_REF: u32 = 2097152;
pub const ZEND_VM_EXT_DIM_WRITE: u32 = 4194304;
pub const ZEND_VM_EXT_MASK: u32 = 251658240;
pub const ZEND_VM_EXT_NUM: u32 = 16777216;
pub const ZEND_VM_EXT_LAST_CATCH: u32 = 33554432;
pub const ZEND_VM_EXT_JMP_ADDR: u32 = 50331648;
pub const ZEND_VM_EXT_OP: u32 = 67108864;
pub const ZEND_VM_EXT_TYPE: u32 = 117440512;
pub const ZEND_VM_EXT_EVAL: u32 = 134217728;
pub const ZEND_VM_EXT_TYPE_MASK: u32 = 150994944;
pub const ZEND_VM_EXT_SRC: u32 = 184549376;
pub const ZEND_VM_NO_CONST_CONST: u32 = 1073741824;
pub const ZEND_VM_COMMUTATIVE: u32 = 2147483648;
pub const ZEND_NOP: u32 = 0;
pub const ZEND_ADD: u32 = 1;
pub const ZEND_SUB: u32 = 2;
pub const ZEND_MUL: u32 = 3;
pub const ZEND_DIV: u32 = 4;
pub const ZEND_MOD: u32 = 5;
pub const ZEND_SL: u32 = 6;
pub const ZEND_SR: u32 = 7;
pub const ZEND_CONCAT: u32 = 8;
pub const ZEND_BW_OR: u32 = 9;
pub const ZEND_BW_AND: u32 = 10;
pub const ZEND_BW_XOR: u32 = 11;
pub const ZEND_POW: u32 = 12;
pub const ZEND_BW_NOT: u32 = 13;
pub const ZEND_BOOL_NOT: u32 = 14;
pub const ZEND_BOOL_XOR: u32 = 15;
pub const ZEND_IS_IDENTICAL: u32 = 16;
pub const ZEND_IS_NOT_IDENTICAL: u32 = 17;
pub const ZEND_IS_EQUAL: u32 = 18;
pub const ZEND_IS_NOT_EQUAL: u32 = 19;
pub const ZEND_IS_SMALLER: u32 = 20;
pub const ZEND_IS_SMALLER_OR_EQUAL: u32 = 21;
pub const ZEND_ASSIGN: u32 = 22;
pub const ZEND_ASSIGN_DIM: u32 = 23;
pub const ZEND_ASSIGN_OBJ: u32 = 24;
pub const ZEND_ASSIGN_STATIC_PROP: u32 = 25;
pub const ZEND_ASSIGN_OP: u32 = 26;
pub const ZEND_ASSIGN_DIM_OP: u32 = 27;
pub const ZEND_ASSIGN_OBJ_OP: u32 = 28;
pub const ZEND_ASSIGN_STATIC_PROP_OP: u32 = 29;
pub const ZEND_ASSIGN_REF: u32 = 30;
pub const ZEND_QM_ASSIGN: u32 = 31;
pub const ZEND_ASSIGN_OBJ_REF: u32 = 32;
pub const ZEND_ASSIGN_STATIC_PROP_REF: u32 = 33;
pub const ZEND_PRE_INC: u32 = 34;
pub const ZEND_PRE_DEC: u32 = 35;
pub const ZEND_POST_INC: u32 = 36;
pub const ZEND_POST_DEC: u32 = 37;
pub const ZEND_PRE_INC_STATIC_PROP: u32 = 38;
pub const ZEND_PRE_DEC_STATIC_PROP: u32 = 39;
pub const ZEND_POST_INC_STATIC_PROP: u32 = 40;
pub const ZEND_POST_DEC_STATIC_PROP: u32 = 41;
pub const ZEND_JMP: u32 = 42;
pub const ZEND_JMPZ: u32 = 43;
pub const ZEND_JMPNZ: u32 = 44;
pub const ZEND_JMPZ_EX: u32 = 46;
pub const ZEND_JMPNZ_EX: u32 = 47;
pub const ZEND_CASE: u32 = 48;
pub const ZEND_CHECK_VAR: u32 = 49;
pub const ZEND_SEND_VAR_NO_REF_EX: u32 = 50;
pub const ZEND_CAST: u32 = 51;
pub const ZEND_BOOL: u32 = 52;
pub const ZEND_FAST_CONCAT: u32 = 53;
pub const ZEND_ROPE_INIT: u32 = 54;
pub const ZEND_ROPE_ADD: u32 = 55;
pub const ZEND_ROPE_END: u32 = 56;
pub const ZEND_BEGIN_SILENCE: u32 = 57;
pub const ZEND_END_SILENCE: u32 = 58;
pub const ZEND_INIT_FCALL_BY_NAME: u32 = 59;
pub const ZEND_DO_FCALL: u32 = 60;
pub const ZEND_INIT_FCALL: u32 = 61;
pub const ZEND_RETURN: u32 = 62;
pub const ZEND_RECV: u32 = 63;
pub const ZEND_RECV_INIT: u32 = 64;
pub const ZEND_SEND_VAL: u32 = 65;
pub const ZEND_SEND_VAR_EX: u32 = 66;
pub const ZEND_SEND_REF: u32 = 67;
pub const ZEND_NEW: u32 = 68;
pub const ZEND_INIT_NS_FCALL_BY_NAME: u32 = 69;
pub const ZEND_FREE: u32 = 70;
pub const ZEND_INIT_ARRAY: u32 = 71;
pub const ZEND_ADD_ARRAY_ELEMENT: u32 = 72;
pub const ZEND_INCLUDE_OR_EVAL: u32 = 73;
pub const ZEND_UNSET_VAR: u32 = 74;
pub const ZEND_UNSET_DIM: u32 = 75;
pub const ZEND_UNSET_OBJ: u32 = 76;
pub const ZEND_FE_RESET_R: u32 = 77;
pub const ZEND_FE_FETCH_R: u32 = 78;
pub const ZEND_EXIT: u32 = 79;
pub const ZEND_FETCH_R: u32 = 80;
pub const ZEND_FETCH_DIM_R: u32 = 81;
pub const ZEND_FETCH_OBJ_R: u32 = 82;
pub const ZEND_FETCH_W: u32 = 83;
pub const ZEND_FETCH_DIM_W: u32 = 84;
pub const ZEND_FETCH_OBJ_W: u32 = 85;
pub const ZEND_FETCH_RW: u32 = 86;
pub const ZEND_FETCH_DIM_RW: u32 = 87;
pub const ZEND_FETCH_OBJ_RW: u32 = 88;
pub const ZEND_FETCH_IS: u32 = 89;
pub const ZEND_FETCH_DIM_IS: u32 = 90;
pub const ZEND_FETCH_OBJ_IS: u32 = 91;
pub const ZEND_FETCH_FUNC_ARG: u32 = 92;
pub const ZEND_FETCH_DIM_FUNC_ARG: u32 = 93;
pub const ZEND_FETCH_OBJ_FUNC_ARG: u32 = 94;
pub const ZEND_FETCH_UNSET: u32 = 95;
pub const ZEND_FETCH_DIM_UNSET: u32 = 96;
pub const ZEND_FETCH_OBJ_UNSET: u32 = 97;
pub const ZEND_FETCH_LIST_R: u32 = 98;
pub const ZEND_FETCH_CONSTANT: u32 = 99;
pub const ZEND_CHECK_FUNC_ARG: u32 = 100;
pub const ZEND_EXT_STMT: u32 = 101;
pub const ZEND_EXT_FCALL_BEGIN: u32 = 102;
pub const ZEND_EXT_FCALL_END: u32 = 103;
pub const ZEND_EXT_NOP: u32 = 104;
pub const ZEND_TICKS: u32 = 105;
pub const ZEND_SEND_VAR_NO_REF: u32 = 106;
pub const ZEND_CATCH: u32 = 107;
pub const ZEND_THROW: u32 = 108;
pub const ZEND_FETCH_CLASS: u32 = 109;
pub const ZEND_CLONE: u32 = 110;
pub const ZEND_RETURN_BY_REF: u32 = 111;
pub const ZEND_INIT_METHOD_CALL: u32 = 112;
pub const ZEND_INIT_STATIC_METHOD_CALL: u32 = 113;
pub const ZEND_ISSET_ISEMPTY_VAR: u32 = 114;
pub const ZEND_ISSET_ISEMPTY_DIM_OBJ: u32 = 115;
pub const ZEND_SEND_VAL_EX: u32 = 116;
pub const ZEND_SEND_VAR: u32 = 117;
pub const ZEND_INIT_USER_CALL: u32 = 118;
pub const ZEND_SEND_ARRAY: u32 = 119;
pub const ZEND_SEND_USER: u32 = 120;
pub const ZEND_STRLEN: u32 = 121;
pub const ZEND_DEFINED: u32 = 122;
pub const ZEND_TYPE_CHECK: u32 = 123;
pub const ZEND_VERIFY_RETURN_TYPE: u32 = 124;
pub const ZEND_FE_RESET_RW: u32 = 125;
pub const ZEND_FE_FETCH_RW: u32 = 126;
pub const ZEND_FE_FREE: u32 = 127;
pub const ZEND_INIT_DYNAMIC_CALL: u32 = 128;
pub const ZEND_DO_ICALL: u32 = 129;
pub const ZEND_DO_UCALL: u32 = 130;
pub const ZEND_DO_FCALL_BY_NAME: u32 = 131;
pub const ZEND_PRE_INC_OBJ: u32 = 132;
pub const ZEND_PRE_DEC_OBJ: u32 = 133;
pub const ZEND_POST_INC_OBJ: u32 = 134;
pub const ZEND_POST_DEC_OBJ: u32 = 135;
pub const ZEND_ECHO: u32 = 136;
pub const ZEND_OP_DATA: u32 = 137;
pub const ZEND_INSTANCEOF: u32 = 138;
pub const ZEND_GENERATOR_CREATE: u32 = 139;
pub const ZEND_MAKE_REF: u32 = 140;
pub const ZEND_DECLARE_FUNCTION: u32 = 141;
pub const ZEND_DECLARE_LAMBDA_FUNCTION: u32 = 142;
pub const ZEND_DECLARE_CONST: u32 = 143;
pub const ZEND_DECLARE_CLASS: u32 = 144;
pub const ZEND_DECLARE_CLASS_DELAYED: u32 = 145;
pub const ZEND_DECLARE_ANON_CLASS: u32 = 146;
pub const ZEND_ADD_ARRAY_UNPACK: u32 = 147;
pub const ZEND_ISSET_ISEMPTY_PROP_OBJ: u32 = 148;
pub const ZEND_HANDLE_EXCEPTION: u32 = 149;
pub const ZEND_USER_OPCODE: u32 = 150;
pub const ZEND_ASSERT_CHECK: u32 = 151;
pub const ZEND_JMP_SET: u32 = 152;
pub const ZEND_UNSET_CV: u32 = 153;
pub const ZEND_ISSET_ISEMPTY_CV: u32 = 154;
pub const ZEND_FETCH_LIST_W: u32 = 155;
pub const ZEND_SEPARATE: u32 = 156;
pub const ZEND_FETCH_CLASS_NAME: u32 = 157;
pub const ZEND_CALL_TRAMPOLINE: u32 = 158;
pub const ZEND_DISCARD_EXCEPTION: u32 = 159;
pub const ZEND_YIELD: u32 = 160;
pub const ZEND_GENERATOR_RETURN: u32 = 161;
pub const ZEND_FAST_CALL: u32 = 162;
pub const ZEND_FAST_RET: u32 = 163;
pub const ZEND_RECV_VARIADIC: u32 = 164;
pub const ZEND_SEND_UNPACK: u32 = 165;
pub const ZEND_YIELD_FROM: u32 = 166;
pub const ZEND_COPY_TMP: u32 = 167;
pub const ZEND_BIND_GLOBAL: u32 = 168;
pub const ZEND_COALESCE: u32 = 169;
pub const ZEND_SPACESHIP: u32 = 170;
pub const ZEND_FUNC_NUM_ARGS: u32 = 171;
pub const ZEND_FUNC_GET_ARGS: u32 = 172;
pub const ZEND_FETCH_STATIC_PROP_R: u32 = 173;
pub const ZEND_FETCH_STATIC_PROP_W: u32 = 174;
pub const ZEND_FETCH_STATIC_PROP_RW: u32 = 175;
pub const ZEND_FETCH_STATIC_PROP_IS: u32 = 176;
pub const ZEND_FETCH_STATIC_PROP_FUNC_ARG: u32 = 177;
pub const ZEND_FETCH_STATIC_PROP_UNSET: u32 = 178;
pub const ZEND_UNSET_STATIC_PROP: u32 = 179;
pub const ZEND_ISSET_ISEMPTY_STATIC_PROP: u32 = 180;
pub const ZEND_FETCH_CLASS_CONSTANT: u32 = 181;
pub const ZEND_BIND_LEXICAL: u32 = 182;
pub const ZEND_BIND_STATIC: u32 = 183;
pub const ZEND_FETCH_THIS: u32 = 184;
pub const ZEND_SEND_FUNC_ARG: u32 = 185;
pub const ZEND_ISSET_ISEMPTY_THIS: u32 = 186;
pub const ZEND_SWITCH_LONG: u32 = 187;
pub const ZEND_SWITCH_STRING: u32 = 188;
pub const ZEND_IN_ARRAY: u32 = 189;
pub const ZEND_COUNT: u32 = 190;
pub const ZEND_GET_CLASS: u32 = 191;
pub const ZEND_GET_CALLED_CLASS: u32 = 192;
pub const ZEND_GET_TYPE: u32 = 193;
pub const ZEND_ARRAY_KEY_EXISTS: u32 = 194;
pub const ZEND_MATCH: u32 = 195;
pub const ZEND_CASE_STRICT: u32 = 196;
pub const ZEND_MATCH_ERROR: u32 = 197;
pub const ZEND_JMP_NULL: u32 = 198;
pub const ZEND_CHECK_UNDEF_ARGS: u32 = 199;
pub const ZEND_FETCH_GLOBALS: u32 = 200;
pub const ZEND_VERIFY_NEVER_TYPE: u32 = 201;
pub const ZEND_CALLABLE_CONVERT: u32 = 202;
pub const ZEND_BIND_INIT_STATIC_OR_JMP: u32 = 203;
pub const ZEND_VM_LAST_OPCODE: u32 = 203;
pub const ZEND_FETCH_CLASS_DEFAULT: u32 = 0;
pub const ZEND_FETCH_CLASS_SELF: u32 = 1;
pub const ZEND_FETCH_CLASS_PARENT: u32 = 2;
pub const ZEND_FETCH_CLASS_STATIC: u32 = 3;
pub const ZEND_FETCH_CLASS_AUTO: u32 = 4;
pub const ZEND_FETCH_CLASS_INTERFACE: u32 = 5;
pub const ZEND_FETCH_CLASS_TRAIT: u32 = 6;
pub const ZEND_FETCH_CLASS_MASK: u32 = 15;
pub const ZEND_FETCH_CLASS_NO_AUTOLOAD: u32 = 128;
pub const ZEND_FETCH_CLASS_SILENT: u32 = 256;
pub const ZEND_FETCH_CLASS_EXCEPTION: u32 = 512;
pub const ZEND_FETCH_CLASS_ALLOW_UNLINKED: u32 = 1024;
pub const ZEND_FETCH_CLASS_ALLOW_NEARLY_LINKED: u32 = 2048;
pub const ZEND_PARAM_REF: u32 = 8;
pub const ZEND_PARAM_VARIADIC: u32 = 16;
pub const ZEND_NAME_FQ: u32 = 0;
pub const ZEND_NAME_NOT_FQ: u32 = 1;
pub const ZEND_NAME_RELATIVE: u32 = 2;
pub const ZEND_CONST_EXPR_NEW_FETCH_TYPE_SHIFT: u32 = 2;
pub const ZEND_TYPE_NULLABLE: u32 = 256;
pub const ZEND_ARRAY_SYNTAX_LIST: u32 = 1;
pub const ZEND_ARRAY_SYNTAX_LONG: u32 = 2;
pub const ZEND_ARRAY_SYNTAX_SHORT: u32 = 3;
pub const BP_VAR_R: u32 = 0;
pub const BP_VAR_W: u32 = 1;
pub const BP_VAR_RW: u32 = 2;
pub const BP_VAR_IS: u32 = 3;
pub const BP_VAR_FUNC_ARG: u32 = 4;
pub const BP_VAR_UNSET: u32 = 5;
pub const ZEND_INTERNAL_FUNCTION: u32 = 1;
pub const ZEND_USER_FUNCTION: u32 = 2;
pub const ZEND_EVAL_CODE: u32 = 4;
pub const ZEND_INTERNAL_CLASS: u32 = 1;
pub const ZEND_USER_CLASS: u32 = 2;
pub const ZEND_EVAL: u32 = 1;
pub const ZEND_INCLUDE: u32 = 2;
pub const ZEND_INCLUDE_ONCE: u32 = 4;
pub const ZEND_REQUIRE: u32 = 8;
pub const ZEND_REQUIRE_ONCE: u32 = 16;
pub const ZEND_FETCH_GLOBAL: u32 = 2;
pub const ZEND_FETCH_LOCAL: u32 = 4;
pub const ZEND_FETCH_GLOBAL_LOCK: u32 = 8;
pub const ZEND_FETCH_TYPE_MASK: u32 = 14;
pub const ZEND_FETCH_REF: u32 = 1;
pub const ZEND_FETCH_DIM_WRITE: u32 = 2;
pub const ZEND_FETCH_OBJ_FLAGS: u32 = 3;
pub const ZEND_FETCH_DIM_REF: u32 = 1;
pub const ZEND_FETCH_DIM_DIM: u32 = 2;
pub const ZEND_FETCH_DIM_OBJ: u32 = 3;
pub const ZEND_FETCH_DIM_INCDEC: u32 = 4;
pub const ZEND_ISEMPTY: u32 = 1;
pub const ZEND_LAST_CATCH: u32 = 1;
pub const ZEND_FREE_ON_RETURN: u32 = 1;
pub const ZEND_FREE_SWITCH: u32 = 2;
pub const ZEND_SEND_BY_VAL: u32 = 0;
pub const ZEND_SEND_BY_REF: u32 = 1;
pub const ZEND_SEND_PREFER_REF: u32 = 2;
pub const ZEND_THROW_IS_EXPR: u32 = 1;
pub const ZEND_FCALL_MAY_HAVE_EXTRA_NAMED_PARAMS: u32 = 1;
pub const _ZEND_SEND_MODE_SHIFT: u32 = 25;
pub const _ZEND_IS_VARIADIC_BIT: u32 = 134217728;
pub const _ZEND_IS_PROMOTED_BIT: u32 = 268435456;
pub const _ZEND_IS_TENTATIVE_BIT: u32 = 536870912;
pub const ZEND_DIM_IS: u32 = 1;
pub const ZEND_DIM_ALTERNATIVE_SYNTAX: u32 = 2;
pub const ZEND_ENCAPS_VAR_DOLLAR_CURLY: u32 = 1;
pub const ZEND_ENCAPS_VAR_DOLLAR_CURLY_VAR_VAR: u32 = 2;
pub const IS_CONSTANT_CLASS: u32 = 1024;
pub const IS_CONSTANT_UNQUALIFIED_IN_NAMESPACE: u32 = 2048;
pub const MAX_ARG_FLAG_NUM: u32 = 12;
pub const ZEND_RETURN_VAL: u32 = 0;
pub const ZEND_RETURN_REF: u32 = 1;
pub const ZEND_BIND_VAL: u32 = 0;
pub const ZEND_BIND_REF: u32 = 1;
pub const ZEND_BIND_IMPLICIT: u32 = 2;
pub const ZEND_BIND_EXPLICIT: u32 = 4;
pub const ZEND_RETURNS_FUNCTION: u32 = 1;
pub const ZEND_RETURNS_VALUE: u32 = 2;
pub const ZEND_ARRAY_ELEMENT_REF: u32 = 1;
pub const ZEND_ARRAY_NOT_PACKED: u32 = 2;
pub const ZEND_ARRAY_SIZE_SHIFT: u32 = 2;
pub const ZEND_PARENTHESIZED_CONDITIONAL: u32 = 1;
pub const ZEND_SYMBOL_CLASS: u32 = 1;
pub const ZEND_SYMBOL_FUNCTION: u32 = 2;
pub const ZEND_SYMBOL_CONST: u32 = 4;
pub const ZEND_GOTO: u32 = 253;
pub const ZEND_BRK: u32 = 254;
pub const ZEND_CONT: u32 = 255;
pub const ZEND_CLONE_FUNC_NAME: &[u8; 8] = b"__clone\0";
pub const ZEND_CONSTRUCTOR_FUNC_NAME: &[u8; 12] = b"__construct\0";
pub const ZEND_DESTRUCTOR_FUNC_NAME: &[u8; 11] = b"__destruct\0";
pub const ZEND_GET_FUNC_NAME: &[u8; 6] = b"__get\0";
pub const ZEND_SET_FUNC_NAME: &[u8; 6] = b"__set\0";
pub const ZEND_UNSET_FUNC_NAME: &[u8; 8] = b"__unset\0";
pub const ZEND_ISSET_FUNC_NAME: &[u8; 8] = b"__isset\0";
pub const ZEND_CALL_FUNC_NAME: &[u8; 7] = b"__call\0";
pub const ZEND_CALLSTATIC_FUNC_NAME: &[u8; 13] = b"__callstatic\0";
pub const ZEND_TOSTRING_FUNC_NAME: &[u8; 11] = b"__tostring\0";
pub const ZEND_INVOKE_FUNC_NAME: &[u8; 9] = b"__invoke\0";
pub const ZEND_DEBUGINFO_FUNC_NAME: &[u8; 12] = b"__debuginfo\0";
pub const ZEND_COMPILE_EXTENDED_STMT: u32 = 1;
pub const ZEND_COMPILE_EXTENDED_FCALL: u32 = 2;
pub const ZEND_COMPILE_EXTENDED_INFO: u32 = 3;
pub const ZEND_COMPILE_HANDLE_OP_ARRAY: u32 = 4;
pub const ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS: u32 = 8;
pub const ZEND_COMPILE_IGNORE_INTERNAL_CLASSES: u32 = 16;
pub const ZEND_COMPILE_DELAYED_BINDING: u32 = 32;
pub const ZEND_COMPILE_NO_CONSTANT_SUBSTITUTION: u32 = 64;
pub const ZEND_COMPILE_NO_PERSISTENT_CONSTANT_SUBSTITUTION: u32 = 256;
pub const ZEND_COMPILE_IGNORE_USER_FUNCTIONS: u32 = 512;
pub const ZEND_COMPILE_GUARDS: u32 = 1024;
pub const ZEND_COMPILE_NO_BUILTINS: u32 = 2048;
pub const ZEND_COMPILE_WITH_FILE_CACHE: u32 = 4096;
pub const ZEND_COMPILE_IGNORE_OTHER_FILES: u32 = 8192;
pub const ZEND_COMPILE_WITHOUT_EXECUTION: u32 = 16384;
pub const ZEND_COMPILE_PRELOAD: u32 = 32768;
pub const ZEND_COMPILE_NO_JUMPTABLES: u32 = 65536;
pub const ZEND_COMPILE_PRELOAD_IN_CHILD: u32 = 131072;
pub const ZEND_COMPILE_IGNORE_OBSERVER: u32 = 262144;
pub const ZEND_COMPILE_DEFAULT: u32 = 4;
pub const ZEND_COMPILE_DEFAULT_FOR_EVAL: u32 = 0;
pub const ZEND_BUILD_TS: &[u8; 5] = b",NTS\0";
pub const ZEND_MODULE_API_NO: u32 = 20230831;
pub const USING_ZTS: u32 = 0;
pub const MODULE_PERSISTENT: u32 = 1;
pub const MODULE_TEMPORARY: u32 = 2;
pub const MODULE_DEP_REQUIRED: u32 = 1;
pub const MODULE_DEP_CONFLICTS: u32 = 2;
pub const MODULE_DEP_OPTIONAL: u32 = 3;
pub const ZEND_USER_OPCODE_CONTINUE: u32 = 0;
pub const ZEND_USER_OPCODE_RETURN: u32 = 1;
pub const ZEND_USER_OPCODE_DISPATCH: u32 = 2;
pub const ZEND_USER_OPCODE_ENTER: u32 = 3;
pub const ZEND_USER_OPCODE_LEAVE: u32 = 4;
pub const ZEND_USER_OPCODE_DISPATCH_TO: u32 = 256;
pub const CACHE_SPECIAL: u32 = 1;
pub const MAY_BE_UNDEF: u32 = 1;
pub const MAY_BE_NULL: u32 = 2;
pub const MAY_BE_FALSE: u32 = 4;
pub const MAY_BE_TRUE: u32 = 8;
pub const MAY_BE_BOOL: u32 = 12;
pub const MAY_BE_LONG: u32 = 16;
pub const MAY_BE_DOUBLE: u32 = 32;
pub const MAY_BE_STRING: u32 = 64;
pub const MAY_BE_ARRAY: u32 = 128;
pub const MAY_BE_OBJECT: u32 = 256;
pub const MAY_BE_RESOURCE: u32 = 512;
pub const MAY_BE_ANY: u32 = 1022;
pub const MAY_BE_REF: u32 = 1024;
pub const MAY_BE_CALLABLE: u32 = 4096;
pub const MAY_BE_VOID: u32 = 16384;
pub const MAY_BE_NEVER: u32 = 131072;
pub const MAY_BE_STATIC: u32 = 32768;
pub const MAY_BE_ARRAY_SHIFT: u32 = 10;
pub const MAY_BE_ARRAY_OF_NULL: u32 = 2048;
pub const MAY_BE_ARRAY_OF_FALSE: u32 = 4096;
pub const MAY_BE_ARRAY_OF_TRUE: u32 = 8192;
pub const MAY_BE_ARRAY_OF_LONG: u32 = 16384;
pub const MAY_BE_ARRAY_OF_DOUBLE: u32 = 32768;
pub const MAY_BE_ARRAY_OF_STRING: u32 = 65536;
pub const MAY_BE_ARRAY_OF_ARRAY: u32 = 131072;
pub const MAY_BE_ARRAY_OF_OBJECT: u32 = 262144;
pub const MAY_BE_ARRAY_OF_RESOURCE: u32 = 524288;
pub const MAY_BE_ARRAY_OF_ANY: u32 = 1046528;
pub const MAY_BE_ARRAY_OF_REF: u32 = 1048576;
pub const MAY_BE_ARRAY_PACKED: u32 = 2097152;
pub const MAY_BE_ARRAY_NUMERIC_HASH: u32 = 4194304;
pub const MAY_BE_ARRAY_STRING_HASH: u32 = 8388608;
pub const MAY_BE_ARRAY_EMPTY: u32 = 536870912;
pub const MAY_BE_ARRAY_KEY_LONG: u32 = 6291456;
pub const MAY_BE_ARRAY_KEY_STRING: u32 = 8388608;
pub const MAY_BE_ARRAY_KEY_ANY: u32 = 551550976;
pub const MAY_BE_CLASS: u32 = 16777216;
pub const MAY_BE_INDIRECT: u32 = 33554432;
pub const MAY_BE_RC1: u32 = 1073741824;
pub const MAY_BE_RCN: u32 = 2147483648;
pub const MAY_BE_ANY_ARRAY: u32 = 553646208;
pub const ZEND_PARSE_PARAMS_THROW: u32 = 0;
pub const ZEND_PARSE_PARAMS_QUIET: u32 = 2;
pub const IS_CALLABLE_CHECK_SYNTAX_ONLY: u32 = 1;
pub const IS_CALLABLE_SUPPRESS_DEPRECATIONS: u32 = 2;
pub const FAST_ZPP: u32 = 1;
pub const ZPP_ERROR_OK: u32 = 0;
pub const ZPP_ERROR_FAILURE: u32 = 1;
pub const ZPP_ERROR_WRONG_CALLBACK: u32 = 2;
pub const ZPP_ERROR_WRONG_CLASS: u32 = 3;
pub const ZPP_ERROR_WRONG_CLASS_OR_NULL: u32 = 4;
pub const ZPP_ERROR_WRONG_CLASS_OR_STRING: u32 = 5;
pub const ZPP_ERROR_WRONG_CLASS_OR_STRING_OR_NULL: u32 = 6;
pub const ZPP_ERROR_WRONG_CLASS_OR_LONG: u32 = 7;
pub const ZPP_ERROR_WRONG_CLASS_OR_LONG_OR_NULL: u32 = 8;
pub const ZPP_ERROR_WRONG_ARG: u32 = 9;
pub const ZPP_ERROR_WRONG_COUNT: u32 = 10;
pub const ZPP_ERROR_UNEXPECTED_EXTRA_NAMED: u32 = 11;
pub const ZPP_ERROR_WRONG_CALLBACK_OR_NULL: u32 = 12;
pub const PHP_OS_FAMILY: &[u8; 6] = b"Linux\0";
pub const PHP_DEBUG: u32 = 0;
pub const PHP_DIR_SEPARATOR: u8 = 47u8;
pub const PHP_EOL: &[u8; 2] = b"\n\0";
pub const CONFIGURE_COMMAND: &[u8; 535] = b" './configure'  '--prefix=/opt' '--enable-option-checking=fatal' '--with-config-file-path=/opt/sigan/config' '--disable-all' '--disable-phpdbg' '--disable-cgi' '--enable-embed' '--with-mysqli' '--with-curl' '--enable-dom' '--with-libxml' '--enable-exif' '--enable-fileinfo' '--enable-intl' '--enable-mbstring' '--with-openssl' '--enable-xml' '--with-zip' '--enable-session' '--enable-bcmath' '--enable-filter' '--enable-shmop' '--enable-opcache' '--with-zlib' '--with-gettext' 'PKG_CONFIG_PATH=/opt/lib64/pkgconfig:/opt/lib/pkgconfig'\0";
pub const PHP_ODBC_CFLAGS: &[u8; 1] = b"\0";
pub const PHP_ODBC_LFLAGS: &[u8; 1] = b"\0";
pub const PHP_ODBC_LIBS: &[u8; 1] = b"\0";
pub const PHP_ODBC_TYPE: &[u8; 1] = b"\0";
pub const PHP_OCI8_DIR: &[u8; 1] = b"\0";
pub const PHP_OCI8_ORACLE_VERSION: &[u8; 1] = b"\0";
pub const PHP_PROG_SENDMAIL: &[u8; 19] = b"/usr/sbin/sendmail\0";
pub const PEAR_INSTALLDIR: &[u8; 1] = b"\0";
pub const PHP_INCLUDE_PATH: &[u8; 3] = b".:\0";
pub const PHP_EXTENSION_DIR: &[u8; 50] = b"/opt/lib/php/extensions/no-debug-non-zts-20230831\0";
pub const PHP_PREFIX: &[u8; 5] = b"/opt\0";
pub const PHP_BINDIR: &[u8; 9] = b"/opt/bin\0";
pub const PHP_SBINDIR: &[u8; 10] = b"/opt/sbin\0";
pub const PHP_MANDIR: &[u8; 13] = b"/opt/php/man\0";
pub const PHP_LIBDIR: &[u8; 13] = b"/opt/lib/php\0";
pub const PHP_DATADIR: &[u8; 15] = b"/opt/share/php\0";
pub const PHP_SYSCONFDIR: &[u8; 9] = b"/opt/etc\0";
pub const PHP_LOCALSTATEDIR: &[u8; 9] = b"/opt/var\0";
pub const PHP_CONFIG_FILE_PATH: &[u8; 18] = b"/opt/sigan/config\0";
pub const PHP_CONFIG_FILE_SCAN_DIR: &[u8; 1] = b"\0";
pub const PHP_SHLIB_SUFFIX: &[u8; 3] = b"so\0";
pub const PHP_SHLIB_EXT_PREFIX: &[u8; 1] = b"\0";
pub const HAVE_STRLCPY: u32 = 1;
pub const USE_STRLCPY_PHP_IMPL: u32 = 1;
pub const HAVE_STRLCAT: u32 = 1;
pub const USE_STRLCAT_PHP_IMPL: u32 = 1;
pub const _CTYPE_H: u32 = 1;
pub const _PWD_H: u32 = 1;
pub const NSS_BUFLEN_PASSWD: u32 = 1024;
pub const _SYS_PARAM_H: u32 = 1;
pub const EXEC_PAGESIZE: u32 = 65536;
pub const HZ: u32 = 100;
pub const NOGROUP: i32 = -1;
pub const MAXHOSTNAMELEN: u32 = 64;
pub const MAXSYMLINKS: u32 = 20;
pub const NOFILE: u32 = 256;
pub const NCARGS: u32 = 131072;
pub const NGROUPS: u32 = 65536;
pub const CANBSIZ: u32 = 255;
pub const MAXPATHLEN: u32 = 4096;
pub const DEV_BSIZE: u32 = 512;
pub const EXEC_INPUT_BUF: u32 = 4096;
pub const PHP_MIME_TYPE: &[u8; 24] = b"application/x-httpd-php\0";
pub const _SYS_SYSLOG_H: u32 = 1;
pub const _BITS_SYSLOG_PATH_H: u32 = 1;
pub const _PATH_LOG: &[u8; 9] = b"/dev/log\0";
pub const LOG_EMERG: u32 = 0;
pub const LOG_ALERT: u32 = 1;
pub const LOG_CRIT: u32 = 2;
pub const LOG_ERR: u32 = 3;
pub const LOG_WARNING: u32 = 4;
pub const LOG_NOTICE: u32 = 5;
pub const LOG_INFO: u32 = 6;
pub const LOG_DEBUG: u32 = 7;
pub const LOG_PRIMASK: u32 = 7;
pub const LOG_KERN: u32 = 0;
pub const LOG_USER: u32 = 8;
pub const LOG_MAIL: u32 = 16;
pub const LOG_DAEMON: u32 = 24;
pub const LOG_AUTH: u32 = 32;
pub const LOG_SYSLOG: u32 = 40;
pub const LOG_LPR: u32 = 48;
pub const LOG_NEWS: u32 = 56;
pub const LOG_UUCP: u32 = 64;
pub const LOG_CRON: u32 = 72;
pub const LOG_AUTHPRIV: u32 = 80;
pub const LOG_FTP: u32 = 88;
pub const LOG_LOCAL0: u32 = 128;
pub const LOG_LOCAL1: u32 = 136;
pub const LOG_LOCAL2: u32 = 144;
pub const LOG_LOCAL3: u32 = 152;
pub const LOG_LOCAL4: u32 = 160;
pub const LOG_LOCAL5: u32 = 168;
pub const LOG_LOCAL6: u32 = 176;
pub const LOG_LOCAL7: u32 = 184;
pub const LOG_NFACILITIES: u32 = 24;
pub const LOG_FACMASK: u32 = 1016;
pub const LOG_PID: u32 = 1;
pub const LOG_CONS: u32 = 2;
pub const LOG_ODELAY: u32 = 4;
pub const LOG_NDELAY: u32 = 8;
pub const LOG_NOWAIT: u32 = 16;
pub const LOG_PERROR: u32 = 32;
pub const PHP_SYSLOG_FILTER_ALL: u32 = 0;
pub const PHP_SYSLOG_FILTER_NO_CTRL: u32 = 1;
pub const PHP_SYSLOG_FILTER_ASCII: u32 = 2;
pub const PHP_SYSLOG_FILTER_RAW: u32 = 3;
pub const PHP_OUTPUT_NEWAPI: u32 = 1;
pub const PHP_OUTPUT_HANDLER_WRITE: u32 = 0;
pub const PHP_OUTPUT_HANDLER_START: u32 = 1;
pub const PHP_OUTPUT_HANDLER_CLEAN: u32 = 2;
pub const PHP_OUTPUT_HANDLER_FLUSH: u32 = 4;
pub const PHP_OUTPUT_HANDLER_FINAL: u32 = 8;
pub const PHP_OUTPUT_HANDLER_CONT: u32 = 0;
pub const PHP_OUTPUT_HANDLER_END: u32 = 8;
pub const PHP_OUTPUT_HANDLER_INTERNAL: u32 = 0;
pub const PHP_OUTPUT_HANDLER_USER: u32 = 1;
pub const PHP_OUTPUT_HANDLER_CLEANABLE: u32 = 16;
pub const PHP_OUTPUT_HANDLER_FLUSHABLE: u32 = 32;
pub const PHP_OUTPUT_HANDLER_REMOVABLE: u32 = 64;
pub const PHP_OUTPUT_HANDLER_STDFLAGS: u32 = 112;
pub const PHP_OUTPUT_HANDLER_STARTED: u32 = 4096;
pub const PHP_OUTPUT_HANDLER_DISABLED: u32 = 8192;
pub const PHP_OUTPUT_HANDLER_PROCESSED: u32 = 16384;
pub const PHP_OUTPUT_POP_TRY: u32 = 0;
pub const PHP_OUTPUT_POP_FORCE: u32 = 1;
pub const PHP_OUTPUT_POP_DISCARD: u32 = 16;
pub const PHP_OUTPUT_POP_SILENT: u32 = 256;
pub const PHP_OUTPUT_IMPLICITFLUSH: u32 = 1;
pub const PHP_OUTPUT_DISABLED: u32 = 2;
pub const PHP_OUTPUT_WRITTEN: u32 = 4;
pub const PHP_OUTPUT_SENT: u32 = 8;
pub const PHP_OUTPUT_ACTIVE: u32 = 16;
pub const PHP_OUTPUT_LOCKED: u32 = 32;
pub const PHP_OUTPUT_ACTIVATED: u32 = 1048576;
pub const PHP_OUTPUT_HANDLER_ALIGNTO_SIZE: u32 = 4096;
pub const PHP_OUTPUT_HANDLER_DEFAULT_SIZE: u32 = 16384;
pub const PHP_STREAM_NOTIFIER_PROGRESS: u32 = 1;
pub const PHP_STREAM_NOTIFY_RESOLVE: u32 = 1;
pub const PHP_STREAM_NOTIFY_CONNECT: u32 = 2;
pub const PHP_STREAM_NOTIFY_AUTH_REQUIRED: u32 = 3;
pub const PHP_STREAM_NOTIFY_MIME_TYPE_IS: u32 = 4;
pub const PHP_STREAM_NOTIFY_FILE_SIZE_IS: u32 = 5;
pub const PHP_STREAM_NOTIFY_REDIRECTED: u32 = 6;
pub const PHP_STREAM_NOTIFY_PROGRESS: u32 = 7;
pub const PHP_STREAM_NOTIFY_COMPLETED: u32 = 8;
pub const PHP_STREAM_NOTIFY_FAILURE: u32 = 9;
pub const PHP_STREAM_NOTIFY_AUTH_RESULT: u32 = 10;
pub const PHP_STREAM_NOTIFY_SEVERITY_INFO: u32 = 0;
pub const PHP_STREAM_NOTIFY_SEVERITY_WARN: u32 = 1;
pub const PHP_STREAM_NOTIFY_SEVERITY_ERR: u32 = 2;
pub const PHP_STREAM_FILTER_READ: u32 = 1;
pub const PHP_STREAM_FILTER_WRITE: u32 = 2;
pub const PHP_STREAM_FILTER_ALL: u32 = 3;
pub const PSFS_FLAG_NORMAL: u32 = 0;
pub const PSFS_FLAG_FLUSH_INC: u32 = 1;
pub const PSFS_FLAG_FLUSH_CLOSE: u32 = 2;
pub const PHP_STREAM_FLAG_NO_SEEK: u32 = 1;
pub const PHP_STREAM_FLAG_NO_BUFFER: u32 = 2;
pub const PHP_STREAM_FLAG_EOL_UNIX: u32 = 0;
pub const PHP_STREAM_FLAG_DETECT_EOL: u32 = 4;
pub const PHP_STREAM_FLAG_EOL_MAC: u32 = 8;
pub const PHP_STREAM_FLAG_AVOID_BLOCKING: u32 = 16;
pub const PHP_STREAM_FLAG_NO_CLOSE: u32 = 32;
pub const PHP_STREAM_FLAG_IS_DIR: u32 = 64;
pub const PHP_STREAM_FLAG_NO_FCLOSE: u32 = 128;
pub const PHP_STREAM_FLAG_SUPPRESS_ERRORS: u32 = 256;
pub const PHP_STREAM_FLAG_NO_RSCR_DTOR_CLOSE: u32 = 512;
pub const PHP_STREAM_FLAG_NO_IO: u32 = 1024;
pub const PHP_STREAM_FLAG_WAS_WRITTEN: u32 = 2147483648;
pub const PHP_STREAM_FCLOSE_NONE: u32 = 0;
pub const PHP_STREAM_FCLOSE_FDOPEN: u32 = 1;
pub const PHP_STREAM_FCLOSE_FOPENCOOKIE: u32 = 2;
pub const PHP_STREAM_PERSISTENT_SUCCESS: u32 = 0;
pub const PHP_STREAM_PERSISTENT_FAILURE: u32 = 1;
pub const PHP_STREAM_PERSISTENT_NOT_EXIST: u32 = 2;
pub const PHP_STREAM_FREE_CALL_DTOR: u32 = 1;
pub const PHP_STREAM_FREE_RELEASE_STREAM: u32 = 2;
pub const PHP_STREAM_FREE_PRESERVE_HANDLE: u32 = 4;
pub const PHP_STREAM_FREE_RSRC_DTOR: u32 = 8;
pub const PHP_STREAM_FREE_PERSISTENT: u32 = 16;
pub const PHP_STREAM_FREE_IGNORE_ENCLOSING: u32 = 32;
pub const PHP_STREAM_FREE_KEEP_RSRC: u32 = 64;
pub const PHP_STREAM_FREE_CLOSE: u32 = 3;
pub const PHP_STREAM_FREE_CLOSE_CASTED: u32 = 7;
pub const PHP_STREAM_FREE_CLOSE_PERSISTENT: u32 = 19;
pub const PHP_STREAM_MKDIR_RECURSIVE: u32 = 1;
pub const PHP_STREAM_URL_STAT_LINK: u32 = 1;
pub const PHP_STREAM_URL_STAT_QUIET: u32 = 2;
pub const PHP_STREAM_URL_STAT_IGNORE_OPEN_BASEDIR: u32 = 4;
pub const PHP_STREAM_OPTION_BLOCKING: u32 = 1;
pub const PHP_STREAM_OPTION_READ_BUFFER: u32 = 2;
pub const PHP_STREAM_OPTION_WRITE_BUFFER: u32 = 3;
pub const PHP_STREAM_BUFFER_NONE: u32 = 0;
pub const PHP_STREAM_BUFFER_LINE: u32 = 1;
pub const PHP_STREAM_BUFFER_FULL: u32 = 2;
pub const PHP_STREAM_OPTION_READ_TIMEOUT: u32 = 4;
pub const PHP_STREAM_OPTION_SET_CHUNK_SIZE: u32 = 5;
pub const PHP_STREAM_OPTION_LOCKING: u32 = 6;
pub const PHP_STREAM_LOCK_SUPPORTED: u32 = 1;
pub const PHP_STREAM_OPTION_XPORT_API: u32 = 7;
pub const PHP_STREAM_OPTION_CRYPTO_API: u32 = 8;
pub const PHP_STREAM_OPTION_MMAP_API: u32 = 9;
pub const PHP_STREAM_OPTION_TRUNCATE_API: u32 = 10;
pub const PHP_STREAM_TRUNCATE_SUPPORTED: u32 = 0;
pub const PHP_STREAM_TRUNCATE_SET_SIZE: u32 = 1;
pub const PHP_STREAM_OPTION_META_DATA_API: u32 = 11;
pub const PHP_STREAM_OPTION_CHECK_LIVENESS: u32 = 12;
pub const PHP_STREAM_OPTION_PIPE_BLOCKING: u32 = 13;
pub const PHP_STREAM_OPTION_SYNC_API: u32 = 14;
pub const PHP_STREAM_SYNC_SUPPORTED: u32 = 0;
pub const PHP_STREAM_SYNC_FSYNC: u32 = 1;
pub const PHP_STREAM_SYNC_FDSYNC: u32 = 2;
pub const PHP_STREAM_OPTION_RETURN_OK: u32 = 0;
pub const PHP_STREAM_OPTION_RETURN_ERR: i32 = -1;
pub const PHP_STREAM_OPTION_RETURN_NOTIMPL: i32 = -2;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MCTP: u32 = 45;
pub const PF_MAX: u32 = 46;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MCTP: u32 = 45;
pub const AF_MAX: u32 = 46;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOL_MPTCP: u32 = 284;
pub const SOL_MCTP: u32 = 285;
pub const SOMAXCONN: u32 = 4096;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_PREFER_BUSY_POLL: u32 = 69;
pub const SO_BUSY_POLL_BUDGET: u32 = 70;
pub const SO_NETNS_COOKIE: u32 = 71;
pub const SO_BUF_LOCK: u32 = 72;
pub const SO_RESERVE_MEM: u32 = 73;
pub const SO_TXREHASH: u32 = 74;
pub const SO_RCVMARK: u32 = 75;
pub const SO_TIMESTAMP: u32 = 29;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const __osockaddr_defined: u32 = 1;
pub const STREAM_XPORT_CLIENT: u32 = 0;
pub const STREAM_XPORT_SERVER: u32 = 1;
pub const STREAM_XPORT_CONNECT: u32 = 2;
pub const STREAM_XPORT_BIND: u32 = 4;
pub const STREAM_XPORT_LISTEN: u32 = 8;
pub const STREAM_XPORT_CONNECT_ASYNC: u32 = 16;
pub const PHP_STREAM_MMAP_ALL: u32 = 0;
pub const PHP_STREAM_MMAP_MAX: u32 = 536870912;
pub const PHP_STREAM_AS_STDIO: u32 = 0;
pub const PHP_STREAM_AS_FD: u32 = 1;
pub const PHP_STREAM_AS_SOCKETD: u32 = 2;
pub const PHP_STREAM_AS_FD_FOR_SELECT: u32 = 3;
pub const PHP_STREAM_CAST_TRY_HARD: u32 = 2147483648;
pub const PHP_STREAM_CAST_RELEASE: u32 = 1073741824;
pub const PHP_STREAM_CAST_INTERNAL: u32 = 536870912;
pub const PHP_STREAM_CAST_MASK: u32 = 3758096384;
pub const IGNORE_PATH: u32 = 0;
pub const USE_PATH: u32 = 1;
pub const IGNORE_URL: u32 = 2;
pub const REPORT_ERRORS: u32 = 8;
pub const STREAM_MUST_SEEK: u32 = 16;
pub const STREAM_WILL_CAST: u32 = 32;
pub const STREAM_LOCATE_WRAPPERS_ONLY: u32 = 64;
pub const STREAM_OPEN_FOR_INCLUDE: u32 = 128;
pub const STREAM_USE_URL: u32 = 256;
pub const STREAM_ONLY_GET_HEADERS: u32 = 512;
pub const STREAM_DISABLE_OPEN_BASEDIR: u32 = 1024;
pub const STREAM_OPEN_PERSISTENT: u32 = 2048;
pub const STREAM_USE_GLOB_DIR_OPEN: u32 = 4096;
pub const STREAM_DISABLE_URL_PROTECTION: u32 = 8192;
pub const STREAM_ASSUME_REALPATH: u32 = 16384;
pub const STREAM_USE_BLOCKING_PIPE: u32 = 32768;
pub const STREAM_OPEN_FOR_ZEND_STREAM: u32 = 65536;
pub const PHP_STREAM_UNCHANGED: u32 = 0;
pub const PHP_STREAM_RELEASED: u32 = 1;
pub const PHP_STREAM_FAILED: u32 = 2;
pub const PHP_STREAM_CRITICAL: u32 = 3;
pub const PHP_STREAM_NO_PREFERENCE: u32 = 0;
pub const PHP_STREAM_PREFER_STDIO: u32 = 1;
pub const PHP_STREAM_FORCE_CONVERSION: u32 = 2;
pub const PHP_STREAM_IS_URL: u32 = 1;
pub const PHP_STREAM_META_TOUCH: u32 = 1;
pub const PHP_STREAM_META_OWNER_NAME: u32 = 2;
pub const PHP_STREAM_META_OWNER: u32 = 3;
pub const PHP_STREAM_META_GROUP_NAME: u32 = 4;
pub const PHP_STREAM_META_GROUP: u32 = 5;
pub const PHP_STREAM_META_ACCESS: u32 = 6;
pub const PHP_STREAM_MAX_MEM: u32 = 2097152;
pub const TEMP_STREAM_DEFAULT: u32 = 0;
pub const TEMP_STREAM_READONLY: u32 = 1;
pub const TEMP_STREAM_TAKE_BUFFER: u32 = 2;
pub const TEMP_STREAM_APPEND: u32 = 4;
pub const PHP_DISPLAY_ERRORS_STDOUT: u32 = 1;
pub const PHP_DISPLAY_ERRORS_STDERR: u32 = 2;
pub const TRACK_VARS_POST: u32 = 0;
pub const TRACK_VARS_GET: u32 = 1;
pub const TRACK_VARS_COOKIE: u32 = 2;
pub const TRACK_VARS_SERVER: u32 = 3;
pub const TRACK_VARS_ENV: u32 = 4;
pub const TRACK_VARS_FILES: u32 = 5;
pub const TRACK_VARS_REQUEST: u32 = 6;
pub const ZEND_INI_USER: u32 = 1;
pub const ZEND_INI_PERDIR: u32 = 2;
pub const ZEND_INI_SYSTEM: u32 = 4;
pub const ZEND_INI_ALL: u32 = 7;
pub const ZEND_INI_DISPLAY_ORIG: u32 = 1;
pub const ZEND_INI_DISPLAY_ACTIVE: u32 = 2;
pub const ZEND_INI_STAGE_STARTUP: u32 = 1;
pub const ZEND_INI_STAGE_SHUTDOWN: u32 = 2;
pub const ZEND_INI_STAGE_ACTIVATE: u32 = 4;
pub const ZEND_INI_STAGE_DEACTIVATE: u32 = 8;
pub const ZEND_INI_STAGE_RUNTIME: u32 = 16;
pub const ZEND_INI_STAGE_HTACCESS: u32 = 32;
pub const ZEND_INI_STAGE_IN_REQUEST: u32 = 60;
pub const ZEND_INI_PARSER_ENTRY: u32 = 1;
pub const ZEND_INI_PARSER_SECTION: u32 = 2;
pub const ZEND_INI_PARSER_POP_ENTRY: u32 = 3;
pub const PHP_INI_USER: u32 = 1;
pub const PHP_INI_PERDIR: u32 = 2;
pub const PHP_INI_SYSTEM: u32 = 4;
pub const PHP_INI_ALL: u32 = 7;
pub const PHP_INI_DISPLAY_ORIG: u32 = 1;
pub const PHP_INI_DISPLAY_ACTIVE: u32 = 2;
pub const PHP_INI_STAGE_STARTUP: u32 = 1;
pub const PHP_INI_STAGE_SHUTDOWN: u32 = 2;
pub const PHP_INI_STAGE_ACTIVATE: u32 = 4;
pub const PHP_INI_STAGE_DEACTIVATE: u32 = 8;
pub const PHP_INI_STAGE_RUNTIME: u32 = 16;
pub const PHP_INI_STAGE_HTACCESS: u32 = 32;
pub const _UTIME_H: u32 = 1;
pub const _DIRENT_H: u32 = 1;
pub const _DIRENT_MATCHES_DIRENT64: u32 = 1;
pub const MAXNAMLEN: u32 = 255;
pub const DEFAULT_SLASH: u8 = 47u8;
pub const DEFAULT_DIR_SEPARATOR: u8 = 58u8;
pub const CWD_EXPAND: u32 = 0;
pub const CWD_FILEPATH: u32 = 1;
pub const CWD_REALPATH: u32 = 2;
pub const REALPATH_CACHE_TTL: u32 = 120;
pub const REALPATH_CACHE_SIZE: u32 = 0;
pub const _S_IFDIR: u32 = 16384;
pub const _S_IFREG: u32 = 32768;
pub const S_IXROOT: u32 = 73;
pub const CONST_CS: u32 = 0;
pub const CONST_PERSISTENT: u32 = 1;
pub const CONST_NO_FILE_CACHE: u32 = 2;
pub const CONST_DEPRECATED: u32 = 4;
pub const CONST_OWNED: u32 = 8;
pub const PHP_USER_CONSTANT: u32 = 8388607;
pub const PHP_CONNECTION_NORMAL: u32 = 0;
pub const PHP_CONNECTION_ABORTED: u32 = 1;
pub const PHP_CONNECTION_TIMEOUT: u32 = 2;
pub const HAVE_LOCALTIME: u32 = 1;
pub const HAVE_GMTIME: u32 = 1;
pub const HAVE_ASCTIME: u32 = 1;
pub const HAVE_CTIME: u32 = 1;
pub const SAPI_OPTION_NO_CHDIR: u32 = 1;
pub const SAPI_POST_BLOCK_SIZE: u32 = 16384;
pub const SAPI_HEADER_ADD: u32 = 1;
pub const SAPI_HEADER_SENT_SUCCESSFULLY: u32 = 1;
pub const SAPI_HEADER_DO_SEND: u32 = 2;
pub const SAPI_HEADER_SEND_FAILED: u32 = 3;
pub const SAPI_DEFAULT_MIMETYPE: &[u8; 10] = b"text/html\0";
pub const SAPI_DEFAULT_CHARSET: &[u8; 6] = b"UTF-8\0";
pub const SAPI_PHP_VERSION_HEADER: &[u8; 24] = b"X-Powered-By: PHP/8.3.2\0";
pub const PHP_ZTS: u32 = 0;
pub const PHP_OS_STR: &[u8; 6] = b"Linux\0";
pub const PARSE_POST: u32 = 0;
pub const PARSE_GET: u32 = 1;
pub const PARSE_COOKIE: u32 = 2;
pub const PARSE_STRING: u32 = 3;
pub const PARSE_ENV: u32 = 4;
pub const PARSE_SERVER: u32 = 5;
pub const PARSE_SESSION: u32 = 6;
pub const NUM_TRACK_VARS: u32 = 6;
pub type wchar_t = ::std::os::raw::c_uint;
pub type _Float128 = u128;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    const UNINIT: ::std::mem::MaybeUninit<div_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(div_t), "::", stringify!(quot)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(div_t), "::", stringify!(rem)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<ldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ldiv_t), "::", stringify!(quot)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ldiv_t), "::", stringify!(rem)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(lldiv_t), "::", stringify!(quot)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(lldiv_t), "::", stringify!(rem)),
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtof32(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32;
}
extern "C" {
    pub fn strtof64(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64;
}
extern "C" {
    pub fn strtof128(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float128;
}
extern "C" {
    pub fn strtof32x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64x;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strfromd(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfroml(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: u128,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf128(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float128,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64x,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    const UNINIT: ::std::mem::MaybeUninit<__locale_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct)),
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__locales) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_b) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_tolower) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_toupper) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__names) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names),
        ),
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strtol_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoll_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtod_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtold_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> u128;
}
extern "C" {
    pub fn strtof32_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32;
}
extern "C" {
    pub fn strtof64_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64;
}
extern "C" {
    pub fn strtof128_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float128;
}
extern "C" {
    pub fn strtof32x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64x;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__fsid_t), "::", stringify!(__val)),
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_int;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type ino64_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type useconds_t = __useconds_t;
pub type suseconds_t = __suseconds_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__sigset_t), "::", stringify!(__val)),
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval)),
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(timeval), "::", stringify!(tv_sec)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(timeval), "::", stringify!(tv_usec)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec)),
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(timespec), "::", stringify!(tv_sec)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(timespec), "::", stringify!(tv_nsec)),
    );
}
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set)),
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(fd_set), "::", stringify!(fds_bits)),
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type blkcnt64_t = __blkcnt64_t;
pub type fsblkcnt64_t = __fsblkcnt64_t;
pub type fsfilcnt64_t = __fsfilcnt64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list)),
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next),
        ),
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist)),
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next),
        ),
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_int,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s)),
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __pad1: ::std::os::raw::c_ulong,
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_rwlock_arch_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high),
        ),
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high),
        ),
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2)),
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32),
        ),
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s)),
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals),
        ),
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    const UNINIT: ::std::mem::MaybeUninit<__once_flag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag)),
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__once_flag), "::", stringify!(__data)),
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_condattr_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align),
        ),
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 64usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(pthread_attr_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_mutex_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align),
        ),
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align),
        ),
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(
        __statebuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    const UNINIT: ::std::mem::MaybeUninit<random_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data)),
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fptr) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(random_data), "::", stringify!(fptr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rptr) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(random_data), "::", stringify!(rptr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(random_data), "::", stringify!(state)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_deg) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(random_data), "::", stringify!(rand_deg)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_sep) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(random_data), "::", stringify!(rand_sep)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_ptr) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(random_data), "::", stringify!(end_ptr)),
    );
}
extern "C" {
    pub fn random_r(
        __buf: *mut random_data,
        __result: *mut i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(
        __seed16v: *mut ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    const UNINIT: ::std::mem::MaybeUninit<drand48_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data)),
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__x) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(drand48_data), "::", stringify!(__x)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__old_x) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(drand48_data), "::", stringify!(__old_x)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__c) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(drand48_data), "::", stringify!(__c)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__init) as usize - ptr as usize },
        14usize,
        concat!("Offset of field: ", stringify!(drand48_data), "::", stringify!(__init)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__a) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(drand48_data), "::", stringify!(__a)),
    );
}
extern "C" {
    pub fn drand48_r(
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn atexit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn secure_getenv(
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(
        __template: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp64(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(
        __template: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkostemp(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp64(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalize_file_name(
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type comparison_fn_t = __compar_fn_t;
pub type __compar_d_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_d_fn_t,
        __arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(
        __numer: ::std::os::raw::c_long,
        __denom: ::std::os::raw::c_long,
    ) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(
        __s: *mut ::std::os::raw::c_char,
        __wchar: wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> usize;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: usize,
    ) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_openpt(__oflag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpt() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(
        __loadavg: *mut f64,
        __nelem: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rawmemchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memrchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchrnul(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcasestr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memmem(
        __haystack: *const ::std::os::raw::c_void,
        __haystacklen: usize,
        __needle: *const ::std::os::raw::c_void,
        __needlelen: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerrordesc_np(
        __err: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerrorname_np(
        __err: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sigabbrev_np(__sig: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sigdescr_np(__sig: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strverscmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfry(__string: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memfrob(
        __s: *mut ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn basename(
        __filename: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type tsrm_intptr_t = isize;
pub type tsrm_uintptr_t = usize;
pub type va_list = [u64; 4usize];
pub type __gnuc_va_list = [u64; 4usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb),
        ),
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__mbstate_t), "::", stringify!(__count)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(__mbstate_t), "::", stringify!(__value)),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_G_fpos_t), "::", stringify!(__pos)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_G_fpos_t), "::", stringify!(__state)),
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos64_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_G_fpos64_t), "::", stringify!(__pos)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_G_fpos64_t), "::", stringify!(__state)),
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE)),
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_flags)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_IO_buf_end)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_markers)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_chain)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_fileno)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_flags2)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_old_offset)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_cur_column)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_shortbuf)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_lock)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_offset)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_codecvt)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_wide_data)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(__pad5)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_mode)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!("Offset of field: ", stringify!(_IO_FILE), "::", stringify!(_unused2)),
    );
}
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[test]
fn bindgen_test_layout__IO_cookie_io_functions_t() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_cookie_io_functions_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_cookie_io_functions_t>(),
        32usize,
        concat!("Size of: ", stringify!(_IO_cookie_io_functions_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_cookie_io_functions_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(read),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(write),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(seek),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(close),
        ),
    );
}
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type fpos_t = __fpos_t;
pub type fpos64_t = __fpos64_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat2(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpfile64() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(
        __fd: ::std::os::raw::c_int,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __size: usize,
    );
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: [u64; 4usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: [u64; 4usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: [u64; 4usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: [u64; 4usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: [u64; 4usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: [u64; 4usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: [u64; 4usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: [u64; 4usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: [u64; 4usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: [u64; 4usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(
        __w: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgets_unlocked(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(
        __s: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fputs_unlocked(
        __s: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseeko64(
        __stream: *mut FILE,
        __off: __off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello64(__stream: *mut FILE) -> __off64_t;
}
extern "C" {
    pub fn fgetpos64(__stream: *mut FILE, __pos: *mut fpos64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos64(
        __stream: *mut FILE,
        __pos: *const fpos64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cuserid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obstack {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obstack_printf(
        __obstack: *mut obstack,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn obstack_vprintf(
        __obstack: *mut obstack,
        __format: *const ::std::os::raw::c_char,
        __args: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __assert_fail(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
extern "C" {
    pub fn __assert_perror_fail(
        __errnum: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
extern "C" {
    pub fn __assert(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
    ) -> !;
}
pub type float_t = f32;
pub type double_t = f64;
pub const FP_INT_UPWARD: _bindgen_ty_1 = 0;
pub const FP_INT_DOWNWARD: _bindgen_ty_1 = 1;
pub const FP_INT_TOWARDZERO: _bindgen_ty_1 = 2;
pub const FP_INT_TONEARESTFROMZERO: _bindgen_ty_1 = 3;
pub const FP_INT_TONEAREST: _bindgen_ty_1 = 4;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsig(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn sincos(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
}
extern "C" {
    pub fn __sincos(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn exp10(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp10(__x: f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn nextdown(__x: f64) -> f64;
}
extern "C" {
    pub fn __nextdown(__x: f64) -> f64;
}
extern "C" {
    pub fn nextup(__x: f64) -> f64;
}
extern "C" {
    pub fn __nextup(__x: f64) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogb(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogb(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn roundeven(__x: f64) -> f64;
}
extern "C" {
    pub fn __roundeven(__x: f64) -> f64;
}
extern "C" {
    pub fn fromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn canonicalize(__cx: *mut f64, __x: *const f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaxmag(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmaxmag(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fminmag(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fminmag(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn totalorder(__x: *const f64, __y: *const f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermag(__x: *const f64, __y: *const f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayload(__x: *const f64) -> f64;
}
extern "C" {
    pub fn __getpayload(__x: *const f64) -> f64;
}
extern "C" {
    pub fn setpayload(__x: *mut f64, __payload: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsig(__x: *mut f64, __payload: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn sincosf(__x: f32, __sinx: *mut f32, __cosx: *mut f32);
}
extern "C" {
    pub fn __sincosf(__x: f32, __sinx: *mut f32, __cosx: *mut f32);
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn exp10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp10f(__x: f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn nextdownf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nextdownf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextupf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nextupf(__x: f32) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn roundevenf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundevenf(__x: f32) -> f32;
}
extern "C" {
    pub fn fromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn canonicalizef(__cx: *mut f32, __x: *const f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaxmagf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxmagf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminmagf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminmagf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn totalorderf(__x: *const f32, __y: *const f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagf(__x: *const f32, __y: *const f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadf(__x: *const f32) -> f32;
}
extern "C" {
    pub fn __getpayloadf(__x: *const f32) -> f32;
}
extern "C" {
    pub fn setpayloadf(__x: *mut f32, __payload: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigf(__x: *mut f32, __payload: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigl(__x: u128, __y: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn sincosl(__x: u128, __sinx: *mut u128, __cosx: *mut u128);
}
extern "C" {
    pub fn __sincosl(__x: u128, __sinx: *mut u128, __cosx: *mut u128);
}
extern "C" {
    pub fn acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn expl(__x: u128) -> u128;
}
extern "C" {
    pub fn __expl(__x: u128) -> u128;
}
extern "C" {
    pub fn frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn logl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logl(__x: u128) -> u128;
}
extern "C" {
    pub fn log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn exp10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp10l(__x: u128) -> u128;
}
extern "C" {
    pub fn expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn __log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn __ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn __fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn __floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn __significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nextdownl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nextdownl(__x: u128) -> u128;
}
extern "C" {
    pub fn nextupl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nextupl(__x: u128) -> u128;
}
extern "C" {
    pub fn remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn __scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn __roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn __truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn roundevenl(__x: u128) -> u128;
}
extern "C" {
    pub fn __roundevenl(__x: u128) -> u128;
}
extern "C" {
    pub fn fromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn canonicalizel(__cx: *mut u128, __x: *const u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaxmagl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaxmagl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminmagl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminmagl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn totalorderl(__x: *const u128, __y: *const u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagl(__x: *const u128, __y: *const u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadl(__x: *const u128) -> u128;
}
extern "C" {
    pub fn __getpayloadl(__x: *const u128) -> u128;
}
extern "C" {
    pub fn setpayloadl(__x: *mut u128, __payload: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigl(__x: *mut u128, __payload: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub fn __scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub fn acosf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __acosf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn asinf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __asinf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn atanf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __atanf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn atan2f32(__y: _Float32, __x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __atan2f32(__y: _Float32, __x: _Float32) -> _Float32;
}
extern "C" {
    pub fn cosf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __cosf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn sinf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __sinf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn tanf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __tanf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn coshf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __coshf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn sinhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __sinhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn tanhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __tanhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn sincosf32(__x: _Float32, __sinx: *mut _Float32, __cosx: *mut _Float32);
}
extern "C" {
    pub fn __sincosf32(__x: _Float32, __sinx: *mut _Float32, __cosx: *mut _Float32);
}
extern "C" {
    pub fn acoshf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __acoshf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn asinhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __asinhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn atanhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __atanhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn expf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __expf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn frexpf32(__x: _Float32, __exponent: *mut ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn __frexpf32(__x: _Float32, __exponent: *mut ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn ldexpf32(__x: _Float32, __exponent: ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn __ldexpf32(__x: _Float32, __exponent: ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn logf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __logf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn log10f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __log10f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn modff32(__x: _Float32, __iptr: *mut _Float32) -> _Float32;
}
extern "C" {
    pub fn __modff32(__x: _Float32, __iptr: *mut _Float32) -> _Float32;
}
extern "C" {
    pub fn exp10f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __exp10f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn expm1f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __expm1f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn log1pf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __log1pf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn logbf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __logbf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn exp2f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __exp2f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn log2f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __log2f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn powf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __powf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn sqrtf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __sqrtf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn hypotf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __hypotf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn cbrtf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __cbrtf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn ceilf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __ceilf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn fabsf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fabsf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn floorf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __floorf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn fmodf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fmodf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn copysignf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __copysignf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn nanf32(__tagb: *const ::std::os::raw::c_char) -> _Float32;
}
extern "C" {
    pub fn __nanf32(__tagb: *const ::std::os::raw::c_char) -> _Float32;
}
extern "C" {
    pub fn j0f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __j0f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn j1f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __j1f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn jnf32(arg1: ::std::os::raw::c_int, arg2: _Float32) -> _Float32;
}
extern "C" {
    pub fn __jnf32(arg1: ::std::os::raw::c_int, arg2: _Float32) -> _Float32;
}
extern "C" {
    pub fn y0f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __y0f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn y1f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __y1f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn ynf32(arg1: ::std::os::raw::c_int, arg2: _Float32) -> _Float32;
}
extern "C" {
    pub fn __ynf32(arg1: ::std::os::raw::c_int, arg2: _Float32) -> _Float32;
}
extern "C" {
    pub fn erff32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __erff32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn erfcf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __erfcf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn lgammaf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __lgammaf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn tgammaf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __tgammaf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn lgammaf32_r(
        arg1: _Float32,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> _Float32;
}
extern "C" {
    pub fn __lgammaf32_r(
        arg1: _Float32,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> _Float32;
}
extern "C" {
    pub fn rintf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __rintf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn nextafterf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __nextafterf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn nextdownf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __nextdownf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn nextupf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __nextupf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn remainderf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __remainderf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn scalbnf32(__x: _Float32, __n: ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn __scalbnf32(__x: _Float32, __n: ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn ilogbf32(__x: _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf32(__x: _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnf32(__x: _Float32, __n: ::std::os::raw::c_long) -> _Float32;
}
extern "C" {
    pub fn __scalblnf32(__x: _Float32, __n: ::std::os::raw::c_long) -> _Float32;
}
extern "C" {
    pub fn nearbyintf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __nearbyintf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn roundf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __roundf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn truncf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __truncf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn remquof32(
        __x: _Float32,
        __y: _Float32,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float32;
}
extern "C" {
    pub fn __remquof32(
        __x: _Float32,
        __y: _Float32,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float32;
}
extern "C" {
    pub fn lrintf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf32(__x: _Float32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf32(__x: _Float32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf32(__x: _Float32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf32(__x: _Float32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fdimf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fmaxf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fmaxf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fminf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fminf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fmaf32(__x: _Float32, __y: _Float32, __z: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fmaf32(__x: _Float32, __y: _Float32, __z: _Float32) -> _Float32;
}
extern "C" {
    pub fn roundevenf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __roundevenf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn fromfpf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn canonicalizef32(
        __cx: *mut _Float32,
        __x: *const _Float32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaxmagf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fmaxmagf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fminmagf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fminmagf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn totalorderf32(
        __x: *const _Float32,
        __y: *const _Float32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagf32(
        __x: *const _Float32,
        __y: *const _Float32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadf32(__x: *const _Float32) -> _Float32;
}
extern "C" {
    pub fn __getpayloadf32(__x: *const _Float32) -> _Float32;
}
extern "C" {
    pub fn setpayloadf32(
        __x: *mut _Float32,
        __payload: _Float32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigf32(
        __x: *mut _Float32,
        __payload: _Float32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __acosf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn asinf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __asinf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn atanf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __atanf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn atan2f64(__y: _Float64, __x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __atan2f64(__y: _Float64, __x: _Float64) -> _Float64;
}
extern "C" {
    pub fn cosf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __cosf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn sinf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __sinf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn tanf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __tanf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn coshf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __coshf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn sinhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __sinhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn tanhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __tanhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn sincosf64(__x: _Float64, __sinx: *mut _Float64, __cosx: *mut _Float64);
}
extern "C" {
    pub fn __sincosf64(__x: _Float64, __sinx: *mut _Float64, __cosx: *mut _Float64);
}
extern "C" {
    pub fn acoshf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __acoshf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn asinhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __asinhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn atanhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __atanhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn expf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __expf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn frexpf64(__x: _Float64, __exponent: *mut ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn __frexpf64(__x: _Float64, __exponent: *mut ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn ldexpf64(__x: _Float64, __exponent: ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn __ldexpf64(__x: _Float64, __exponent: ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn logf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __logf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn log10f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __log10f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn modff64(__x: _Float64, __iptr: *mut _Float64) -> _Float64;
}
extern "C" {
    pub fn __modff64(__x: _Float64, __iptr: *mut _Float64) -> _Float64;
}
extern "C" {
    pub fn exp10f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __exp10f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn expm1f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __expm1f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn log1pf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __log1pf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn logbf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __logbf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn exp2f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __exp2f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn log2f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __log2f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn powf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __powf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn sqrtf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __sqrtf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn hypotf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __hypotf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn cbrtf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __cbrtf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn ceilf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __ceilf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn fabsf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fabsf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn floorf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __floorf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn fmodf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fmodf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn copysignf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __copysignf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn nanf64(__tagb: *const ::std::os::raw::c_char) -> _Float64;
}
extern "C" {
    pub fn __nanf64(__tagb: *const ::std::os::raw::c_char) -> _Float64;
}
extern "C" {
    pub fn j0f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __j0f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn j1f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __j1f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn jnf64(arg1: ::std::os::raw::c_int, arg2: _Float64) -> _Float64;
}
extern "C" {
    pub fn __jnf64(arg1: ::std::os::raw::c_int, arg2: _Float64) -> _Float64;
}
extern "C" {
    pub fn y0f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __y0f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn y1f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __y1f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn ynf64(arg1: ::std::os::raw::c_int, arg2: _Float64) -> _Float64;
}
extern "C" {
    pub fn __ynf64(arg1: ::std::os::raw::c_int, arg2: _Float64) -> _Float64;
}
extern "C" {
    pub fn erff64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __erff64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn erfcf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __erfcf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn lgammaf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __lgammaf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn tgammaf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __tgammaf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn lgammaf64_r(
        arg1: _Float64,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> _Float64;
}
extern "C" {
    pub fn __lgammaf64_r(
        arg1: _Float64,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> _Float64;
}
extern "C" {
    pub fn rintf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __rintf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn nextafterf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __nextafterf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn nextdownf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __nextdownf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn nextupf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __nextupf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn remainderf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __remainderf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn scalbnf64(__x: _Float64, __n: ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn __scalbnf64(__x: _Float64, __n: ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn ilogbf64(__x: _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf64(__x: _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnf64(__x: _Float64, __n: ::std::os::raw::c_long) -> _Float64;
}
extern "C" {
    pub fn __scalblnf64(__x: _Float64, __n: ::std::os::raw::c_long) -> _Float64;
}
extern "C" {
    pub fn nearbyintf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __nearbyintf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn roundf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __roundf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn truncf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __truncf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn remquof64(
        __x: _Float64,
        __y: _Float64,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float64;
}
extern "C" {
    pub fn __remquof64(
        __x: _Float64,
        __y: _Float64,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float64;
}
extern "C" {
    pub fn lrintf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf64(__x: _Float64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf64(__x: _Float64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf64(__x: _Float64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf64(__x: _Float64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fdimf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fmaxf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fmaxf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fminf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fminf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fmaf64(__x: _Float64, __y: _Float64, __z: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fmaf64(__x: _Float64, __y: _Float64, __z: _Float64) -> _Float64;
}
extern "C" {
    pub fn roundevenf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __roundevenf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn fromfpf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn canonicalizef64(
        __cx: *mut _Float64,
        __x: *const _Float64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaxmagf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fmaxmagf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fminmagf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fminmagf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn totalorderf64(
        __x: *const _Float64,
        __y: *const _Float64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagf64(
        __x: *const _Float64,
        __y: *const _Float64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadf64(__x: *const _Float64) -> _Float64;
}
extern "C" {
    pub fn __getpayloadf64(__x: *const _Float64) -> _Float64;
}
extern "C" {
    pub fn setpayloadf64(
        __x: *mut _Float64,
        __payload: _Float64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigf64(
        __x: *mut _Float64,
        __payload: _Float64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __acosf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn asinf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __asinf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn atanf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __atanf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn atan2f128(__y: _Float128, __x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __atan2f128(__y: _Float128, __x: _Float128) -> _Float128;
}
extern "C" {
    pub fn cosf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __cosf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn sinf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __sinf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn tanf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __tanf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn coshf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __coshf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn sinhf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __sinhf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn tanhf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __tanhf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn sincosf128(__x: _Float128, __sinx: *mut _Float128, __cosx: *mut _Float128);
}
extern "C" {
    pub fn __sincosf128(__x: _Float128, __sinx: *mut _Float128, __cosx: *mut _Float128);
}
extern "C" {
    pub fn acoshf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __acoshf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn asinhf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __asinhf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn atanhf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __atanhf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn expf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __expf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn frexpf128(
        __x: _Float128,
        __exponent: *mut ::std::os::raw::c_int,
    ) -> _Float128;
}
extern "C" {
    pub fn __frexpf128(
        __x: _Float128,
        __exponent: *mut ::std::os::raw::c_int,
    ) -> _Float128;
}
extern "C" {
    pub fn ldexpf128(__x: _Float128, __exponent: ::std::os::raw::c_int) -> _Float128;
}
extern "C" {
    pub fn __ldexpf128(__x: _Float128, __exponent: ::std::os::raw::c_int) -> _Float128;
}
extern "C" {
    pub fn logf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __logf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn log10f128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __log10f128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn modff128(__x: _Float128, __iptr: *mut _Float128) -> _Float128;
}
extern "C" {
    pub fn __modff128(__x: _Float128, __iptr: *mut _Float128) -> _Float128;
}
extern "C" {
    pub fn exp10f128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __exp10f128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn expm1f128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __expm1f128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn log1pf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __log1pf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn logbf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __logbf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn exp2f128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __exp2f128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn log2f128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __log2f128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn powf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn __powf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn sqrtf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __sqrtf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn hypotf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn __hypotf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn cbrtf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __cbrtf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn ceilf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __ceilf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn fabsf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __fabsf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn floorf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __floorf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn fmodf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn __fmodf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn copysignf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn __copysignf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn nanf128(__tagb: *const ::std::os::raw::c_char) -> _Float128;
}
extern "C" {
    pub fn __nanf128(__tagb: *const ::std::os::raw::c_char) -> _Float128;
}
extern "C" {
    pub fn j0f128(arg1: _Float128) -> _Float128;
}
extern "C" {
    pub fn __j0f128(arg1: _Float128) -> _Float128;
}
extern "C" {
    pub fn j1f128(arg1: _Float128) -> _Float128;
}
extern "C" {
    pub fn __j1f128(arg1: _Float128) -> _Float128;
}
extern "C" {
    pub fn jnf128(arg1: ::std::os::raw::c_int, arg2: _Float128) -> _Float128;
}
extern "C" {
    pub fn __jnf128(arg1: ::std::os::raw::c_int, arg2: _Float128) -> _Float128;
}
extern "C" {
    pub fn y0f128(arg1: _Float128) -> _Float128;
}
extern "C" {
    pub fn __y0f128(arg1: _Float128) -> _Float128;
}
extern "C" {
    pub fn y1f128(arg1: _Float128) -> _Float128;
}
extern "C" {
    pub fn __y1f128(arg1: _Float128) -> _Float128;
}
extern "C" {
    pub fn ynf128(arg1: ::std::os::raw::c_int, arg2: _Float128) -> _Float128;
}
extern "C" {
    pub fn __ynf128(arg1: ::std::os::raw::c_int, arg2: _Float128) -> _Float128;
}
extern "C" {
    pub fn erff128(arg1: _Float128) -> _Float128;
}
extern "C" {
    pub fn __erff128(arg1: _Float128) -> _Float128;
}
extern "C" {
    pub fn erfcf128(arg1: _Float128) -> _Float128;
}
extern "C" {
    pub fn __erfcf128(arg1: _Float128) -> _Float128;
}
extern "C" {
    pub fn lgammaf128(arg1: _Float128) -> _Float128;
}
extern "C" {
    pub fn __lgammaf128(arg1: _Float128) -> _Float128;
}
extern "C" {
    pub fn tgammaf128(arg1: _Float128) -> _Float128;
}
extern "C" {
    pub fn __tgammaf128(arg1: _Float128) -> _Float128;
}
extern "C" {
    pub fn lgammaf128_r(
        arg1: _Float128,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> _Float128;
}
extern "C" {
    pub fn __lgammaf128_r(
        arg1: _Float128,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> _Float128;
}
extern "C" {
    pub fn rintf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __rintf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn nextafterf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn __nextafterf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn nextdownf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __nextdownf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn nextupf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __nextupf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn remainderf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn __remainderf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn scalbnf128(__x: _Float128, __n: ::std::os::raw::c_int) -> _Float128;
}
extern "C" {
    pub fn __scalbnf128(__x: _Float128, __n: ::std::os::raw::c_int) -> _Float128;
}
extern "C" {
    pub fn ilogbf128(__x: _Float128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf128(__x: _Float128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbf128(__x: _Float128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbf128(__x: _Float128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnf128(__x: _Float128, __n: ::std::os::raw::c_long) -> _Float128;
}
extern "C" {
    pub fn __scalblnf128(__x: _Float128, __n: ::std::os::raw::c_long) -> _Float128;
}
extern "C" {
    pub fn nearbyintf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __nearbyintf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn roundf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __roundf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn truncf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __truncf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn remquof128(
        __x: _Float128,
        __y: _Float128,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float128;
}
extern "C" {
    pub fn __remquof128(
        __x: _Float128,
        __y: _Float128,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float128;
}
extern "C" {
    pub fn lrintf128(__x: _Float128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf128(__x: _Float128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf128(__x: _Float128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf128(__x: _Float128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf128(__x: _Float128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf128(__x: _Float128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf128(__x: _Float128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf128(__x: _Float128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn __fdimf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn fmaxf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn __fmaxf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn fminf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn __fminf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn fmaf128(__x: _Float128, __y: _Float128, __z: _Float128) -> _Float128;
}
extern "C" {
    pub fn __fmaf128(__x: _Float128, __y: _Float128, __z: _Float128) -> _Float128;
}
extern "C" {
    pub fn roundevenf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn __roundevenf128(__x: _Float128) -> _Float128;
}
extern "C" {
    pub fn fromfpf128(
        __x: _Float128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpf128(
        __x: _Float128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpf128(
        __x: _Float128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpf128(
        __x: _Float128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxf128(
        __x: _Float128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxf128(
        __x: _Float128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxf128(
        __x: _Float128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxf128(
        __x: _Float128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn canonicalizef128(
        __cx: *mut _Float128,
        __x: *const _Float128,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaxmagf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn __fmaxmagf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn fminmagf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn __fminmagf128(__x: _Float128, __y: _Float128) -> _Float128;
}
extern "C" {
    pub fn totalorderf128(
        __x: *const _Float128,
        __y: *const _Float128,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagf128(
        __x: *const _Float128,
        __y: *const _Float128,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadf128(__x: *const _Float128) -> _Float128;
}
extern "C" {
    pub fn __getpayloadf128(__x: *const _Float128) -> _Float128;
}
extern "C" {
    pub fn setpayloadf128(
        __x: *mut _Float128,
        __payload: _Float128,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigf128(
        __x: *mut _Float128,
        __payload: _Float128,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __acosf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn asinf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __asinf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn atanf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __atanf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn atan2f32x(__y: _Float32x, __x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __atan2f32x(__y: _Float32x, __x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn cosf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __cosf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn sinf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __sinf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn tanf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __tanf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn coshf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __coshf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn sinhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __sinhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn tanhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __tanhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn sincosf32x(__x: _Float32x, __sinx: *mut _Float32x, __cosx: *mut _Float32x);
}
extern "C" {
    pub fn __sincosf32x(__x: _Float32x, __sinx: *mut _Float32x, __cosx: *mut _Float32x);
}
extern "C" {
    pub fn acoshf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __acoshf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn asinhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __asinhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn atanhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __atanhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn expf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __expf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn frexpf32x(
        __x: _Float32x,
        __exponent: *mut ::std::os::raw::c_int,
    ) -> _Float32x;
}
extern "C" {
    pub fn __frexpf32x(
        __x: _Float32x,
        __exponent: *mut ::std::os::raw::c_int,
    ) -> _Float32x;
}
extern "C" {
    pub fn ldexpf32x(__x: _Float32x, __exponent: ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn __ldexpf32x(__x: _Float32x, __exponent: ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn logf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __logf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn log10f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __log10f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn modff32x(__x: _Float32x, __iptr: *mut _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __modff32x(__x: _Float32x, __iptr: *mut _Float32x) -> _Float32x;
}
extern "C" {
    pub fn exp10f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __exp10f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn expm1f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __expm1f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn log1pf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __log1pf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn logbf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __logbf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn exp2f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __exp2f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn log2f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __log2f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn powf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __powf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn sqrtf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __sqrtf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn hypotf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __hypotf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn cbrtf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __cbrtf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn ceilf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __ceilf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fabsf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fabsf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn floorf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __floorf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fmodf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fmodf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn copysignf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __copysignf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn nanf32x(__tagb: *const ::std::os::raw::c_char) -> _Float32x;
}
extern "C" {
    pub fn __nanf32x(__tagb: *const ::std::os::raw::c_char) -> _Float32x;
}
extern "C" {
    pub fn j0f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __j0f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn j1f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __j1f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn jnf32x(arg1: ::std::os::raw::c_int, arg2: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __jnf32x(arg1: ::std::os::raw::c_int, arg2: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn y0f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __y0f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn y1f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __y1f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn ynf32x(arg1: ::std::os::raw::c_int, arg2: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __ynf32x(arg1: ::std::os::raw::c_int, arg2: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn erff32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __erff32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn erfcf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __erfcf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn lgammaf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __lgammaf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn tgammaf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __tgammaf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn lgammaf32x_r(
        arg1: _Float32x,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> _Float32x;
}
extern "C" {
    pub fn __lgammaf32x_r(
        arg1: _Float32x,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> _Float32x;
}
extern "C" {
    pub fn rintf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __rintf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn nextafterf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __nextafterf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn nextdownf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __nextdownf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn nextupf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __nextupf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn remainderf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __remainderf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn scalbnf32x(__x: _Float32x, __n: ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn __scalbnf32x(__x: _Float32x, __n: ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn ilogbf32x(__x: _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf32x(__x: _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnf32x(__x: _Float32x, __n: ::std::os::raw::c_long) -> _Float32x;
}
extern "C" {
    pub fn __scalblnf32x(__x: _Float32x, __n: ::std::os::raw::c_long) -> _Float32x;
}
extern "C" {
    pub fn nearbyintf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __nearbyintf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn roundf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __roundf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn truncf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __truncf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn remquof32x(
        __x: _Float32x,
        __y: _Float32x,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float32x;
}
extern "C" {
    pub fn __remquof32x(
        __x: _Float32x,
        __y: _Float32x,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float32x;
}
extern "C" {
    pub fn lrintf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf32x(__x: _Float32x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf32x(__x: _Float32x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf32x(__x: _Float32x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf32x(__x: _Float32x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fdimf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fmaxf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fmaxf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fminf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fminf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fmaf32x(__x: _Float32x, __y: _Float32x, __z: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fmaf32x(__x: _Float32x, __y: _Float32x, __z: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn roundevenf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __roundevenf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fromfpf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn canonicalizef32x(
        __cx: *mut _Float32x,
        __x: *const _Float32x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaxmagf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fmaxmagf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fminmagf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fminmagf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn totalorderf32x(
        __x: *const _Float32x,
        __y: *const _Float32x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagf32x(
        __x: *const _Float32x,
        __y: *const _Float32x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadf32x(__x: *const _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __getpayloadf32x(__x: *const _Float32x) -> _Float32x;
}
extern "C" {
    pub fn setpayloadf32x(
        __x: *mut _Float32x,
        __payload: _Float32x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigf32x(
        __x: *mut _Float32x,
        __payload: _Float32x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __acosf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn asinf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __asinf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn atanf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __atanf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn atan2f64x(__y: _Float64x, __x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __atan2f64x(__y: _Float64x, __x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn cosf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __cosf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn sinf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __sinf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn tanf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __tanf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn coshf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __coshf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn sinhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __sinhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn tanhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __tanhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn sincosf64x(__x: _Float64x, __sinx: *mut _Float64x, __cosx: *mut _Float64x);
}
extern "C" {
    pub fn __sincosf64x(__x: _Float64x, __sinx: *mut _Float64x, __cosx: *mut _Float64x);
}
extern "C" {
    pub fn acoshf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __acoshf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn asinhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __asinhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn atanhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __atanhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn expf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __expf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn frexpf64x(
        __x: _Float64x,
        __exponent: *mut ::std::os::raw::c_int,
    ) -> _Float64x;
}
extern "C" {
    pub fn __frexpf64x(
        __x: _Float64x,
        __exponent: *mut ::std::os::raw::c_int,
    ) -> _Float64x;
}
extern "C" {
    pub fn ldexpf64x(__x: _Float64x, __exponent: ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn __ldexpf64x(__x: _Float64x, __exponent: ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn logf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __logf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn log10f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __log10f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn modff64x(__x: _Float64x, __iptr: *mut _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __modff64x(__x: _Float64x, __iptr: *mut _Float64x) -> _Float64x;
}
extern "C" {
    pub fn exp10f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __exp10f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn expm1f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __expm1f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn log1pf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __log1pf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn logbf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __logbf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn exp2f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __exp2f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn log2f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __log2f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn powf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __powf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn sqrtf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __sqrtf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn hypotf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __hypotf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn cbrtf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __cbrtf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn ceilf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __ceilf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fabsf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fabsf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn floorf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __floorf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fmodf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fmodf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn copysignf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __copysignf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn nanf64x(__tagb: *const ::std::os::raw::c_char) -> _Float64x;
}
extern "C" {
    pub fn __nanf64x(__tagb: *const ::std::os::raw::c_char) -> _Float64x;
}
extern "C" {
    pub fn j0f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __j0f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn j1f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __j1f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn jnf64x(arg1: ::std::os::raw::c_int, arg2: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __jnf64x(arg1: ::std::os::raw::c_int, arg2: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn y0f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __y0f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn y1f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __y1f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn ynf64x(arg1: ::std::os::raw::c_int, arg2: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __ynf64x(arg1: ::std::os::raw::c_int, arg2: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn erff64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __erff64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn erfcf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __erfcf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn lgammaf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __lgammaf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn tgammaf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __tgammaf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn lgammaf64x_r(
        arg1: _Float64x,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> _Float64x;
}
extern "C" {
    pub fn __lgammaf64x_r(
        arg1: _Float64x,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> _Float64x;
}
extern "C" {
    pub fn rintf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __rintf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn nextafterf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __nextafterf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn nextdownf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __nextdownf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn nextupf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __nextupf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn remainderf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __remainderf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn scalbnf64x(__x: _Float64x, __n: ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn __scalbnf64x(__x: _Float64x, __n: ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn ilogbf64x(__x: _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf64x(__x: _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnf64x(__x: _Float64x, __n: ::std::os::raw::c_long) -> _Float64x;
}
extern "C" {
    pub fn __scalblnf64x(__x: _Float64x, __n: ::std::os::raw::c_long) -> _Float64x;
}
extern "C" {
    pub fn nearbyintf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __nearbyintf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn roundf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __roundf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn truncf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __truncf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn remquof64x(
        __x: _Float64x,
        __y: _Float64x,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float64x;
}
extern "C" {
    pub fn __remquof64x(
        __x: _Float64x,
        __y: _Float64x,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float64x;
}
extern "C" {
    pub fn lrintf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf64x(__x: _Float64x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf64x(__x: _Float64x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf64x(__x: _Float64x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf64x(__x: _Float64x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fdimf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fmaxf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fmaxf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fminf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fminf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fmaf64x(__x: _Float64x, __y: _Float64x, __z: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fmaf64x(__x: _Float64x, __y: _Float64x, __z: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn roundevenf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __roundevenf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fromfpf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn canonicalizef64x(
        __cx: *mut _Float64x,
        __x: *const _Float64x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaxmagf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fmaxmagf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fminmagf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fminmagf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn totalorderf64x(
        __x: *const _Float64x,
        __y: *const _Float64x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagf64x(
        __x: *const _Float64x,
        __y: *const _Float64x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadf64x(__x: *const _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __getpayloadf64x(__x: *const _Float64x) -> _Float64x;
}
extern "C" {
    pub fn setpayloadf64x(
        __x: *mut _Float64x,
        __payload: _Float64x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigf64x(
        __x: *mut _Float64x,
        __payload: _Float64x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fadd(__x: f64, __y: f64) -> f32;
}
extern "C" {
    pub fn fdiv(__x: f64, __y: f64) -> f32;
}
extern "C" {
    pub fn fmul(__x: f64, __y: f64) -> f32;
}
extern "C" {
    pub fn fsub(__x: f64, __y: f64) -> f32;
}
extern "C" {
    pub fn faddl(__x: u128, __y: u128) -> f32;
}
extern "C" {
    pub fn fdivl(__x: u128, __y: u128) -> f32;
}
extern "C" {
    pub fn fmull(__x: u128, __y: u128) -> f32;
}
extern "C" {
    pub fn fsubl(__x: u128, __y: u128) -> f32;
}
extern "C" {
    pub fn daddl(__x: u128, __y: u128) -> f64;
}
extern "C" {
    pub fn ddivl(__x: u128, __y: u128) -> f64;
}
extern "C" {
    pub fn dmull(__x: u128, __y: u128) -> f64;
}
extern "C" {
    pub fn dsubl(__x: u128, __y: u128) -> f64;
}
extern "C" {
    pub fn f32addf32x(__x: _Float32x, __y: _Float32x) -> _Float32;
}
extern "C" {
    pub fn f32divf32x(__x: _Float32x, __y: _Float32x) -> _Float32;
}
extern "C" {
    pub fn f32mulf32x(__x: _Float32x, __y: _Float32x) -> _Float32;
}
extern "C" {
    pub fn f32subf32x(__x: _Float32x, __y: _Float32x) -> _Float32;
}
extern "C" {
    pub fn f32addf64(__x: _Float64, __y: _Float64) -> _Float32;
}
extern "C" {
    pub fn f32divf64(__x: _Float64, __y: _Float64) -> _Float32;
}
extern "C" {
    pub fn f32mulf64(__x: _Float64, __y: _Float64) -> _Float32;
}
extern "C" {
    pub fn f32subf64(__x: _Float64, __y: _Float64) -> _Float32;
}
extern "C" {
    pub fn f32addf64x(__x: _Float64x, __y: _Float64x) -> _Float32;
}
extern "C" {
    pub fn f32divf64x(__x: _Float64x, __y: _Float64x) -> _Float32;
}
extern "C" {
    pub fn f32mulf64x(__x: _Float64x, __y: _Float64x) -> _Float32;
}
extern "C" {
    pub fn f32subf64x(__x: _Float64x, __y: _Float64x) -> _Float32;
}
extern "C" {
    pub fn f32addf128(__x: _Float128, __y: _Float128) -> _Float32;
}
extern "C" {
    pub fn f32divf128(__x: _Float128, __y: _Float128) -> _Float32;
}
extern "C" {
    pub fn f32mulf128(__x: _Float128, __y: _Float128) -> _Float32;
}
extern "C" {
    pub fn f32subf128(__x: _Float128, __y: _Float128) -> _Float32;
}
extern "C" {
    pub fn f32xaddf64(__x: _Float64, __y: _Float64) -> _Float32x;
}
extern "C" {
    pub fn f32xdivf64(__x: _Float64, __y: _Float64) -> _Float32x;
}
extern "C" {
    pub fn f32xmulf64(__x: _Float64, __y: _Float64) -> _Float32x;
}
extern "C" {
    pub fn f32xsubf64(__x: _Float64, __y: _Float64) -> _Float32x;
}
extern "C" {
    pub fn f32xaddf64x(__x: _Float64x, __y: _Float64x) -> _Float32x;
}
extern "C" {
    pub fn f32xdivf64x(__x: _Float64x, __y: _Float64x) -> _Float32x;
}
extern "C" {
    pub fn f32xmulf64x(__x: _Float64x, __y: _Float64x) -> _Float32x;
}
extern "C" {
    pub fn f32xsubf64x(__x: _Float64x, __y: _Float64x) -> _Float32x;
}
extern "C" {
    pub fn f32xaddf128(__x: _Float128, __y: _Float128) -> _Float32x;
}
extern "C" {
    pub fn f32xdivf128(__x: _Float128, __y: _Float128) -> _Float32x;
}
extern "C" {
    pub fn f32xmulf128(__x: _Float128, __y: _Float128) -> _Float32x;
}
extern "C" {
    pub fn f32xsubf128(__x: _Float128, __y: _Float128) -> _Float32x;
}
extern "C" {
    pub fn f64addf64x(__x: _Float64x, __y: _Float64x) -> _Float64;
}
extern "C" {
    pub fn f64divf64x(__x: _Float64x, __y: _Float64x) -> _Float64;
}
extern "C" {
    pub fn f64mulf64x(__x: _Float64x, __y: _Float64x) -> _Float64;
}
extern "C" {
    pub fn f64subf64x(__x: _Float64x, __y: _Float64x) -> _Float64;
}
extern "C" {
    pub fn f64addf128(__x: _Float128, __y: _Float128) -> _Float64;
}
extern "C" {
    pub fn f64divf128(__x: _Float128, __y: _Float128) -> _Float64;
}
extern "C" {
    pub fn f64mulf128(__x: _Float128, __y: _Float128) -> _Float64;
}
extern "C" {
    pub fn f64subf128(__x: _Float128, __y: _Float128) -> _Float64;
}
extern "C" {
    pub fn f64xaddf128(__x: _Float128, __y: _Float128) -> _Float64x;
}
extern "C" {
    pub fn f64xdivf128(__x: _Float128, __y: _Float128) -> _Float64x;
}
extern "C" {
    pub fn f64xmulf128(__x: _Float128, __y: _Float128) -> _Float64x;
}
extern "C" {
    pub fn f64xsubf128(__x: _Float128, __y: _Float128) -> _Float64x;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: _bindgen_ty_2 = 0;
pub const FP_INFINITE: _bindgen_ty_2 = 1;
pub const FP_ZERO: _bindgen_ty_2 = 2;
pub const FP_SUBNORMAL: _bindgen_ty_2 = 3;
pub const FP_NORMAL: _bindgen_ty_2 = 4;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t)),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2),
        ),
    );
}
extern "C" {
    pub fn _dl_mcount_wrapper_check(__selfpc: *mut ::std::os::raw::c_void);
}
pub type Lmid_t = ::std::os::raw::c_long;
extern "C" {
    pub fn dlopen(
        __file: *const ::std::os::raw::c_char,
        __mode: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dlclose(__handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlsym(
        __handle: *mut ::std::os::raw::c_void,
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dlmopen(
        __nsid: Lmid_t,
        __file: *const ::std::os::raw::c_char,
        __mode: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dlvsym(
        __handle: *mut ::std::os::raw::c_void,
        __name: *const ::std::os::raw::c_char,
        __version: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dlerror() -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dl_info {
    pub dli_fname: *const ::std::os::raw::c_char,
    pub dli_fbase: *mut ::std::os::raw::c_void,
    pub dli_sname: *const ::std::os::raw::c_char,
    pub dli_saddr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_Dl_info() {
    const UNINIT: ::std::mem::MaybeUninit<Dl_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Dl_info>(),
        32usize,
        concat!("Size of: ", stringify!(Dl_info)),
    );
    assert_eq!(
        ::std::mem::align_of::<Dl_info>(),
        8usize,
        concat!("Alignment of ", stringify!(Dl_info)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dli_fname) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Dl_info), "::", stringify!(dli_fname)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dli_fbase) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(Dl_info), "::", stringify!(dli_fbase)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dli_sname) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(Dl_info), "::", stringify!(dli_sname)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dli_saddr) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(Dl_info), "::", stringify!(dli_saddr)),
    );
}
extern "C" {
    pub fn dladdr(
        __address: *const ::std::os::raw::c_void,
        __info: *mut Dl_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dladdr1(
        __address: *const ::std::os::raw::c_void,
        __info: *mut Dl_info,
        __extra_info: *mut *mut ::std::os::raw::c_void,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const RTLD_DL_SYMENT: _bindgen_ty_3 = 1;
pub const RTLD_DL_LINKMAP: _bindgen_ty_3 = 2;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
    pub fn dlinfo(
        __handle: *mut ::std::os::raw::c_void,
        __request: ::std::os::raw::c_int,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const RTLD_DI_LMID: _bindgen_ty_4 = 1;
pub const RTLD_DI_LINKMAP: _bindgen_ty_4 = 2;
pub const RTLD_DI_CONFIGADDR: _bindgen_ty_4 = 3;
pub const RTLD_DI_SERINFO: _bindgen_ty_4 = 4;
pub const RTLD_DI_SERINFOSIZE: _bindgen_ty_4 = 5;
pub const RTLD_DI_ORIGIN: _bindgen_ty_4 = 6;
pub const RTLD_DI_PROFILENAME: _bindgen_ty_4 = 7;
pub const RTLD_DI_PROFILEOUT: _bindgen_ty_4 = 8;
pub const RTLD_DI_TLS_MODID: _bindgen_ty_4 = 9;
pub const RTLD_DI_TLS_DATA: _bindgen_ty_4 = 10;
pub const RTLD_DI_PHDR: _bindgen_ty_4 = 11;
pub const RTLD_DI_MAX: _bindgen_ty_4 = 11;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dl_serpath {
    pub dls_name: *mut ::std::os::raw::c_char,
    pub dls_flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_Dl_serpath() {
    const UNINIT: ::std::mem::MaybeUninit<Dl_serpath> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Dl_serpath>(),
        16usize,
        concat!("Size of: ", stringify!(Dl_serpath)),
    );
    assert_eq!(
        ::std::mem::align_of::<Dl_serpath>(),
        8usize,
        concat!("Alignment of ", stringify!(Dl_serpath)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dls_name) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Dl_serpath), "::", stringify!(dls_name)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dls_flags) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(Dl_serpath), "::", stringify!(dls_flags)),
    );
}
#[repr(C)]
pub struct Dl_serinfo {
    pub dls_size: usize,
    pub dls_cnt: ::std::os::raw::c_uint,
    pub __bindgen_anon_1: Dl_serinfo__bindgen_ty_1,
}
#[repr(C)]
pub struct Dl_serinfo__bindgen_ty_1 {
    pub dls_serpath: __BindgenUnionField<[Dl_serpath; 0usize]>,
    pub __dls_serpath_pad: __BindgenUnionField<[Dl_serpath; 1usize]>,
    pub bindgen_union_field: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_Dl_serinfo__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Dl_serinfo__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Dl_serinfo__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(Dl_serinfo__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<Dl_serinfo__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Dl_serinfo__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dls_serpath) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Dl_serinfo__bindgen_ty_1),
            "::",
            stringify!(dls_serpath),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__dls_serpath_pad) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Dl_serinfo__bindgen_ty_1),
            "::",
            stringify!(__dls_serpath_pad),
        ),
    );
}
#[test]
fn bindgen_test_layout_Dl_serinfo() {
    const UNINIT: ::std::mem::MaybeUninit<Dl_serinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Dl_serinfo>(),
        32usize,
        concat!("Size of: ", stringify!(Dl_serinfo)),
    );
    assert_eq!(
        ::std::mem::align_of::<Dl_serinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Dl_serinfo)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dls_size) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Dl_serinfo), "::", stringify!(dls_size)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dls_cnt) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(Dl_serinfo), "::", stringify!(dls_cnt)),
    );
}
extern "C" {
    pub fn __sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
pub type __gwchar_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<imaxdiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(imaxdiv_t), "::", stringify!(quot)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(imaxdiv_t), "::", stringify!(rem)),
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type zend_long = i64;
pub type zend_ulong = u64;
pub type zend_off_t = i64;
extern "C" {
    pub static long_min_digits: [::std::os::raw::c_char; 20usize];
}
pub type float32_t = f32;
pub type float16_t = __BindgenFloat16;
pub type float64_t = f64;
pub type poly8_t = u8;
pub type poly16_t = u16;
pub type poly64_t = u64;
pub type poly128_t = __uint128_t;
pub type int8x8_t = [i8; 8usize];
pub type int8x16_t = [i8; 16usize];
pub type int16x4_t = [i16; 4usize];
pub type int16x8_t = [i16; 8usize];
pub type int32x2_t = [i32; 2usize];
pub type int32x4_t = [i32; 4usize];
pub type int64x1_t = [i64; 1usize];
pub type int64x2_t = [i64; 2usize];
pub type uint8x8_t = [u8; 8usize];
pub type uint8x16_t = [u8; 16usize];
pub type uint16x4_t = [u16; 4usize];
pub type uint16x8_t = [u16; 8usize];
pub type uint32x2_t = [u32; 2usize];
pub type uint32x4_t = [u32; 4usize];
pub type uint64x1_t = [u64; 1usize];
pub type uint64x2_t = [u64; 2usize];
pub type float16x4_t = [float16_t; 4usize];
pub type float16x8_t = [float16_t; 8usize];
pub type float32x2_t = [float32_t; 2usize];
pub type float32x4_t = [float32_t; 4usize];
pub type float64x1_t = [float64_t; 1usize];
pub type float64x2_t = [float64_t; 2usize];
pub type poly8x8_t = [poly8_t; 8usize];
pub type poly8x16_t = [poly8_t; 16usize];
pub type poly16x4_t = [poly16_t; 4usize];
pub type poly16x8_t = [poly16_t; 8usize];
pub type poly64x1_t = [poly64_t; 1usize];
pub type poly64x2_t = [poly64_t; 2usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct int8x8x2_t {
    pub val: [int8x8_t; 2usize],
}
#[test]
fn bindgen_test_layout_int8x8x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<int8x8x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int8x8x2_t>(),
        16usize,
        concat!("Size of: ", stringify!(int8x8x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int8x8x2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(int8x8x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int8x8x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct int8x16x2_t {
    pub val: [int8x16_t; 2usize],
}
#[test]
fn bindgen_test_layout_int8x16x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<int8x16x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int8x16x2_t>(),
        32usize,
        concat!("Size of: ", stringify!(int8x16x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int8x16x2_t>(),
        16usize,
        concat!("Alignment of ", stringify!(int8x16x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int8x16x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct int16x4x2_t {
    pub val: [int16x4_t; 2usize],
}
#[test]
fn bindgen_test_layout_int16x4x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<int16x4x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int16x4x2_t>(),
        16usize,
        concat!("Size of: ", stringify!(int16x4x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int16x4x2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(int16x4x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int16x4x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct int16x8x2_t {
    pub val: [int16x8_t; 2usize],
}
#[test]
fn bindgen_test_layout_int16x8x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<int16x8x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int16x8x2_t>(),
        32usize,
        concat!("Size of: ", stringify!(int16x8x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int16x8x2_t>(),
        16usize,
        concat!("Alignment of ", stringify!(int16x8x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int16x8x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct int32x2x2_t {
    pub val: [int32x2_t; 2usize],
}
#[test]
fn bindgen_test_layout_int32x2x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<int32x2x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int32x2x2_t>(),
        16usize,
        concat!("Size of: ", stringify!(int32x2x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int32x2x2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(int32x2x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int32x2x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct int32x4x2_t {
    pub val: [int32x4_t; 2usize],
}
#[test]
fn bindgen_test_layout_int32x4x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<int32x4x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int32x4x2_t>(),
        32usize,
        concat!("Size of: ", stringify!(int32x4x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int32x4x2_t>(),
        16usize,
        concat!("Alignment of ", stringify!(int32x4x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int32x4x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct int64x1x2_t {
    pub val: [int64x1_t; 2usize],
}
#[test]
fn bindgen_test_layout_int64x1x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<int64x1x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int64x1x2_t>(),
        16usize,
        concat!("Size of: ", stringify!(int64x1x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int64x1x2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(int64x1x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int64x1x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct int64x2x2_t {
    pub val: [int64x2_t; 2usize],
}
#[test]
fn bindgen_test_layout_int64x2x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<int64x2x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int64x2x2_t>(),
        32usize,
        concat!("Size of: ", stringify!(int64x2x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int64x2x2_t>(),
        16usize,
        concat!("Alignment of ", stringify!(int64x2x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int64x2x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uint8x8x2_t {
    pub val: [uint8x8_t; 2usize],
}
#[test]
fn bindgen_test_layout_uint8x8x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint8x8x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint8x8x2_t>(),
        16usize,
        concat!("Size of: ", stringify!(uint8x8x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint8x8x2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(uint8x8x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint8x8x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct uint8x16x2_t {
    pub val: [uint8x16_t; 2usize],
}
#[test]
fn bindgen_test_layout_uint8x16x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint8x16x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint8x16x2_t>(),
        32usize,
        concat!("Size of: ", stringify!(uint8x16x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint8x16x2_t>(),
        16usize,
        concat!("Alignment of ", stringify!(uint8x16x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint8x16x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uint16x4x2_t {
    pub val: [uint16x4_t; 2usize],
}
#[test]
fn bindgen_test_layout_uint16x4x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint16x4x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint16x4x2_t>(),
        16usize,
        concat!("Size of: ", stringify!(uint16x4x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint16x4x2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(uint16x4x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint16x4x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct uint16x8x2_t {
    pub val: [uint16x8_t; 2usize],
}
#[test]
fn bindgen_test_layout_uint16x8x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint16x8x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint16x8x2_t>(),
        32usize,
        concat!("Size of: ", stringify!(uint16x8x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint16x8x2_t>(),
        16usize,
        concat!("Alignment of ", stringify!(uint16x8x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint16x8x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uint32x2x2_t {
    pub val: [uint32x2_t; 2usize],
}
#[test]
fn bindgen_test_layout_uint32x2x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint32x2x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint32x2x2_t>(),
        16usize,
        concat!("Size of: ", stringify!(uint32x2x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint32x2x2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(uint32x2x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint32x2x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct uint32x4x2_t {
    pub val: [uint32x4_t; 2usize],
}
#[test]
fn bindgen_test_layout_uint32x4x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint32x4x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint32x4x2_t>(),
        32usize,
        concat!("Size of: ", stringify!(uint32x4x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint32x4x2_t>(),
        16usize,
        concat!("Alignment of ", stringify!(uint32x4x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint32x4x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uint64x1x2_t {
    pub val: [uint64x1_t; 2usize],
}
#[test]
fn bindgen_test_layout_uint64x1x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint64x1x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint64x1x2_t>(),
        16usize,
        concat!("Size of: ", stringify!(uint64x1x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint64x1x2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(uint64x1x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint64x1x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct uint64x2x2_t {
    pub val: [uint64x2_t; 2usize],
}
#[test]
fn bindgen_test_layout_uint64x2x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint64x2x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint64x2x2_t>(),
        32usize,
        concat!("Size of: ", stringify!(uint64x2x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint64x2x2_t>(),
        16usize,
        concat!("Alignment of ", stringify!(uint64x2x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint64x2x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct float16x4x2_t {
    pub val: [float16x4_t; 2usize],
}
#[test]
fn bindgen_test_layout_float16x4x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<float16x4x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<float16x4x2_t>(),
        16usize,
        concat!("Size of: ", stringify!(float16x4x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<float16x4x2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(float16x4x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(float16x4x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct float16x8x2_t {
    pub val: [float16x8_t; 2usize],
}
#[test]
fn bindgen_test_layout_float16x8x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<float16x8x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<float16x8x2_t>(),
        32usize,
        concat!("Size of: ", stringify!(float16x8x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<float16x8x2_t>(),
        16usize,
        concat!("Alignment of ", stringify!(float16x8x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(float16x8x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct float32x2x2_t {
    pub val: [float32x2_t; 2usize],
}
#[test]
fn bindgen_test_layout_float32x2x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<float32x2x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<float32x2x2_t>(),
        16usize,
        concat!("Size of: ", stringify!(float32x2x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<float32x2x2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(float32x2x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(float32x2x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct float32x4x2_t {
    pub val: [float32x4_t; 2usize],
}
#[test]
fn bindgen_test_layout_float32x4x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<float32x4x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<float32x4x2_t>(),
        32usize,
        concat!("Size of: ", stringify!(float32x4x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<float32x4x2_t>(),
        16usize,
        concat!("Alignment of ", stringify!(float32x4x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(float32x4x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct float64x1x2_t {
    pub val: [float64x1_t; 2usize],
}
#[test]
fn bindgen_test_layout_float64x1x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<float64x1x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<float64x1x2_t>(),
        16usize,
        concat!("Size of: ", stringify!(float64x1x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<float64x1x2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(float64x1x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(float64x1x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct float64x2x2_t {
    pub val: [float64x2_t; 2usize],
}
#[test]
fn bindgen_test_layout_float64x2x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<float64x2x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<float64x2x2_t>(),
        32usize,
        concat!("Size of: ", stringify!(float64x2x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<float64x2x2_t>(),
        16usize,
        concat!("Alignment of ", stringify!(float64x2x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(float64x2x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct poly8x8x2_t {
    pub val: [poly8x8_t; 2usize],
}
#[test]
fn bindgen_test_layout_poly8x8x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<poly8x8x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<poly8x8x2_t>(),
        16usize,
        concat!("Size of: ", stringify!(poly8x8x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<poly8x8x2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(poly8x8x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(poly8x8x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct poly8x16x2_t {
    pub val: [poly8x16_t; 2usize],
}
#[test]
fn bindgen_test_layout_poly8x16x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<poly8x16x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<poly8x16x2_t>(),
        32usize,
        concat!("Size of: ", stringify!(poly8x16x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<poly8x16x2_t>(),
        16usize,
        concat!("Alignment of ", stringify!(poly8x16x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(poly8x16x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct poly16x4x2_t {
    pub val: [poly16x4_t; 2usize],
}
#[test]
fn bindgen_test_layout_poly16x4x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<poly16x4x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<poly16x4x2_t>(),
        16usize,
        concat!("Size of: ", stringify!(poly16x4x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<poly16x4x2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(poly16x4x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(poly16x4x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct poly16x8x2_t {
    pub val: [poly16x8_t; 2usize],
}
#[test]
fn bindgen_test_layout_poly16x8x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<poly16x8x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<poly16x8x2_t>(),
        32usize,
        concat!("Size of: ", stringify!(poly16x8x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<poly16x8x2_t>(),
        16usize,
        concat!("Alignment of ", stringify!(poly16x8x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(poly16x8x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct poly64x1x2_t {
    pub val: [poly64x1_t; 2usize],
}
#[test]
fn bindgen_test_layout_poly64x1x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<poly64x1x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<poly64x1x2_t>(),
        16usize,
        concat!("Size of: ", stringify!(poly64x1x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<poly64x1x2_t>(),
        8usize,
        concat!("Alignment of ", stringify!(poly64x1x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(poly64x1x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct poly64x2x2_t {
    pub val: [poly64x2_t; 2usize],
}
#[test]
fn bindgen_test_layout_poly64x2x2_t() {
    const UNINIT: ::std::mem::MaybeUninit<poly64x2x2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<poly64x2x2_t>(),
        32usize,
        concat!("Size of: ", stringify!(poly64x2x2_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<poly64x2x2_t>(),
        16usize,
        concat!("Alignment of ", stringify!(poly64x2x2_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(poly64x2x2_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct int8x8x3_t {
    pub val: [int8x8_t; 3usize],
}
#[test]
fn bindgen_test_layout_int8x8x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<int8x8x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int8x8x3_t>(),
        24usize,
        concat!("Size of: ", stringify!(int8x8x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int8x8x3_t>(),
        8usize,
        concat!("Alignment of ", stringify!(int8x8x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int8x8x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct int8x16x3_t {
    pub val: [int8x16_t; 3usize],
}
#[test]
fn bindgen_test_layout_int8x16x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<int8x16x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int8x16x3_t>(),
        48usize,
        concat!("Size of: ", stringify!(int8x16x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int8x16x3_t>(),
        16usize,
        concat!("Alignment of ", stringify!(int8x16x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int8x16x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct int16x4x3_t {
    pub val: [int16x4_t; 3usize],
}
#[test]
fn bindgen_test_layout_int16x4x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<int16x4x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int16x4x3_t>(),
        24usize,
        concat!("Size of: ", stringify!(int16x4x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int16x4x3_t>(),
        8usize,
        concat!("Alignment of ", stringify!(int16x4x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int16x4x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct int16x8x3_t {
    pub val: [int16x8_t; 3usize],
}
#[test]
fn bindgen_test_layout_int16x8x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<int16x8x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int16x8x3_t>(),
        48usize,
        concat!("Size of: ", stringify!(int16x8x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int16x8x3_t>(),
        16usize,
        concat!("Alignment of ", stringify!(int16x8x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int16x8x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct int32x2x3_t {
    pub val: [int32x2_t; 3usize],
}
#[test]
fn bindgen_test_layout_int32x2x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<int32x2x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int32x2x3_t>(),
        24usize,
        concat!("Size of: ", stringify!(int32x2x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int32x2x3_t>(),
        8usize,
        concat!("Alignment of ", stringify!(int32x2x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int32x2x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct int32x4x3_t {
    pub val: [int32x4_t; 3usize],
}
#[test]
fn bindgen_test_layout_int32x4x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<int32x4x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int32x4x3_t>(),
        48usize,
        concat!("Size of: ", stringify!(int32x4x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int32x4x3_t>(),
        16usize,
        concat!("Alignment of ", stringify!(int32x4x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int32x4x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct int64x1x3_t {
    pub val: [int64x1_t; 3usize],
}
#[test]
fn bindgen_test_layout_int64x1x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<int64x1x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int64x1x3_t>(),
        24usize,
        concat!("Size of: ", stringify!(int64x1x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int64x1x3_t>(),
        8usize,
        concat!("Alignment of ", stringify!(int64x1x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int64x1x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct int64x2x3_t {
    pub val: [int64x2_t; 3usize],
}
#[test]
fn bindgen_test_layout_int64x2x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<int64x2x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int64x2x3_t>(),
        48usize,
        concat!("Size of: ", stringify!(int64x2x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int64x2x3_t>(),
        16usize,
        concat!("Alignment of ", stringify!(int64x2x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int64x2x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uint8x8x3_t {
    pub val: [uint8x8_t; 3usize],
}
#[test]
fn bindgen_test_layout_uint8x8x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint8x8x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint8x8x3_t>(),
        24usize,
        concat!("Size of: ", stringify!(uint8x8x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint8x8x3_t>(),
        8usize,
        concat!("Alignment of ", stringify!(uint8x8x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint8x8x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct uint8x16x3_t {
    pub val: [uint8x16_t; 3usize],
}
#[test]
fn bindgen_test_layout_uint8x16x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint8x16x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint8x16x3_t>(),
        48usize,
        concat!("Size of: ", stringify!(uint8x16x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint8x16x3_t>(),
        16usize,
        concat!("Alignment of ", stringify!(uint8x16x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint8x16x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uint16x4x3_t {
    pub val: [uint16x4_t; 3usize],
}
#[test]
fn bindgen_test_layout_uint16x4x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint16x4x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint16x4x3_t>(),
        24usize,
        concat!("Size of: ", stringify!(uint16x4x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint16x4x3_t>(),
        8usize,
        concat!("Alignment of ", stringify!(uint16x4x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint16x4x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct uint16x8x3_t {
    pub val: [uint16x8_t; 3usize],
}
#[test]
fn bindgen_test_layout_uint16x8x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint16x8x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint16x8x3_t>(),
        48usize,
        concat!("Size of: ", stringify!(uint16x8x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint16x8x3_t>(),
        16usize,
        concat!("Alignment of ", stringify!(uint16x8x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint16x8x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uint32x2x3_t {
    pub val: [uint32x2_t; 3usize],
}
#[test]
fn bindgen_test_layout_uint32x2x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint32x2x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint32x2x3_t>(),
        24usize,
        concat!("Size of: ", stringify!(uint32x2x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint32x2x3_t>(),
        8usize,
        concat!("Alignment of ", stringify!(uint32x2x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint32x2x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct uint32x4x3_t {
    pub val: [uint32x4_t; 3usize],
}
#[test]
fn bindgen_test_layout_uint32x4x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint32x4x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint32x4x3_t>(),
        48usize,
        concat!("Size of: ", stringify!(uint32x4x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint32x4x3_t>(),
        16usize,
        concat!("Alignment of ", stringify!(uint32x4x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint32x4x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uint64x1x3_t {
    pub val: [uint64x1_t; 3usize],
}
#[test]
fn bindgen_test_layout_uint64x1x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint64x1x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint64x1x3_t>(),
        24usize,
        concat!("Size of: ", stringify!(uint64x1x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint64x1x3_t>(),
        8usize,
        concat!("Alignment of ", stringify!(uint64x1x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint64x1x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct uint64x2x3_t {
    pub val: [uint64x2_t; 3usize],
}
#[test]
fn bindgen_test_layout_uint64x2x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint64x2x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint64x2x3_t>(),
        48usize,
        concat!("Size of: ", stringify!(uint64x2x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint64x2x3_t>(),
        16usize,
        concat!("Alignment of ", stringify!(uint64x2x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint64x2x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct float16x4x3_t {
    pub val: [float16x4_t; 3usize],
}
#[test]
fn bindgen_test_layout_float16x4x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<float16x4x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<float16x4x3_t>(),
        24usize,
        concat!("Size of: ", stringify!(float16x4x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<float16x4x3_t>(),
        8usize,
        concat!("Alignment of ", stringify!(float16x4x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(float16x4x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct float16x8x3_t {
    pub val: [float16x8_t; 3usize],
}
#[test]
fn bindgen_test_layout_float16x8x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<float16x8x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<float16x8x3_t>(),
        48usize,
        concat!("Size of: ", stringify!(float16x8x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<float16x8x3_t>(),
        16usize,
        concat!("Alignment of ", stringify!(float16x8x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(float16x8x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct float32x2x3_t {
    pub val: [float32x2_t; 3usize],
}
#[test]
fn bindgen_test_layout_float32x2x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<float32x2x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<float32x2x3_t>(),
        24usize,
        concat!("Size of: ", stringify!(float32x2x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<float32x2x3_t>(),
        8usize,
        concat!("Alignment of ", stringify!(float32x2x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(float32x2x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct float32x4x3_t {
    pub val: [float32x4_t; 3usize],
}
#[test]
fn bindgen_test_layout_float32x4x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<float32x4x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<float32x4x3_t>(),
        48usize,
        concat!("Size of: ", stringify!(float32x4x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<float32x4x3_t>(),
        16usize,
        concat!("Alignment of ", stringify!(float32x4x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(float32x4x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct float64x1x3_t {
    pub val: [float64x1_t; 3usize],
}
#[test]
fn bindgen_test_layout_float64x1x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<float64x1x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<float64x1x3_t>(),
        24usize,
        concat!("Size of: ", stringify!(float64x1x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<float64x1x3_t>(),
        8usize,
        concat!("Alignment of ", stringify!(float64x1x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(float64x1x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct float64x2x3_t {
    pub val: [float64x2_t; 3usize],
}
#[test]
fn bindgen_test_layout_float64x2x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<float64x2x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<float64x2x3_t>(),
        48usize,
        concat!("Size of: ", stringify!(float64x2x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<float64x2x3_t>(),
        16usize,
        concat!("Alignment of ", stringify!(float64x2x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(float64x2x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct poly8x8x3_t {
    pub val: [poly8x8_t; 3usize],
}
#[test]
fn bindgen_test_layout_poly8x8x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<poly8x8x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<poly8x8x3_t>(),
        24usize,
        concat!("Size of: ", stringify!(poly8x8x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<poly8x8x3_t>(),
        8usize,
        concat!("Alignment of ", stringify!(poly8x8x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(poly8x8x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct poly8x16x3_t {
    pub val: [poly8x16_t; 3usize],
}
#[test]
fn bindgen_test_layout_poly8x16x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<poly8x16x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<poly8x16x3_t>(),
        48usize,
        concat!("Size of: ", stringify!(poly8x16x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<poly8x16x3_t>(),
        16usize,
        concat!("Alignment of ", stringify!(poly8x16x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(poly8x16x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct poly16x4x3_t {
    pub val: [poly16x4_t; 3usize],
}
#[test]
fn bindgen_test_layout_poly16x4x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<poly16x4x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<poly16x4x3_t>(),
        24usize,
        concat!("Size of: ", stringify!(poly16x4x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<poly16x4x3_t>(),
        8usize,
        concat!("Alignment of ", stringify!(poly16x4x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(poly16x4x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct poly16x8x3_t {
    pub val: [poly16x8_t; 3usize],
}
#[test]
fn bindgen_test_layout_poly16x8x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<poly16x8x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<poly16x8x3_t>(),
        48usize,
        concat!("Size of: ", stringify!(poly16x8x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<poly16x8x3_t>(),
        16usize,
        concat!("Alignment of ", stringify!(poly16x8x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(poly16x8x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct poly64x1x3_t {
    pub val: [poly64x1_t; 3usize],
}
#[test]
fn bindgen_test_layout_poly64x1x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<poly64x1x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<poly64x1x3_t>(),
        24usize,
        concat!("Size of: ", stringify!(poly64x1x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<poly64x1x3_t>(),
        8usize,
        concat!("Alignment of ", stringify!(poly64x1x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(poly64x1x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct poly64x2x3_t {
    pub val: [poly64x2_t; 3usize],
}
#[test]
fn bindgen_test_layout_poly64x2x3_t() {
    const UNINIT: ::std::mem::MaybeUninit<poly64x2x3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<poly64x2x3_t>(),
        48usize,
        concat!("Size of: ", stringify!(poly64x2x3_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<poly64x2x3_t>(),
        16usize,
        concat!("Alignment of ", stringify!(poly64x2x3_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(poly64x2x3_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct int8x8x4_t {
    pub val: [int8x8_t; 4usize],
}
#[test]
fn bindgen_test_layout_int8x8x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<int8x8x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int8x8x4_t>(),
        32usize,
        concat!("Size of: ", stringify!(int8x8x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int8x8x4_t>(),
        8usize,
        concat!("Alignment of ", stringify!(int8x8x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int8x8x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct int8x16x4_t {
    pub val: [int8x16_t; 4usize],
}
#[test]
fn bindgen_test_layout_int8x16x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<int8x16x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int8x16x4_t>(),
        64usize,
        concat!("Size of: ", stringify!(int8x16x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int8x16x4_t>(),
        16usize,
        concat!("Alignment of ", stringify!(int8x16x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int8x16x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct int16x4x4_t {
    pub val: [int16x4_t; 4usize],
}
#[test]
fn bindgen_test_layout_int16x4x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<int16x4x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int16x4x4_t>(),
        32usize,
        concat!("Size of: ", stringify!(int16x4x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int16x4x4_t>(),
        8usize,
        concat!("Alignment of ", stringify!(int16x4x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int16x4x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct int16x8x4_t {
    pub val: [int16x8_t; 4usize],
}
#[test]
fn bindgen_test_layout_int16x8x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<int16x8x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int16x8x4_t>(),
        64usize,
        concat!("Size of: ", stringify!(int16x8x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int16x8x4_t>(),
        16usize,
        concat!("Alignment of ", stringify!(int16x8x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int16x8x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct int32x2x4_t {
    pub val: [int32x2_t; 4usize],
}
#[test]
fn bindgen_test_layout_int32x2x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<int32x2x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int32x2x4_t>(),
        32usize,
        concat!("Size of: ", stringify!(int32x2x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int32x2x4_t>(),
        8usize,
        concat!("Alignment of ", stringify!(int32x2x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int32x2x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct int32x4x4_t {
    pub val: [int32x4_t; 4usize],
}
#[test]
fn bindgen_test_layout_int32x4x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<int32x4x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int32x4x4_t>(),
        64usize,
        concat!("Size of: ", stringify!(int32x4x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int32x4x4_t>(),
        16usize,
        concat!("Alignment of ", stringify!(int32x4x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int32x4x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct int64x1x4_t {
    pub val: [int64x1_t; 4usize],
}
#[test]
fn bindgen_test_layout_int64x1x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<int64x1x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int64x1x4_t>(),
        32usize,
        concat!("Size of: ", stringify!(int64x1x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int64x1x4_t>(),
        8usize,
        concat!("Alignment of ", stringify!(int64x1x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int64x1x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct int64x2x4_t {
    pub val: [int64x2_t; 4usize],
}
#[test]
fn bindgen_test_layout_int64x2x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<int64x2x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<int64x2x4_t>(),
        64usize,
        concat!("Size of: ", stringify!(int64x2x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<int64x2x4_t>(),
        16usize,
        concat!("Alignment of ", stringify!(int64x2x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(int64x2x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uint8x8x4_t {
    pub val: [uint8x8_t; 4usize],
}
#[test]
fn bindgen_test_layout_uint8x8x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint8x8x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint8x8x4_t>(),
        32usize,
        concat!("Size of: ", stringify!(uint8x8x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint8x8x4_t>(),
        8usize,
        concat!("Alignment of ", stringify!(uint8x8x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint8x8x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct uint8x16x4_t {
    pub val: [uint8x16_t; 4usize],
}
#[test]
fn bindgen_test_layout_uint8x16x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint8x16x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint8x16x4_t>(),
        64usize,
        concat!("Size of: ", stringify!(uint8x16x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint8x16x4_t>(),
        16usize,
        concat!("Alignment of ", stringify!(uint8x16x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint8x16x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uint16x4x4_t {
    pub val: [uint16x4_t; 4usize],
}
#[test]
fn bindgen_test_layout_uint16x4x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint16x4x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint16x4x4_t>(),
        32usize,
        concat!("Size of: ", stringify!(uint16x4x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint16x4x4_t>(),
        8usize,
        concat!("Alignment of ", stringify!(uint16x4x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint16x4x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct uint16x8x4_t {
    pub val: [uint16x8_t; 4usize],
}
#[test]
fn bindgen_test_layout_uint16x8x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint16x8x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint16x8x4_t>(),
        64usize,
        concat!("Size of: ", stringify!(uint16x8x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint16x8x4_t>(),
        16usize,
        concat!("Alignment of ", stringify!(uint16x8x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint16x8x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uint32x2x4_t {
    pub val: [uint32x2_t; 4usize],
}
#[test]
fn bindgen_test_layout_uint32x2x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint32x2x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint32x2x4_t>(),
        32usize,
        concat!("Size of: ", stringify!(uint32x2x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint32x2x4_t>(),
        8usize,
        concat!("Alignment of ", stringify!(uint32x2x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint32x2x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct uint32x4x4_t {
    pub val: [uint32x4_t; 4usize],
}
#[test]
fn bindgen_test_layout_uint32x4x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint32x4x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint32x4x4_t>(),
        64usize,
        concat!("Size of: ", stringify!(uint32x4x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint32x4x4_t>(),
        16usize,
        concat!("Alignment of ", stringify!(uint32x4x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint32x4x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uint64x1x4_t {
    pub val: [uint64x1_t; 4usize],
}
#[test]
fn bindgen_test_layout_uint64x1x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint64x1x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint64x1x4_t>(),
        32usize,
        concat!("Size of: ", stringify!(uint64x1x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint64x1x4_t>(),
        8usize,
        concat!("Alignment of ", stringify!(uint64x1x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint64x1x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct uint64x2x4_t {
    pub val: [uint64x2_t; 4usize],
}
#[test]
fn bindgen_test_layout_uint64x2x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<uint64x2x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uint64x2x4_t>(),
        64usize,
        concat!("Size of: ", stringify!(uint64x2x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<uint64x2x4_t>(),
        16usize,
        concat!("Alignment of ", stringify!(uint64x2x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(uint64x2x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct float16x4x4_t {
    pub val: [float16x4_t; 4usize],
}
#[test]
fn bindgen_test_layout_float16x4x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<float16x4x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<float16x4x4_t>(),
        32usize,
        concat!("Size of: ", stringify!(float16x4x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<float16x4x4_t>(),
        8usize,
        concat!("Alignment of ", stringify!(float16x4x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(float16x4x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct float16x8x4_t {
    pub val: [float16x8_t; 4usize],
}
#[test]
fn bindgen_test_layout_float16x8x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<float16x8x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<float16x8x4_t>(),
        64usize,
        concat!("Size of: ", stringify!(float16x8x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<float16x8x4_t>(),
        16usize,
        concat!("Alignment of ", stringify!(float16x8x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(float16x8x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct float32x2x4_t {
    pub val: [float32x2_t; 4usize],
}
#[test]
fn bindgen_test_layout_float32x2x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<float32x2x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<float32x2x4_t>(),
        32usize,
        concat!("Size of: ", stringify!(float32x2x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<float32x2x4_t>(),
        8usize,
        concat!("Alignment of ", stringify!(float32x2x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(float32x2x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct float32x4x4_t {
    pub val: [float32x4_t; 4usize],
}
#[test]
fn bindgen_test_layout_float32x4x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<float32x4x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<float32x4x4_t>(),
        64usize,
        concat!("Size of: ", stringify!(float32x4x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<float32x4x4_t>(),
        16usize,
        concat!("Alignment of ", stringify!(float32x4x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(float32x4x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct float64x1x4_t {
    pub val: [float64x1_t; 4usize],
}
#[test]
fn bindgen_test_layout_float64x1x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<float64x1x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<float64x1x4_t>(),
        32usize,
        concat!("Size of: ", stringify!(float64x1x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<float64x1x4_t>(),
        8usize,
        concat!("Alignment of ", stringify!(float64x1x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(float64x1x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct float64x2x4_t {
    pub val: [float64x2_t; 4usize],
}
#[test]
fn bindgen_test_layout_float64x2x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<float64x2x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<float64x2x4_t>(),
        64usize,
        concat!("Size of: ", stringify!(float64x2x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<float64x2x4_t>(),
        16usize,
        concat!("Alignment of ", stringify!(float64x2x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(float64x2x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct poly8x8x4_t {
    pub val: [poly8x8_t; 4usize],
}
#[test]
fn bindgen_test_layout_poly8x8x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<poly8x8x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<poly8x8x4_t>(),
        32usize,
        concat!("Size of: ", stringify!(poly8x8x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<poly8x8x4_t>(),
        8usize,
        concat!("Alignment of ", stringify!(poly8x8x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(poly8x8x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct poly8x16x4_t {
    pub val: [poly8x16_t; 4usize],
}
#[test]
fn bindgen_test_layout_poly8x16x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<poly8x16x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<poly8x16x4_t>(),
        64usize,
        concat!("Size of: ", stringify!(poly8x16x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<poly8x16x4_t>(),
        16usize,
        concat!("Alignment of ", stringify!(poly8x16x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(poly8x16x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct poly16x4x4_t {
    pub val: [poly16x4_t; 4usize],
}
#[test]
fn bindgen_test_layout_poly16x4x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<poly16x4x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<poly16x4x4_t>(),
        32usize,
        concat!("Size of: ", stringify!(poly16x4x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<poly16x4x4_t>(),
        8usize,
        concat!("Alignment of ", stringify!(poly16x4x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(poly16x4x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct poly16x8x4_t {
    pub val: [poly16x8_t; 4usize],
}
#[test]
fn bindgen_test_layout_poly16x8x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<poly16x8x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<poly16x8x4_t>(),
        64usize,
        concat!("Size of: ", stringify!(poly16x8x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<poly16x8x4_t>(),
        16usize,
        concat!("Alignment of ", stringify!(poly16x8x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(poly16x8x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct poly64x1x4_t {
    pub val: [poly64x1_t; 4usize],
}
#[test]
fn bindgen_test_layout_poly64x1x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<poly64x1x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<poly64x1x4_t>(),
        32usize,
        concat!("Size of: ", stringify!(poly64x1x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<poly64x1x4_t>(),
        8usize,
        concat!("Alignment of ", stringify!(poly64x1x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(poly64x1x4_t), "::", stringify!(val)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct poly64x2x4_t {
    pub val: [poly64x2_t; 4usize],
}
#[test]
fn bindgen_test_layout_poly64x2x4_t() {
    const UNINIT: ::std::mem::MaybeUninit<poly64x2x4_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<poly64x2x4_t>(),
        64usize,
        concat!("Size of: ", stringify!(poly64x2x4_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<poly64x2x4_t>(),
        16usize,
        concat!("Alignment of ", stringify!(poly64x2x4_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(poly64x2x4_t), "::", stringify!(val)),
    );
}
pub type zend_uchar = ::std::os::raw::c_uchar;
pub const ZEND_RESULT_CODE_SUCCESS: ZEND_RESULT_CODE = 0;
pub const ZEND_RESULT_CODE_FAILURE: ZEND_RESULT_CODE = -1;
pub type ZEND_RESULT_CODE = ::std::os::raw::c_int;
pub use self::ZEND_RESULT_CODE as zend_result;
pub type zend_object_handlers = _zend_object_handlers;
pub type zend_class_entry = _zend_class_entry;
pub type zend_function = _zend_function;
pub type zend_execute_data = _zend_execute_data;
pub type zval = _zval_struct;
pub type zend_refcounted = _zend_refcounted;
pub type zend_string = _zend_string;
pub type zend_array = _zend_array;
pub type zend_object = _zend_object;
pub type zend_resource = _zend_resource;
pub type zend_reference = _zend_reference;
pub type zend_ast_ref = _zend_ast_ref;
pub type zend_ast = _zend_ast;
pub type compare_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type swap_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
    ),
>;
pub type sort_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: usize,
        arg4: compare_func_t,
        arg5: swap_func_t,
    ),
>;
pub type dtor_func_t = ::std::option::Option<unsafe extern "C" fn(pDest: *mut zval)>;
pub type copy_ctor_func_t = ::std::option::Option<
    unsafe extern "C" fn(pElement: *mut zval),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zend_type {
    pub ptr: *mut ::std::os::raw::c_void,
    pub type_mask: u32,
}
#[test]
fn bindgen_test_layout_zend_type() {
    const UNINIT: ::std::mem::MaybeUninit<zend_type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<zend_type>(),
        16usize,
        concat!("Size of: ", stringify!(zend_type)),
    );
    assert_eq!(
        ::std::mem::align_of::<zend_type>(),
        8usize,
        concat!("Alignment of ", stringify!(zend_type)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(zend_type), "::", stringify!(ptr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_mask) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(zend_type), "::", stringify!(type_mask)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zend_type_list {
    pub num_types: u32,
    pub types: [zend_type; 1usize],
}
#[test]
fn bindgen_test_layout_zend_type_list() {
    const UNINIT: ::std::mem::MaybeUninit<zend_type_list> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<zend_type_list>(),
        24usize,
        concat!("Size of: ", stringify!(zend_type_list)),
    );
    assert_eq!(
        ::std::mem::align_of::<zend_type_list>(),
        8usize,
        concat!("Alignment of ", stringify!(zend_type_list)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_types) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zend_type_list),
            "::",
            stringify!(num_types),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).types) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(zend_type_list), "::", stringify!(types)),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_value {
    pub lval: zend_long,
    pub dval: f64,
    pub counted: *mut zend_refcounted,
    pub str_: *mut zend_string,
    pub arr: *mut zend_array,
    pub obj: *mut zend_object,
    pub res: *mut zend_resource,
    pub ref_: *mut zend_reference,
    pub ast: *mut zend_ast_ref,
    pub zv: *mut zval,
    pub ptr: *mut ::std::os::raw::c_void,
    pub ce: *mut zend_class_entry,
    pub func: *mut zend_function,
    pub ww: _zend_value__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_value__bindgen_ty_1 {
    pub w1: u32,
    pub w2: u32,
}
#[test]
fn bindgen_test_layout__zend_value__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_value__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_value__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_value__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_value__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_value__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value__bindgen_ty_1),
            "::",
            stringify!(w1),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value__bindgen_ty_1),
            "::",
            stringify!(w2),
        ),
    );
}
#[test]
fn bindgen_test_layout__zend_value() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_value> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_value>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_value)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_value>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_value)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lval) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(lval)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dval) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(dval)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counted) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(counted)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(str_)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arr) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(arr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(obj)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(res)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(ref_)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ast) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(ast)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zv) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(zv)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(ptr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ce) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(ce)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(func)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ww) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(ww)),
    );
}
pub type zend_value = _zend_value;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zval_struct {
    pub value: zend_value,
    pub u1: _zval_struct__bindgen_ty_1,
    pub u2: _zval_struct__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zval_struct__bindgen_ty_1 {
    pub type_info: u32,
    pub v: _zval_struct__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zval_struct__bindgen_ty_1__bindgen_ty_1 {
    pub type_: u8,
    pub type_flags: u8,
    pub u: _zval_struct__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zval_struct__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub extra: u16,
}
#[test]
fn bindgen_test_layout__zval_struct__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        _zval_struct__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zval_struct__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
        ),
    );
    assert_eq!(
        ::std::mem::align_of::<_zval_struct__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(extra),
        ),
    );
}
#[test]
fn bindgen_test_layout__zval_struct__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_zval_struct__bindgen_ty_1__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zval_struct__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zval_struct__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_flags) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(u),
        ),
    );
}
#[test]
fn bindgen_test_layout__zval_struct__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_zval_struct__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zval_struct__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_zval_struct__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zval_struct__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_zval_struct__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1),
            "::",
            stringify!(type_info),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1),
            "::",
            stringify!(v),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zval_struct__bindgen_ty_2 {
    pub next: u32,
    pub cache_slot: u32,
    pub opline_num: u32,
    pub lineno: u32,
    pub num_args: u32,
    pub fe_pos: u32,
    pub fe_iter_idx: u32,
    pub guard: u32,
    pub constant_flags: u32,
    pub extra: u32,
}
#[test]
fn bindgen_test_layout__zval_struct__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<_zval_struct__bindgen_ty_2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zval_struct__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(_zval_struct__bindgen_ty_2)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zval_struct__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(_zval_struct__bindgen_ty_2)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(next),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_slot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(cache_slot),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opline_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(opline_num),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(lineno),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_args) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(num_args),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fe_pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(fe_pos),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fe_iter_idx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(fe_iter_idx),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guard) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(guard),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constant_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(constant_flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(extra),
        ),
    );
}
#[test]
fn bindgen_test_layout__zval_struct() {
    const UNINIT: ::std::mem::MaybeUninit<_zval_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zval_struct>(),
        16usize,
        concat!("Size of: ", stringify!(_zval_struct)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zval_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(_zval_struct)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zval_struct), "::", stringify!(value)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u1) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zval_struct), "::", stringify!(u1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u2) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(_zval_struct), "::", stringify!(u2)),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_refcounted_h {
    pub refcount: u32,
    pub u: _zend_refcounted_h__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_refcounted_h__bindgen_ty_1 {
    pub type_info: u32,
}
#[test]
fn bindgen_test_layout__zend_refcounted_h__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_refcounted_h__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_refcounted_h__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_zend_refcounted_h__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_refcounted_h__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_refcounted_h__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_refcounted_h__bindgen_ty_1),
            "::",
            stringify!(type_info),
        ),
    );
}
#[test]
fn bindgen_test_layout__zend_refcounted_h() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_refcounted_h> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_refcounted_h>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_refcounted_h)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_refcounted_h>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_refcounted_h)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_refcounted_h),
            "::",
            stringify!(refcount),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(_zend_refcounted_h), "::", stringify!(u)),
    );
}
pub type zend_refcounted_h = _zend_refcounted_h;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_refcounted {
    pub gc: zend_refcounted_h,
}
#[test]
fn bindgen_test_layout__zend_refcounted() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_refcounted> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_refcounted>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_refcounted)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_refcounted>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_refcounted)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_refcounted), "::", stringify!(gc)),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_string {
    pub gc: zend_refcounted_h,
    pub h: zend_ulong,
    pub len: usize,
    pub val: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout__zend_string() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_string> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_string>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_string)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_string>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_string)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_string), "::", stringify!(gc)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_string), "::", stringify!(h)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_zend_string), "::", stringify!(len)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_zend_string), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _Bucket {
    pub val: zval,
    pub h: zend_ulong,
    pub key: *mut zend_string,
}
#[test]
fn bindgen_test_layout__Bucket() {
    const UNINIT: ::std::mem::MaybeUninit<_Bucket> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_Bucket>(),
        32usize,
        concat!("Size of: ", stringify!(_Bucket)),
    );
    assert_eq!(
        ::std::mem::align_of::<_Bucket>(),
        8usize,
        concat!("Alignment of ", stringify!(_Bucket)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_Bucket), "::", stringify!(val)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_Bucket), "::", stringify!(h)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_Bucket), "::", stringify!(key)),
    );
}
pub type Bucket = _Bucket;
pub type HashTable = _zend_array;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_array {
    pub gc: zend_refcounted_h,
    pub u: _zend_array__bindgen_ty_1,
    pub nTableMask: u32,
    pub __bindgen_anon_1: _zend_array__bindgen_ty_2,
    pub nNumUsed: u32,
    pub nNumOfElements: u32,
    pub nTableSize: u32,
    pub nInternalPointer: u32,
    pub nNextFreeElement: zend_long,
    pub pDestructor: dtor_func_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_array__bindgen_ty_1 {
    pub v: _zend_array__bindgen_ty_1__bindgen_ty_1,
    pub flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_array__bindgen_ty_1__bindgen_ty_1 {
    pub flags: u8,
    pub _unused: u8,
    pub nIteratorsCount: u8,
    pub _unused2: u8,
}
#[test]
fn bindgen_test_layout__zend_array__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_array__bindgen_ty_1__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_array__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_array__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_unused),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nIteratorsCount) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(nIteratorsCount),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_unused2),
        ),
    );
}
#[test]
fn bindgen_test_layout__zend_array__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_array__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_array__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_zend_array__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_array__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_array__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1),
            "::",
            stringify!(v),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1),
            "::",
            stringify!(flags),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_array__bindgen_ty_2 {
    pub arHash: *mut u32,
    pub arData: *mut Bucket,
    pub arPacked: *mut zval,
}
#[test]
fn bindgen_test_layout__zend_array__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_array__bindgen_ty_2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_array__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_array__bindgen_ty_2)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_array__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_array__bindgen_ty_2)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arHash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_2),
            "::",
            stringify!(arHash),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_2),
            "::",
            stringify!(arData),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arPacked) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_2),
            "::",
            stringify!(arPacked),
        ),
    );
}
#[test]
fn bindgen_test_layout__zend_array() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_array> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_array>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_array)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_array>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_array)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_array), "::", stringify!(gc)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_array), "::", stringify!(u)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nTableMask) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nTableMask),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nNumUsed) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_zend_array), "::", stringify!(nNumUsed)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nNumOfElements) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nNumOfElements),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nTableSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nTableSize),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nInternalPointer) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nInternalPointer),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nNextFreeElement) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nNextFreeElement),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDestructor) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(pDestructor),
        ),
    );
}
pub type HashPosition = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HashTableIterator {
    pub ht: *mut HashTable,
    pub pos: HashPosition,
    pub next_copy: u32,
}
#[test]
fn bindgen_test_layout__HashTableIterator() {
    const UNINIT: ::std::mem::MaybeUninit<_HashTableIterator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HashTableIterator>(),
        16usize,
        concat!("Size of: ", stringify!(_HashTableIterator)),
    );
    assert_eq!(
        ::std::mem::align_of::<_HashTableIterator>(),
        8usize,
        concat!("Alignment of ", stringify!(_HashTableIterator)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ht) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HashTableIterator),
            "::",
            stringify!(ht),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HashTableIterator),
            "::",
            stringify!(pos),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_copy) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_HashTableIterator),
            "::",
            stringify!(next_copy),
        ),
    );
}
pub type HashTableIterator = _HashTableIterator;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_object {
    pub gc: zend_refcounted_h,
    pub handle: u32,
    pub ce: *mut zend_class_entry,
    pub handlers: *const zend_object_handlers,
    pub properties: *mut HashTable,
    pub properties_table: [zval; 1usize],
}
#[test]
fn bindgen_test_layout__zend_object() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_object> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_object>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_object)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_object>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_object)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_object), "::", stringify!(gc)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_object), "::", stringify!(handle)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ce) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_zend_object), "::", stringify!(ce)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handlers) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object),
            "::",
            stringify!(handlers),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).properties) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object),
            "::",
            stringify!(properties),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).properties_table) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object),
            "::",
            stringify!(properties_table),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_resource {
    pub gc: zend_refcounted_h,
    pub handle: zend_long,
    pub type_: ::std::os::raw::c_int,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__zend_resource() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_resource> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_resource>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_resource)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_resource>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_resource)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_resource), "::", stringify!(gc)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_resource),
            "::",
            stringify!(handle),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_zend_resource), "::", stringify!(type_)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_zend_resource), "::", stringify!(ptr)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zend_property_info_list {
    pub num: usize,
    pub num_allocated: usize,
    pub ptr: [*mut _zend_property_info; 1usize],
}
#[test]
fn bindgen_test_layout_zend_property_info_list() {
    const UNINIT: ::std::mem::MaybeUninit<zend_property_info_list> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<zend_property_info_list>(),
        24usize,
        concat!("Size of: ", stringify!(zend_property_info_list)),
    );
    assert_eq!(
        ::std::mem::align_of::<zend_property_info_list>(),
        8usize,
        concat!("Alignment of ", stringify!(zend_property_info_list)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zend_property_info_list),
            "::",
            stringify!(num),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_allocated) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zend_property_info_list),
            "::",
            stringify!(num_allocated),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(zend_property_info_list),
            "::",
            stringify!(ptr),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union zend_property_info_source_list {
    pub ptr: *mut _zend_property_info,
    pub list: usize,
}
#[test]
fn bindgen_test_layout_zend_property_info_source_list() {
    const UNINIT: ::std::mem::MaybeUninit<zend_property_info_source_list> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<zend_property_info_source_list>(),
        8usize,
        concat!("Size of: ", stringify!(zend_property_info_source_list)),
    );
    assert_eq!(
        ::std::mem::align_of::<zend_property_info_source_list>(),
        8usize,
        concat!("Alignment of ", stringify!(zend_property_info_source_list)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zend_property_info_source_list),
            "::",
            stringify!(ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zend_property_info_source_list),
            "::",
            stringify!(list),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_reference {
    pub gc: zend_refcounted_h,
    pub val: zval,
    pub sources: zend_property_info_source_list,
}
#[test]
fn bindgen_test_layout__zend_reference() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_reference> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_reference>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_reference)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_reference>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_reference)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_reference), "::", stringify!(gc)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_reference), "::", stringify!(val)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sources) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_reference),
            "::",
            stringify!(sources),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_ast_ref {
    pub gc: zend_refcounted_h,
}
#[test]
fn bindgen_test_layout__zend_ast_ref() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_ast_ref> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_ast_ref>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_ast_ref)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ast_ref>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_ast_ref)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_ast_ref), "::", stringify!(gc)),
    );
}
extern "C" {
    pub fn zend_map_ptr_reset();
}
extern "C" {
    pub fn zend_map_ptr_new() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zend_map_ptr_extend(last: usize);
}
extern "C" {
    pub fn zend_alloc_ce_cache(type_name: *mut zend_string);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_leak_info {
    pub addr: *mut ::std::os::raw::c_void,
    pub size: usize,
    pub filename: *const ::std::os::raw::c_char,
    pub orig_filename: *const ::std::os::raw::c_char,
    pub lineno: u32,
    pub orig_lineno: u32,
}
#[test]
fn bindgen_test_layout__zend_leak_info() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_leak_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_leak_info>(),
        40usize,
        concat!("Size of: ", stringify!(_zend_leak_info)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_leak_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_leak_info)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_leak_info), "::", stringify!(addr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_leak_info), "::", stringify!(size)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_leak_info),
            "::",
            stringify!(filename),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orig_filename) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_leak_info),
            "::",
            stringify!(orig_filename),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineno) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_leak_info),
            "::",
            stringify!(lineno),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orig_lineno) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_leak_info),
            "::",
            stringify!(orig_lineno),
        ),
    );
}
pub type zend_leak_info = _zend_leak_info;
extern "C" {
    pub fn zend_strndup(
        s: *const ::std::os::raw::c_char,
        length: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _emalloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _safe_emalloc(
        nmemb: usize,
        size: usize,
        offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _safe_malloc(
        nmemb: usize,
        size: usize,
        offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _efree(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _ecalloc(nmemb: usize, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _erealloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _erealloc2(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        copy_size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _safe_erealloc(
        ptr: *mut ::std::os::raw::c_void,
        nmemb: usize,
        size: usize,
        offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _safe_realloc(
        ptr: *mut ::std::os::raw::c_void,
        nmemb: usize,
        size: usize,
        offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _estrdup(s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _estrndup(
        s: *const ::std::os::raw::c_char,
        length: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _zend_mem_block_size(ptr: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn _emalloc_8() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_16() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_24() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_32() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_40() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_48() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_56() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_64() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_80() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_96() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_112() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_128() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_160() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_192() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_224() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_256() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_320() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_384() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_448() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_512() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_640() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_768() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_896() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_1024() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_1280() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_1536() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_1792() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_2048() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_2560() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_3072() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_large(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _emalloc_huge(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _efree_8(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_16(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_24(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_32(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_40(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_48(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_56(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_64(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_80(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_96(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_112(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_128(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_160(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_192(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_224(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_256(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_320(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_384(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_448(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_512(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_640(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_768(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_896(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_1024(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_1280(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_1536(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_1792(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_2048(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_2560(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_3072(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _efree_large(arg1: *mut ::std::os::raw::c_void, size: usize);
}
extern "C" {
    pub fn _efree_huge(arg1: *mut ::std::os::raw::c_void, size: usize);
}
extern "C" {
    pub fn __zend_malloc(len: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __zend_calloc(nmemb: usize, len: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __zend_realloc(
        p: *mut ::std::os::raw::c_void,
        len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __zend_strdup(
        s: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_set_memory_limit(memory_limit: usize) -> zend_result;
}
extern "C" {
    pub fn zend_alloc_in_memory_limit_error_reporting() -> bool;
}
extern "C" {
    pub fn start_memory_manager();
}
extern "C" {
    pub fn shutdown_memory_manager(silent: bool, full_shutdown: bool);
}
extern "C" {
    pub fn is_zend_mm() -> bool;
}
extern "C" {
    pub fn is_zend_ptr(ptr: *const ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn zend_memory_usage(real_usage: bool) -> usize;
}
extern "C" {
    pub fn zend_memory_peak_usage(real_usage: bool) -> usize;
}
extern "C" {
    pub fn zend_memory_reset_peak_usage();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_mm_heap {
    _unused: [u8; 0],
}
pub type zend_mm_heap = _zend_mm_heap;
extern "C" {
    pub fn zend_mm_startup() -> *mut zend_mm_heap;
}
extern "C" {
    pub fn zend_mm_shutdown(heap: *mut zend_mm_heap, full_shutdown: bool, silent: bool);
}
extern "C" {
    pub fn _zend_mm_alloc(
        heap: *mut zend_mm_heap,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _zend_mm_free(heap: *mut zend_mm_heap, p: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _zend_mm_realloc(
        heap: *mut zend_mm_heap,
        p: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _zend_mm_realloc2(
        heap: *mut zend_mm_heap,
        p: *mut ::std::os::raw::c_void,
        size: usize,
        copy_size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _zend_mm_block_size(
        heap: *mut zend_mm_heap,
        p: *mut ::std::os::raw::c_void,
    ) -> usize;
}
extern "C" {
    pub fn zend_mm_set_heap(new_heap: *mut zend_mm_heap) -> *mut zend_mm_heap;
}
extern "C" {
    pub fn zend_mm_get_heap() -> *mut zend_mm_heap;
}
extern "C" {
    pub fn zend_mm_gc(heap: *mut zend_mm_heap) -> usize;
}
extern "C" {
    pub fn zend_mm_is_custom_heap(new_heap: *mut zend_mm_heap) -> bool;
}
extern "C" {
    pub fn zend_mm_set_custom_handlers(
        heap: *mut zend_mm_heap,
        _malloc: ::std::option::Option<
            unsafe extern "C" fn(arg1: usize) -> *mut ::std::os::raw::c_void,
        >,
        _free: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
        _realloc: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: usize,
            ) -> *mut ::std::os::raw::c_void,
        >,
    );
}
extern "C" {
    pub fn zend_mm_get_custom_handlers(
        heap: *mut zend_mm_heap,
        _malloc: *mut ::std::option::Option<
            unsafe extern "C" fn(arg1: usize) -> *mut ::std::os::raw::c_void,
        >,
        _free: *mut ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
        _realloc: *mut ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: usize,
            ) -> *mut ::std::os::raw::c_void,
        >,
    );
}
pub type zend_mm_storage = _zend_mm_storage;
pub type zend_mm_chunk_alloc_t = ::std::option::Option<
    unsafe extern "C" fn(
        storage: *mut zend_mm_storage,
        size: usize,
        alignment: usize,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type zend_mm_chunk_free_t = ::std::option::Option<
    unsafe extern "C" fn(
        storage: *mut zend_mm_storage,
        chunk: *mut ::std::os::raw::c_void,
        size: usize,
    ),
>;
pub type zend_mm_chunk_truncate_t = ::std::option::Option<
    unsafe extern "C" fn(
        storage: *mut zend_mm_storage,
        chunk: *mut ::std::os::raw::c_void,
        old_size: usize,
        new_size: usize,
    ) -> bool,
>;
pub type zend_mm_chunk_extend_t = ::std::option::Option<
    unsafe extern "C" fn(
        storage: *mut zend_mm_storage,
        chunk: *mut ::std::os::raw::c_void,
        old_size: usize,
        new_size: usize,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_mm_handlers {
    pub chunk_alloc: zend_mm_chunk_alloc_t,
    pub chunk_free: zend_mm_chunk_free_t,
    pub chunk_truncate: zend_mm_chunk_truncate_t,
    pub chunk_extend: zend_mm_chunk_extend_t,
}
#[test]
fn bindgen_test_layout__zend_mm_handlers() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_mm_handlers> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_mm_handlers>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_mm_handlers)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_mm_handlers>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_mm_handlers)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_alloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mm_handlers),
            "::",
            stringify!(chunk_alloc),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_free) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mm_handlers),
            "::",
            stringify!(chunk_free),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_truncate) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mm_handlers),
            "::",
            stringify!(chunk_truncate),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_extend) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mm_handlers),
            "::",
            stringify!(chunk_extend),
        ),
    );
}
pub type zend_mm_handlers = _zend_mm_handlers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_mm_storage {
    pub handlers: zend_mm_handlers,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__zend_mm_storage() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_mm_storage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_mm_storage>(),
        40usize,
        concat!("Size of: ", stringify!(_zend_mm_storage)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_mm_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_mm_storage)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handlers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mm_storage),
            "::",
            stringify!(handlers),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_mm_storage),
            "::",
            stringify!(data),
        ),
    );
}
extern "C" {
    pub fn zend_mm_get_storage(heap: *mut zend_mm_heap) -> *mut zend_mm_storage;
}
extern "C" {
    pub fn zend_mm_startup_ex(
        handlers: *const zend_mm_handlers,
        data: *mut ::std::os::raw::c_void,
        data_size: usize,
    ) -> *mut zend_mm_heap;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_llist_element {
    pub next: *mut _zend_llist_element,
    pub prev: *mut _zend_llist_element,
    pub data: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout__zend_llist_element() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_llist_element> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_llist_element>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_llist_element)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_llist_element>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_llist_element)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_llist_element),
            "::",
            stringify!(next),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_llist_element),
            "::",
            stringify!(prev),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_llist_element),
            "::",
            stringify!(data),
        ),
    );
}
pub type zend_llist_element = _zend_llist_element;
pub type llist_dtor_func_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
>;
pub type llist_compare_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut *const zend_llist_element,
        arg2: *mut *const zend_llist_element,
    ) -> ::std::os::raw::c_int,
>;
pub type llist_apply_with_args_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        num_args: ::std::os::raw::c_int,
        args: va_list,
    ),
>;
pub type llist_apply_with_arg_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        arg: *mut ::std::os::raw::c_void,
    ),
>;
pub type llist_apply_func_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_llist {
    pub head: *mut zend_llist_element,
    pub tail: *mut zend_llist_element,
    pub count: usize,
    pub size: usize,
    pub dtor: llist_dtor_func_t,
    pub persistent: ::std::os::raw::c_uchar,
    pub traverse_ptr: *mut zend_llist_element,
}
#[test]
fn bindgen_test_layout__zend_llist() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_llist> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_llist>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_llist)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_llist>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_llist)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_llist), "::", stringify!(head)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tail) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_llist), "::", stringify!(tail)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_zend_llist), "::", stringify!(count)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_zend_llist), "::", stringify!(size)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dtor) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(_zend_llist), "::", stringify!(dtor)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).persistent) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_llist),
            "::",
            stringify!(persistent),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).traverse_ptr) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_llist),
            "::",
            stringify!(traverse_ptr),
        ),
    );
}
pub type zend_llist = _zend_llist;
pub type zend_llist_position = *mut zend_llist_element;
extern "C" {
    pub fn zend_llist_init(
        l: *mut zend_llist,
        size: usize,
        dtor: llist_dtor_func_t,
        persistent: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn zend_llist_add_element(
        l: *mut zend_llist,
        element: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn zend_llist_prepend_element(
        l: *mut zend_llist,
        element: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn zend_llist_del_element(
        l: *mut zend_llist,
        element: *mut ::std::os::raw::c_void,
        compare: ::std::option::Option<
            unsafe extern "C" fn(
                element1: *mut ::std::os::raw::c_void,
                element2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn zend_llist_destroy(l: *mut zend_llist);
}
extern "C" {
    pub fn zend_llist_clean(l: *mut zend_llist);
}
extern "C" {
    pub fn zend_llist_remove_tail(l: *mut zend_llist);
}
extern "C" {
    pub fn zend_llist_copy(dst: *mut zend_llist, src: *mut zend_llist);
}
extern "C" {
    pub fn zend_llist_apply(l: *mut zend_llist, func: llist_apply_func_t);
}
extern "C" {
    pub fn zend_llist_apply_with_del(
        l: *mut zend_llist,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn zend_llist_apply_with_argument(
        l: *mut zend_llist,
        func: llist_apply_with_arg_func_t,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn zend_llist_apply_with_arguments(
        l: *mut zend_llist,
        func: llist_apply_with_args_func_t,
        num_args: ::std::os::raw::c_int,
        ...
    );
}
extern "C" {
    pub fn zend_llist_count(l: *mut zend_llist) -> usize;
}
extern "C" {
    pub fn zend_llist_sort(l: *mut zend_llist, comp_func: llist_compare_func_t);
}
extern "C" {
    pub fn zend_llist_get_first_ex(
        l: *mut zend_llist,
        pos: *mut zend_llist_position,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zend_llist_get_last_ex(
        l: *mut zend_llist,
        pos: *mut zend_llist_position,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zend_llist_get_next_ex(
        l: *mut zend_llist,
        pos: *mut zend_llist_position,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zend_llist_get_prev_ex(
        l: *mut zend_llist,
        pos: *mut zend_llist_position,
    ) -> *mut ::std::os::raw::c_void;
}
pub type zend_string_copy_storage_func_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type zend_new_interned_string_func_t = ::std::option::Option<
    unsafe extern "C" fn(str_: *mut zend_string) -> *mut zend_string,
>;
pub type zend_string_init_interned_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        str_: *const ::std::os::raw::c_char,
        size: usize,
        permanent: bool,
    ) -> *mut zend_string,
>;
pub type zend_string_init_existing_interned_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        str_: *const ::std::os::raw::c_char,
        size: usize,
        permanent: bool,
    ) -> *mut zend_string,
>;
extern "C" {
    pub static mut zend_new_interned_string: zend_new_interned_string_func_t;
}
extern "C" {
    pub static mut zend_string_init_interned: zend_string_init_interned_func_t;
}
extern "C" {
    pub static mut zend_string_init_existing_interned: zend_string_init_existing_interned_func_t;
}
extern "C" {
    pub fn zend_string_hash_func(str_: *mut zend_string) -> zend_ulong;
}
extern "C" {
    pub fn zend_hash_func(str_: *const ::std::os::raw::c_char, len: usize) -> zend_ulong;
}
extern "C" {
    pub fn zend_interned_string_find_permanent(
        str_: *mut zend_string,
    ) -> *mut zend_string;
}
extern "C" {
    pub fn zend_string_concat2(
        str1: *const ::std::os::raw::c_char,
        str1_len: usize,
        str2: *const ::std::os::raw::c_char,
        str2_len: usize,
    ) -> *mut zend_string;
}
extern "C" {
    pub fn zend_string_concat3(
        str1: *const ::std::os::raw::c_char,
        str1_len: usize,
        str2: *const ::std::os::raw::c_char,
        str2_len: usize,
        str3: *const ::std::os::raw::c_char,
        str3_len: usize,
    ) -> *mut zend_string;
}
extern "C" {
    pub fn zend_interned_strings_init();
}
extern "C" {
    pub fn zend_interned_strings_dtor();
}
extern "C" {
    pub fn zend_interned_strings_activate();
}
extern "C" {
    pub fn zend_interned_strings_deactivate();
}
extern "C" {
    pub fn zend_interned_strings_set_request_storage_handlers(
        handler: zend_new_interned_string_func_t,
        init_handler: zend_string_init_interned_func_t,
        init_existing_handler: zend_string_init_existing_interned_func_t,
    );
}
extern "C" {
    pub fn zend_interned_strings_switch_storage(request: bool);
}
extern "C" {
    pub static mut zend_empty_string: *mut zend_string;
}
extern "C" {
    pub static mut zend_one_char_string: [*mut zend_string; 256usize];
}
extern "C" {
    pub static mut zend_known_strings: *mut *mut zend_string;
}
pub const _zend_known_string_id_ZEND_STR_FILE: _zend_known_string_id = 0;
pub const _zend_known_string_id_ZEND_STR_LINE: _zend_known_string_id = 1;
pub const _zend_known_string_id_ZEND_STR_FUNCTION: _zend_known_string_id = 2;
pub const _zend_known_string_id_ZEND_STR_CLASS: _zend_known_string_id = 3;
pub const _zend_known_string_id_ZEND_STR_OBJECT: _zend_known_string_id = 4;
pub const _zend_known_string_id_ZEND_STR_TYPE: _zend_known_string_id = 5;
pub const _zend_known_string_id_ZEND_STR_OBJECT_OPERATOR: _zend_known_string_id = 6;
pub const _zend_known_string_id_ZEND_STR_PAAMAYIM_NEKUDOTAYIM: _zend_known_string_id = 7;
pub const _zend_known_string_id_ZEND_STR_ARGS: _zend_known_string_id = 8;
pub const _zend_known_string_id_ZEND_STR_UNKNOWN: _zend_known_string_id = 9;
pub const _zend_known_string_id_ZEND_STR_UNKNOWN_CAPITALIZED: _zend_known_string_id = 10;
pub const _zend_known_string_id_ZEND_STR_EVAL: _zend_known_string_id = 11;
pub const _zend_known_string_id_ZEND_STR_INCLUDE: _zend_known_string_id = 12;
pub const _zend_known_string_id_ZEND_STR_REQUIRE: _zend_known_string_id = 13;
pub const _zend_known_string_id_ZEND_STR_INCLUDE_ONCE: _zend_known_string_id = 14;
pub const _zend_known_string_id_ZEND_STR_REQUIRE_ONCE: _zend_known_string_id = 15;
pub const _zend_known_string_id_ZEND_STR_SCALAR: _zend_known_string_id = 16;
pub const _zend_known_string_id_ZEND_STR_ERROR_REPORTING: _zend_known_string_id = 17;
pub const _zend_known_string_id_ZEND_STR_STATIC: _zend_known_string_id = 18;
pub const _zend_known_string_id_ZEND_STR_THIS: _zend_known_string_id = 19;
pub const _zend_known_string_id_ZEND_STR_VALUE: _zend_known_string_id = 20;
pub const _zend_known_string_id_ZEND_STR_KEY: _zend_known_string_id = 21;
pub const _zend_known_string_id_ZEND_STR_MAGIC_INVOKE: _zend_known_string_id = 22;
pub const _zend_known_string_id_ZEND_STR_PREVIOUS: _zend_known_string_id = 23;
pub const _zend_known_string_id_ZEND_STR_CODE: _zend_known_string_id = 24;
pub const _zend_known_string_id_ZEND_STR_MESSAGE: _zend_known_string_id = 25;
pub const _zend_known_string_id_ZEND_STR_SEVERITY: _zend_known_string_id = 26;
pub const _zend_known_string_id_ZEND_STR_STRING: _zend_known_string_id = 27;
pub const _zend_known_string_id_ZEND_STR_TRACE: _zend_known_string_id = 28;
pub const _zend_known_string_id_ZEND_STR_SCHEME: _zend_known_string_id = 29;
pub const _zend_known_string_id_ZEND_STR_HOST: _zend_known_string_id = 30;
pub const _zend_known_string_id_ZEND_STR_PORT: _zend_known_string_id = 31;
pub const _zend_known_string_id_ZEND_STR_USER: _zend_known_string_id = 32;
pub const _zend_known_string_id_ZEND_STR_PASS: _zend_known_string_id = 33;
pub const _zend_known_string_id_ZEND_STR_PATH: _zend_known_string_id = 34;
pub const _zend_known_string_id_ZEND_STR_QUERY: _zend_known_string_id = 35;
pub const _zend_known_string_id_ZEND_STR_FRAGMENT: _zend_known_string_id = 36;
pub const _zend_known_string_id_ZEND_STR_NULL: _zend_known_string_id = 37;
pub const _zend_known_string_id_ZEND_STR_BOOLEAN: _zend_known_string_id = 38;
pub const _zend_known_string_id_ZEND_STR_INTEGER: _zend_known_string_id = 39;
pub const _zend_known_string_id_ZEND_STR_DOUBLE: _zend_known_string_id = 40;
pub const _zend_known_string_id_ZEND_STR_ARRAY: _zend_known_string_id = 41;
pub const _zend_known_string_id_ZEND_STR_RESOURCE: _zend_known_string_id = 42;
pub const _zend_known_string_id_ZEND_STR_CLOSED_RESOURCE: _zend_known_string_id = 43;
pub const _zend_known_string_id_ZEND_STR_NAME: _zend_known_string_id = 44;
pub const _zend_known_string_id_ZEND_STR_ARGV: _zend_known_string_id = 45;
pub const _zend_known_string_id_ZEND_STR_ARGC: _zend_known_string_id = 46;
pub const _zend_known_string_id_ZEND_STR_ARRAY_CAPITALIZED: _zend_known_string_id = 47;
pub const _zend_known_string_id_ZEND_STR_BOOL: _zend_known_string_id = 48;
pub const _zend_known_string_id_ZEND_STR_INT: _zend_known_string_id = 49;
pub const _zend_known_string_id_ZEND_STR_FLOAT: _zend_known_string_id = 50;
pub const _zend_known_string_id_ZEND_STR_CALLABLE: _zend_known_string_id = 51;
pub const _zend_known_string_id_ZEND_STR_ITERABLE: _zend_known_string_id = 52;
pub const _zend_known_string_id_ZEND_STR_VOID: _zend_known_string_id = 53;
pub const _zend_known_string_id_ZEND_STR_NEVER: _zend_known_string_id = 54;
pub const _zend_known_string_id_ZEND_STR_FALSE: _zend_known_string_id = 55;
pub const _zend_known_string_id_ZEND_STR_TRUE: _zend_known_string_id = 56;
pub const _zend_known_string_id_ZEND_STR_NULL_LOWERCASE: _zend_known_string_id = 57;
pub const _zend_known_string_id_ZEND_STR_MIXED: _zend_known_string_id = 58;
pub const _zend_known_string_id_ZEND_STR_TRAVERSABLE: _zend_known_string_id = 59;
pub const _zend_known_string_id_ZEND_STR_SLEEP: _zend_known_string_id = 60;
pub const _zend_known_string_id_ZEND_STR_WAKEUP: _zend_known_string_id = 61;
pub const _zend_known_string_id_ZEND_STR_CASES: _zend_known_string_id = 62;
pub const _zend_known_string_id_ZEND_STR_FROM: _zend_known_string_id = 63;
pub const _zend_known_string_id_ZEND_STR_TRYFROM: _zend_known_string_id = 64;
pub const _zend_known_string_id_ZEND_STR_TRYFROM_LOWERCASE: _zend_known_string_id = 65;
pub const _zend_known_string_id_ZEND_STR_AUTOGLOBAL_SERVER: _zend_known_string_id = 66;
pub const _zend_known_string_id_ZEND_STR_AUTOGLOBAL_ENV: _zend_known_string_id = 67;
pub const _zend_known_string_id_ZEND_STR_AUTOGLOBAL_REQUEST: _zend_known_string_id = 68;
pub const _zend_known_string_id_ZEND_STR_COUNT: _zend_known_string_id = 69;
pub const _zend_known_string_id_ZEND_STR_SENSITIVEPARAMETER: _zend_known_string_id = 70;
pub const _zend_known_string_id_ZEND_STR_CONST_EXPR_PLACEHOLDER: _zend_known_string_id = 71;
pub const _zend_known_string_id_ZEND_STR_LAST_KNOWN: _zend_known_string_id = 72;
pub type _zend_known_string_id = ::std::os::raw::c_uint;
pub use self::_zend_known_string_id as zend_known_string_id;
extern "C" {
    pub fn zend_sort(
        base: *mut ::std::os::raw::c_void,
        nmemb: usize,
        siz: usize,
        cmp: compare_func_t,
        swp: swap_func_t,
    );
}
extern "C" {
    pub fn zend_insert_sort(
        base: *mut ::std::os::raw::c_void,
        nmemb: usize,
        siz: usize,
        cmp: compare_func_t,
        swp: swap_func_t,
    );
}
extern "C" {
    pub static zend_empty_array: HashTable;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_hash_key {
    pub h: zend_ulong,
    pub key: *mut zend_string,
}
#[test]
fn bindgen_test_layout__zend_hash_key() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_hash_key> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_hash_key>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_hash_key)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_hash_key>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_hash_key)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_hash_key), "::", stringify!(h)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_hash_key), "::", stringify!(key)),
    );
}
pub type zend_hash_key = _zend_hash_key;
pub type merge_checker_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        target_ht: *mut HashTable,
        source_data: *mut zval,
        hash_key: *mut zend_hash_key,
        pParam: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
extern "C" {
    pub fn _zend_hash_init(
        ht: *mut HashTable,
        nSize: u32,
        pDestructor: dtor_func_t,
        persistent: bool,
    );
}
extern "C" {
    pub fn zend_hash_destroy(ht: *mut HashTable);
}
extern "C" {
    pub fn zend_hash_clean(ht: *mut HashTable);
}
extern "C" {
    pub fn zend_hash_real_init(ht: *mut HashTable, packed: bool);
}
extern "C" {
    pub fn zend_hash_real_init_packed(ht: *mut HashTable);
}
extern "C" {
    pub fn zend_hash_real_init_mixed(ht: *mut HashTable);
}
extern "C" {
    pub fn zend_hash_packed_to_hash(ht: *mut HashTable);
}
extern "C" {
    pub fn zend_hash_to_packed(ht: *mut HashTable);
}
extern "C" {
    pub fn zend_hash_extend(ht: *mut HashTable, nSize: u32, packed: bool);
}
extern "C" {
    pub fn zend_hash_discard(ht: *mut HashTable, nNumUsed: u32);
}
extern "C" {
    pub fn zend_hash_packed_grow(ht: *mut HashTable);
}
extern "C" {
    pub fn zend_hash_add_or_update(
        ht: *mut HashTable,
        key: *mut zend_string,
        pData: *mut zval,
        flag: u32,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_update(
        ht: *mut HashTable,
        key: *mut zend_string,
        pData: *mut zval,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_update_ind(
        ht: *mut HashTable,
        key: *mut zend_string,
        pData: *mut zval,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_add(
        ht: *mut HashTable,
        key: *mut zend_string,
        pData: *mut zval,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_add_new(
        ht: *mut HashTable,
        key: *mut zend_string,
        pData: *mut zval,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_str_add_or_update(
        ht: *mut HashTable,
        key: *const ::std::os::raw::c_char,
        len: usize,
        pData: *mut zval,
        flag: u32,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_str_update(
        ht: *mut HashTable,
        key: *const ::std::os::raw::c_char,
        len: usize,
        pData: *mut zval,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_str_update_ind(
        ht: *mut HashTable,
        key: *const ::std::os::raw::c_char,
        len: usize,
        pData: *mut zval,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_str_add(
        ht: *mut HashTable,
        key: *const ::std::os::raw::c_char,
        len: usize,
        pData: *mut zval,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_str_add_new(
        ht: *mut HashTable,
        key: *const ::std::os::raw::c_char,
        len: usize,
        pData: *mut zval,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_index_add_or_update(
        ht: *mut HashTable,
        h: zend_ulong,
        pData: *mut zval,
        flag: u32,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_index_add(
        ht: *mut HashTable,
        h: zend_ulong,
        pData: *mut zval,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_index_add_new(
        ht: *mut HashTable,
        h: zend_ulong,
        pData: *mut zval,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_index_update(
        ht: *mut HashTable,
        h: zend_ulong,
        pData: *mut zval,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_next_index_insert(
        ht: *mut HashTable,
        pData: *mut zval,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_next_index_insert_new(
        ht: *mut HashTable,
        pData: *mut zval,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_index_add_empty_element(
        ht: *mut HashTable,
        h: zend_ulong,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_add_empty_element(
        ht: *mut HashTable,
        key: *mut zend_string,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_str_add_empty_element(
        ht: *mut HashTable,
        key: *const ::std::os::raw::c_char,
        len: usize,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_set_bucket_key(
        ht: *mut HashTable,
        p: *mut Bucket,
        key: *mut zend_string,
    ) -> *mut zval;
}
pub type apply_func_t = ::std::option::Option<
    unsafe extern "C" fn(pDest: *mut zval) -> ::std::os::raw::c_int,
>;
pub type apply_func_arg_t = ::std::option::Option<
    unsafe extern "C" fn(
        pDest: *mut zval,
        argument: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type apply_func_args_t = ::std::option::Option<
    unsafe extern "C" fn(
        pDest: *mut zval,
        num_args: ::std::os::raw::c_int,
        args: va_list,
        hash_key: *mut zend_hash_key,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn zend_hash_graceful_destroy(ht: *mut HashTable);
}
extern "C" {
    pub fn zend_hash_graceful_reverse_destroy(ht: *mut HashTable);
}
extern "C" {
    pub fn zend_hash_apply(ht: *mut HashTable, apply_func: apply_func_t);
}
extern "C" {
    pub fn zend_hash_apply_with_argument(
        ht: *mut HashTable,
        apply_func: apply_func_arg_t,
        arg1: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn zend_hash_apply_with_arguments(
        ht: *mut HashTable,
        apply_func: apply_func_args_t,
        arg1: ::std::os::raw::c_int,
        ...
    );
}
extern "C" {
    pub fn zend_hash_reverse_apply(ht: *mut HashTable, apply_func: apply_func_t);
}
extern "C" {
    pub fn zend_hash_del(ht: *mut HashTable, key: *mut zend_string) -> zend_result;
}
extern "C" {
    pub fn zend_hash_del_ind(ht: *mut HashTable, key: *mut zend_string) -> zend_result;
}
extern "C" {
    pub fn zend_hash_str_del(
        ht: *mut HashTable,
        key: *const ::std::os::raw::c_char,
        len: usize,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_hash_str_del_ind(
        ht: *mut HashTable,
        key: *const ::std::os::raw::c_char,
        len: usize,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_hash_index_del(ht: *mut HashTable, h: zend_ulong) -> zend_result;
}
extern "C" {
    pub fn zend_hash_del_bucket(ht: *mut HashTable, p: *mut Bucket);
}
extern "C" {
    pub fn zend_hash_packed_del_val(ht: *mut HashTable, zv: *mut zval);
}
extern "C" {
    pub fn zend_hash_find(ht: *const HashTable, key: *mut zend_string) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_str_find(
        ht: *const HashTable,
        key: *const ::std::os::raw::c_char,
        len: usize,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_index_find(ht: *const HashTable, h: zend_ulong) -> *mut zval;
}
extern "C" {
    pub fn _zend_hash_index_find(ht: *const HashTable, h: zend_ulong) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_find_known_hash(
        ht: *const HashTable,
        key: *const zend_string,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_lookup(ht: *mut HashTable, key: *mut zend_string) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_index_lookup(ht: *mut HashTable, h: zend_ulong) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_get_current_pos(ht: *const HashTable) -> HashPosition;
}
extern "C" {
    pub fn zend_hash_move_forward_ex(
        ht: *mut HashTable,
        pos: *mut HashPosition,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_hash_move_backwards_ex(
        ht: *mut HashTable,
        pos: *mut HashPosition,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_hash_get_current_key_ex(
        ht: *const HashTable,
        str_index: *mut *mut zend_string,
        num_index: *mut zend_ulong,
        pos: *const HashPosition,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_hash_get_current_key_zval_ex(
        ht: *const HashTable,
        key: *mut zval,
        pos: *const HashPosition,
    );
}
extern "C" {
    pub fn zend_hash_get_current_key_type_ex(
        ht: *mut HashTable,
        pos: *mut HashPosition,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_hash_get_current_data_ex(
        ht: *mut HashTable,
        pos: *mut HashPosition,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_internal_pointer_reset_ex(
        ht: *mut HashTable,
        pos: *mut HashPosition,
    );
}
extern "C" {
    pub fn zend_hash_internal_pointer_end_ex(ht: *mut HashTable, pos: *mut HashPosition);
}
extern "C" {
    pub fn zend_hash_copy(
        target: *mut HashTable,
        source: *mut HashTable,
        pCopyConstructor: copy_ctor_func_t,
    );
}
extern "C" {
    pub fn zend_hash_merge(
        target: *mut HashTable,
        source: *mut HashTable,
        pCopyConstructor: copy_ctor_func_t,
        overwrite: bool,
    );
}
extern "C" {
    pub fn zend_hash_merge_ex(
        target: *mut HashTable,
        source: *mut HashTable,
        pCopyConstructor: copy_ctor_func_t,
        pMergeSource: merge_checker_func_t,
        pParam: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn zend_hash_bucket_swap(p: *mut Bucket, q: *mut Bucket);
}
extern "C" {
    pub fn zend_hash_bucket_renum_swap(p: *mut Bucket, q: *mut Bucket);
}
extern "C" {
    pub fn zend_hash_bucket_packed_swap(p: *mut Bucket, q: *mut Bucket);
}
pub type bucket_compare_func_t = ::std::option::Option<
    unsafe extern "C" fn(a: *mut Bucket, b: *mut Bucket) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn zend_hash_compare(
        ht1: *mut HashTable,
        ht2: *mut HashTable,
        compar: compare_func_t,
        ordered: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_hash_sort_ex(
        ht: *mut HashTable,
        sort_func: sort_func_t,
        compare_func: bucket_compare_func_t,
        renumber: bool,
    );
}
extern "C" {
    pub fn zend_hash_minmax(
        ht: *const HashTable,
        compar: compare_func_t,
        flag: u32,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_hash_rehash(ht: *mut HashTable);
}
extern "C" {
    pub fn _zend_new_array_0() -> *mut HashTable;
}
extern "C" {
    pub fn _zend_new_array(size: u32) -> *mut HashTable;
}
extern "C" {
    pub fn zend_new_pair(val1: *mut zval, val2: *mut zval) -> *mut HashTable;
}
extern "C" {
    pub fn zend_array_count(ht: *mut HashTable) -> u32;
}
extern "C" {
    pub fn zend_array_dup(source: *mut HashTable) -> *mut HashTable;
}
extern "C" {
    pub fn zend_array_destroy(ht: *mut HashTable);
}
extern "C" {
    pub fn zend_array_to_list(source: *mut HashTable) -> *mut HashTable;
}
extern "C" {
    pub fn zend_symtable_clean(ht: *mut HashTable);
}
extern "C" {
    pub fn zend_symtable_to_proptable(ht: *mut HashTable) -> *mut HashTable;
}
extern "C" {
    pub fn zend_proptable_to_symtable(
        ht: *mut HashTable,
        always_duplicate: bool,
    ) -> *mut HashTable;
}
extern "C" {
    pub fn _zend_handle_numeric_str_ex(
        key: *const ::std::os::raw::c_char,
        length: usize,
        idx: *mut zend_ulong,
    ) -> bool;
}
extern "C" {
    pub fn zend_hash_iterator_add(ht: *mut HashTable, pos: HashPosition) -> u32;
}
extern "C" {
    pub fn zend_hash_iterator_pos(idx: u32, ht: *mut HashTable) -> HashPosition;
}
extern "C" {
    pub fn zend_hash_iterator_pos_ex(idx: u32, array: *mut zval) -> HashPosition;
}
extern "C" {
    pub fn zend_hash_iterator_del(idx: u32);
}
extern "C" {
    pub fn zend_hash_iterators_lower_pos(
        ht: *mut HashTable,
        start: HashPosition,
    ) -> HashPosition;
}
extern "C" {
    pub fn _zend_hash_iterators_update(
        ht: *mut HashTable,
        from: HashPosition,
        to: HashPosition,
    );
}
extern "C" {
    pub fn zend_hash_iterators_advance(ht: *mut HashTable, step: HashPosition);
}
extern "C" {
    pub fn zend_hash_str_find_ptr_lc(
        ht: *const HashTable,
        str_: *const ::std::os::raw::c_char,
        len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zend_hash_find_ptr_lc(
        ht: *const HashTable,
        key: *mut zend_string,
    ) -> *mut ::std::os::raw::c_void;
}
pub const _zend_ast_kind_ZEND_AST_ZVAL: _zend_ast_kind = 64;
pub const _zend_ast_kind_ZEND_AST_CONSTANT: _zend_ast_kind = 65;
pub const _zend_ast_kind_ZEND_AST_ZNODE: _zend_ast_kind = 66;
pub const _zend_ast_kind_ZEND_AST_FUNC_DECL: _zend_ast_kind = 67;
pub const _zend_ast_kind_ZEND_AST_CLOSURE: _zend_ast_kind = 68;
pub const _zend_ast_kind_ZEND_AST_METHOD: _zend_ast_kind = 69;
pub const _zend_ast_kind_ZEND_AST_CLASS: _zend_ast_kind = 70;
pub const _zend_ast_kind_ZEND_AST_ARROW_FUNC: _zend_ast_kind = 71;
pub const _zend_ast_kind_ZEND_AST_ARG_LIST: _zend_ast_kind = 128;
pub const _zend_ast_kind_ZEND_AST_ARRAY: _zend_ast_kind = 129;
pub const _zend_ast_kind_ZEND_AST_ENCAPS_LIST: _zend_ast_kind = 130;
pub const _zend_ast_kind_ZEND_AST_EXPR_LIST: _zend_ast_kind = 131;
pub const _zend_ast_kind_ZEND_AST_STMT_LIST: _zend_ast_kind = 132;
pub const _zend_ast_kind_ZEND_AST_IF: _zend_ast_kind = 133;
pub const _zend_ast_kind_ZEND_AST_SWITCH_LIST: _zend_ast_kind = 134;
pub const _zend_ast_kind_ZEND_AST_CATCH_LIST: _zend_ast_kind = 135;
pub const _zend_ast_kind_ZEND_AST_PARAM_LIST: _zend_ast_kind = 136;
pub const _zend_ast_kind_ZEND_AST_CLOSURE_USES: _zend_ast_kind = 137;
pub const _zend_ast_kind_ZEND_AST_PROP_DECL: _zend_ast_kind = 138;
pub const _zend_ast_kind_ZEND_AST_CONST_DECL: _zend_ast_kind = 139;
pub const _zend_ast_kind_ZEND_AST_CLASS_CONST_DECL: _zend_ast_kind = 140;
pub const _zend_ast_kind_ZEND_AST_NAME_LIST: _zend_ast_kind = 141;
pub const _zend_ast_kind_ZEND_AST_TRAIT_ADAPTATIONS: _zend_ast_kind = 142;
pub const _zend_ast_kind_ZEND_AST_USE: _zend_ast_kind = 143;
pub const _zend_ast_kind_ZEND_AST_TYPE_UNION: _zend_ast_kind = 144;
pub const _zend_ast_kind_ZEND_AST_TYPE_INTERSECTION: _zend_ast_kind = 145;
pub const _zend_ast_kind_ZEND_AST_ATTRIBUTE_LIST: _zend_ast_kind = 146;
pub const _zend_ast_kind_ZEND_AST_ATTRIBUTE_GROUP: _zend_ast_kind = 147;
pub const _zend_ast_kind_ZEND_AST_MATCH_ARM_LIST: _zend_ast_kind = 148;
pub const _zend_ast_kind_ZEND_AST_MODIFIER_LIST: _zend_ast_kind = 149;
pub const _zend_ast_kind_ZEND_AST_MAGIC_CONST: _zend_ast_kind = 0;
pub const _zend_ast_kind_ZEND_AST_TYPE: _zend_ast_kind = 1;
pub const _zend_ast_kind_ZEND_AST_CONSTANT_CLASS: _zend_ast_kind = 2;
pub const _zend_ast_kind_ZEND_AST_CALLABLE_CONVERT: _zend_ast_kind = 3;
pub const _zend_ast_kind_ZEND_AST_VAR: _zend_ast_kind = 256;
pub const _zend_ast_kind_ZEND_AST_CONST: _zend_ast_kind = 257;
pub const _zend_ast_kind_ZEND_AST_UNPACK: _zend_ast_kind = 258;
pub const _zend_ast_kind_ZEND_AST_UNARY_PLUS: _zend_ast_kind = 259;
pub const _zend_ast_kind_ZEND_AST_UNARY_MINUS: _zend_ast_kind = 260;
pub const _zend_ast_kind_ZEND_AST_CAST: _zend_ast_kind = 261;
pub const _zend_ast_kind_ZEND_AST_EMPTY: _zend_ast_kind = 262;
pub const _zend_ast_kind_ZEND_AST_ISSET: _zend_ast_kind = 263;
pub const _zend_ast_kind_ZEND_AST_SILENCE: _zend_ast_kind = 264;
pub const _zend_ast_kind_ZEND_AST_SHELL_EXEC: _zend_ast_kind = 265;
pub const _zend_ast_kind_ZEND_AST_CLONE: _zend_ast_kind = 266;
pub const _zend_ast_kind_ZEND_AST_EXIT: _zend_ast_kind = 267;
pub const _zend_ast_kind_ZEND_AST_PRINT: _zend_ast_kind = 268;
pub const _zend_ast_kind_ZEND_AST_INCLUDE_OR_EVAL: _zend_ast_kind = 269;
pub const _zend_ast_kind_ZEND_AST_UNARY_OP: _zend_ast_kind = 270;
pub const _zend_ast_kind_ZEND_AST_PRE_INC: _zend_ast_kind = 271;
pub const _zend_ast_kind_ZEND_AST_PRE_DEC: _zend_ast_kind = 272;
pub const _zend_ast_kind_ZEND_AST_POST_INC: _zend_ast_kind = 273;
pub const _zend_ast_kind_ZEND_AST_POST_DEC: _zend_ast_kind = 274;
pub const _zend_ast_kind_ZEND_AST_YIELD_FROM: _zend_ast_kind = 275;
pub const _zend_ast_kind_ZEND_AST_CLASS_NAME: _zend_ast_kind = 276;
pub const _zend_ast_kind_ZEND_AST_GLOBAL: _zend_ast_kind = 277;
pub const _zend_ast_kind_ZEND_AST_UNSET: _zend_ast_kind = 278;
pub const _zend_ast_kind_ZEND_AST_RETURN: _zend_ast_kind = 279;
pub const _zend_ast_kind_ZEND_AST_LABEL: _zend_ast_kind = 280;
pub const _zend_ast_kind_ZEND_AST_REF: _zend_ast_kind = 281;
pub const _zend_ast_kind_ZEND_AST_HALT_COMPILER: _zend_ast_kind = 282;
pub const _zend_ast_kind_ZEND_AST_ECHO: _zend_ast_kind = 283;
pub const _zend_ast_kind_ZEND_AST_THROW: _zend_ast_kind = 284;
pub const _zend_ast_kind_ZEND_AST_GOTO: _zend_ast_kind = 285;
pub const _zend_ast_kind_ZEND_AST_BREAK: _zend_ast_kind = 286;
pub const _zend_ast_kind_ZEND_AST_CONTINUE: _zend_ast_kind = 287;
pub const _zend_ast_kind_ZEND_AST_DIM: _zend_ast_kind = 512;
pub const _zend_ast_kind_ZEND_AST_PROP: _zend_ast_kind = 513;
pub const _zend_ast_kind_ZEND_AST_NULLSAFE_PROP: _zend_ast_kind = 514;
pub const _zend_ast_kind_ZEND_AST_STATIC_PROP: _zend_ast_kind = 515;
pub const _zend_ast_kind_ZEND_AST_CALL: _zend_ast_kind = 516;
pub const _zend_ast_kind_ZEND_AST_CLASS_CONST: _zend_ast_kind = 517;
pub const _zend_ast_kind_ZEND_AST_ASSIGN: _zend_ast_kind = 518;
pub const _zend_ast_kind_ZEND_AST_ASSIGN_REF: _zend_ast_kind = 519;
pub const _zend_ast_kind_ZEND_AST_ASSIGN_OP: _zend_ast_kind = 520;
pub const _zend_ast_kind_ZEND_AST_BINARY_OP: _zend_ast_kind = 521;
pub const _zend_ast_kind_ZEND_AST_GREATER: _zend_ast_kind = 522;
pub const _zend_ast_kind_ZEND_AST_GREATER_EQUAL: _zend_ast_kind = 523;
pub const _zend_ast_kind_ZEND_AST_AND: _zend_ast_kind = 524;
pub const _zend_ast_kind_ZEND_AST_OR: _zend_ast_kind = 525;
pub const _zend_ast_kind_ZEND_AST_ARRAY_ELEM: _zend_ast_kind = 526;
pub const _zend_ast_kind_ZEND_AST_NEW: _zend_ast_kind = 527;
pub const _zend_ast_kind_ZEND_AST_INSTANCEOF: _zend_ast_kind = 528;
pub const _zend_ast_kind_ZEND_AST_YIELD: _zend_ast_kind = 529;
pub const _zend_ast_kind_ZEND_AST_COALESCE: _zend_ast_kind = 530;
pub const _zend_ast_kind_ZEND_AST_ASSIGN_COALESCE: _zend_ast_kind = 531;
pub const _zend_ast_kind_ZEND_AST_STATIC: _zend_ast_kind = 532;
pub const _zend_ast_kind_ZEND_AST_WHILE: _zend_ast_kind = 533;
pub const _zend_ast_kind_ZEND_AST_DO_WHILE: _zend_ast_kind = 534;
pub const _zend_ast_kind_ZEND_AST_IF_ELEM: _zend_ast_kind = 535;
pub const _zend_ast_kind_ZEND_AST_SWITCH: _zend_ast_kind = 536;
pub const _zend_ast_kind_ZEND_AST_SWITCH_CASE: _zend_ast_kind = 537;
pub const _zend_ast_kind_ZEND_AST_DECLARE: _zend_ast_kind = 538;
pub const _zend_ast_kind_ZEND_AST_USE_TRAIT: _zend_ast_kind = 539;
pub const _zend_ast_kind_ZEND_AST_TRAIT_PRECEDENCE: _zend_ast_kind = 540;
pub const _zend_ast_kind_ZEND_AST_METHOD_REFERENCE: _zend_ast_kind = 541;
pub const _zend_ast_kind_ZEND_AST_NAMESPACE: _zend_ast_kind = 542;
pub const _zend_ast_kind_ZEND_AST_USE_ELEM: _zend_ast_kind = 543;
pub const _zend_ast_kind_ZEND_AST_TRAIT_ALIAS: _zend_ast_kind = 544;
pub const _zend_ast_kind_ZEND_AST_GROUP_USE: _zend_ast_kind = 545;
pub const _zend_ast_kind_ZEND_AST_ATTRIBUTE: _zend_ast_kind = 546;
pub const _zend_ast_kind_ZEND_AST_MATCH: _zend_ast_kind = 547;
pub const _zend_ast_kind_ZEND_AST_MATCH_ARM: _zend_ast_kind = 548;
pub const _zend_ast_kind_ZEND_AST_NAMED_ARG: _zend_ast_kind = 549;
pub const _zend_ast_kind_ZEND_AST_METHOD_CALL: _zend_ast_kind = 768;
pub const _zend_ast_kind_ZEND_AST_NULLSAFE_METHOD_CALL: _zend_ast_kind = 769;
pub const _zend_ast_kind_ZEND_AST_STATIC_CALL: _zend_ast_kind = 770;
pub const _zend_ast_kind_ZEND_AST_CONDITIONAL: _zend_ast_kind = 771;
pub const _zend_ast_kind_ZEND_AST_TRY: _zend_ast_kind = 772;
pub const _zend_ast_kind_ZEND_AST_CATCH: _zend_ast_kind = 773;
pub const _zend_ast_kind_ZEND_AST_PROP_GROUP: _zend_ast_kind = 774;
pub const _zend_ast_kind_ZEND_AST_PROP_ELEM: _zend_ast_kind = 775;
pub const _zend_ast_kind_ZEND_AST_CONST_ELEM: _zend_ast_kind = 776;
pub const _zend_ast_kind_ZEND_AST_CLASS_CONST_GROUP: _zend_ast_kind = 777;
pub const _zend_ast_kind_ZEND_AST_CONST_ENUM_INIT: _zend_ast_kind = 778;
pub const _zend_ast_kind_ZEND_AST_FOR: _zend_ast_kind = 1024;
pub const _zend_ast_kind_ZEND_AST_FOREACH: _zend_ast_kind = 1025;
pub const _zend_ast_kind_ZEND_AST_ENUM_CASE: _zend_ast_kind = 1026;
pub const _zend_ast_kind_ZEND_AST_PARAM: _zend_ast_kind = 1280;
pub type _zend_ast_kind = ::std::os::raw::c_uint;
pub type zend_ast_kind = u16;
pub type zend_ast_attr = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_ast {
    pub kind: zend_ast_kind,
    pub attr: zend_ast_attr,
    pub lineno: u32,
    pub child: [*mut zend_ast; 1usize],
}
#[test]
fn bindgen_test_layout__zend_ast() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_ast> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_ast>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_ast)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ast>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ast)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_ast), "::", stringify!(kind)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(_zend_ast), "::", stringify!(attr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineno) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(_zend_ast), "::", stringify!(lineno)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_ast), "::", stringify!(child)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_ast_list {
    pub kind: zend_ast_kind,
    pub attr: zend_ast_attr,
    pub lineno: u32,
    pub children: u32,
    pub child: [*mut zend_ast; 1usize],
}
#[test]
fn bindgen_test_layout__zend_ast_list() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_ast_list> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_ast_list>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_ast_list)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ast_list>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ast_list)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_ast_list), "::", stringify!(kind)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(_zend_ast_list), "::", stringify!(attr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineno) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_list),
            "::",
            stringify!(lineno),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).children) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_list),
            "::",
            stringify!(children),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_zend_ast_list), "::", stringify!(child)),
    );
}
pub type zend_ast_list = _zend_ast_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_ast_zval {
    pub kind: zend_ast_kind,
    pub attr: zend_ast_attr,
    pub val: zval,
}
#[test]
fn bindgen_test_layout__zend_ast_zval() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_ast_zval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_ast_zval>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_ast_zval)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ast_zval>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ast_zval)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_ast_zval), "::", stringify!(kind)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(_zend_ast_zval), "::", stringify!(attr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_ast_zval), "::", stringify!(val)),
    );
}
pub type zend_ast_zval = _zend_ast_zval;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_ast_decl {
    pub kind: zend_ast_kind,
    pub attr: zend_ast_attr,
    pub start_lineno: u32,
    pub end_lineno: u32,
    pub flags: u32,
    pub doc_comment: *mut zend_string,
    pub name: *mut zend_string,
    pub child: [*mut zend_ast; 5usize],
}
#[test]
fn bindgen_test_layout__zend_ast_decl() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_ast_decl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_ast_decl>(),
        72usize,
        concat!("Size of: ", stringify!(_zend_ast_decl)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ast_decl>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ast_decl)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_ast_decl), "::", stringify!(kind)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(_zend_ast_decl), "::", stringify!(attr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_lineno) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_decl),
            "::",
            stringify!(start_lineno),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_lineno) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_decl),
            "::",
            stringify!(end_lineno),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(_zend_ast_decl), "::", stringify!(flags)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).doc_comment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_decl),
            "::",
            stringify!(doc_comment),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_zend_ast_decl), "::", stringify!(name)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(_zend_ast_decl), "::", stringify!(child)),
    );
}
pub type zend_ast_decl = _zend_ast_decl;
pub type zend_ast_process_t = ::std::option::Option<
    unsafe extern "C" fn(ast: *mut zend_ast),
>;
extern "C" {
    pub static mut zend_ast_process: zend_ast_process_t;
}
extern "C" {
    pub fn zend_ast_create_zval_with_lineno(zv: *mut zval, lineno: u32) -> *mut zend_ast;
}
extern "C" {
    pub fn zend_ast_create_zval_ex(zv: *mut zval, attr: zend_ast_attr) -> *mut zend_ast;
}
extern "C" {
    pub fn zend_ast_create_zval(zv: *mut zval) -> *mut zend_ast;
}
extern "C" {
    pub fn zend_ast_create_zval_from_str(str_: *mut zend_string) -> *mut zend_ast;
}
extern "C" {
    pub fn zend_ast_create_zval_from_long(lval: zend_long) -> *mut zend_ast;
}
extern "C" {
    pub fn zend_ast_create_constant(
        name: *mut zend_string,
        attr: zend_ast_attr,
    ) -> *mut zend_ast;
}
extern "C" {
    pub fn zend_ast_create_class_const_or_name(
        class_name: *mut zend_ast,
        name: *mut zend_ast,
    ) -> *mut zend_ast;
}
extern "C" {
    pub fn zend_ast_create_0(kind: zend_ast_kind) -> *mut zend_ast;
}
extern "C" {
    pub fn zend_ast_create_1(kind: zend_ast_kind, child: *mut zend_ast) -> *mut zend_ast;
}
extern "C" {
    pub fn zend_ast_create_2(
        kind: zend_ast_kind,
        child1: *mut zend_ast,
        child2: *mut zend_ast,
    ) -> *mut zend_ast;
}
extern "C" {
    pub fn zend_ast_create_3(
        kind: zend_ast_kind,
        child1: *mut zend_ast,
        child2: *mut zend_ast,
        child3: *mut zend_ast,
    ) -> *mut zend_ast;
}
extern "C" {
    pub fn zend_ast_create_4(
        kind: zend_ast_kind,
        child1: *mut zend_ast,
        child2: *mut zend_ast,
        child3: *mut zend_ast,
        child4: *mut zend_ast,
    ) -> *mut zend_ast;
}
extern "C" {
    pub fn zend_ast_create_5(
        kind: zend_ast_kind,
        child1: *mut zend_ast,
        child2: *mut zend_ast,
        child3: *mut zend_ast,
        child4: *mut zend_ast,
        child5: *mut zend_ast,
    ) -> *mut zend_ast;
}
extern "C" {
    pub fn zend_ast_create_list_0(kind: zend_ast_kind) -> *mut zend_ast;
}
extern "C" {
    pub fn zend_ast_create_list_1(
        kind: zend_ast_kind,
        child: *mut zend_ast,
    ) -> *mut zend_ast;
}
extern "C" {
    pub fn zend_ast_create_list_2(
        kind: zend_ast_kind,
        child1: *mut zend_ast,
        child2: *mut zend_ast,
    ) -> *mut zend_ast;
}
extern "C" {
    pub fn zend_ast_list_add(list: *mut zend_ast, op: *mut zend_ast) -> *mut zend_ast;
}
extern "C" {
    pub fn zend_ast_create_decl(
        kind: zend_ast_kind,
        flags: u32,
        start_lineno: u32,
        doc_comment: *mut zend_string,
        name: *mut zend_string,
        child0: *mut zend_ast,
        child1: *mut zend_ast,
        child2: *mut zend_ast,
        child3: *mut zend_ast,
        child4: *mut zend_ast,
    ) -> *mut zend_ast;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zend_ast_evaluate_ctx {
    pub had_side_effects: bool,
}
#[test]
fn bindgen_test_layout_zend_ast_evaluate_ctx() {
    const UNINIT: ::std::mem::MaybeUninit<zend_ast_evaluate_ctx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<zend_ast_evaluate_ctx>(),
        1usize,
        concat!("Size of: ", stringify!(zend_ast_evaluate_ctx)),
    );
    assert_eq!(
        ::std::mem::align_of::<zend_ast_evaluate_ctx>(),
        1usize,
        concat!("Alignment of ", stringify!(zend_ast_evaluate_ctx)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).had_side_effects) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zend_ast_evaluate_ctx),
            "::",
            stringify!(had_side_effects),
        ),
    );
}
extern "C" {
    pub fn zend_ast_evaluate(
        result: *mut zval,
        ast: *mut zend_ast,
        scope: *mut zend_class_entry,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_ast_evaluate_ex(
        result: *mut zval,
        ast: *mut zend_ast,
        scope: *mut zend_class_entry,
        short_circuited_ptr: *mut bool,
        ctx: *mut zend_ast_evaluate_ctx,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_ast_export(
        prefix: *const ::std::os::raw::c_char,
        ast: *mut zend_ast,
        suffix: *const ::std::os::raw::c_char,
    ) -> *mut zend_string;
}
extern "C" {
    pub fn zend_ast_copy(ast: *mut zend_ast) -> *mut zend_ast_ref;
}
extern "C" {
    pub fn zend_ast_destroy(ast: *mut zend_ast);
}
extern "C" {
    pub fn zend_ast_ref_destroy(ast: *mut zend_ast_ref);
}
pub type zend_ast_apply_func = ::std::option::Option<
    unsafe extern "C" fn(
        ast_ptr: *mut *mut zend_ast,
        context: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn zend_ast_apply(
        ast: *mut zend_ast,
        fn_: zend_ast_apply_func,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn zend_ast_create_concat_op(
        op0: *mut zend_ast,
        op1: *mut zend_ast,
    ) -> *mut zend_ast;
}
extern "C" {
    pub fn zend_ast_with_attributes(
        ast: *mut zend_ast,
        attr: *mut zend_ast,
    ) -> *mut zend_ast;
}
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn euidaccess(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eaccess(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execveat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn lseek64(
        __fd: ::std::os::raw::c_int,
        __offset: __off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn closefrom(__lowfd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
    ) -> isize;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> isize;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pread64(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
        __offset: __off64_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite64(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __offset: __off64_t,
    ) -> isize;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pipe2(
        __pipedes: *mut ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(
        __buf: *mut ::std::os::raw::c_char,
        __size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_current_dir_name() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(
        __fd: ::std::os::raw::c_int,
        __fd2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup3(
        __fd: ::std::os::raw::c_int,
        __fd2: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvpe(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int) -> !;
}
pub const _PC_LINK_MAX: _bindgen_ty_5 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_5 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_5 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_5 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_5 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_5 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_5 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_5 = 7;
pub const _PC_VDISABLE: _bindgen_ty_5 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_5 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_5 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_5 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_5 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_5 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_5 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_5 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_5 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_5 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_5 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_5 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_5 = 20;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: _bindgen_ty_6 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_6 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_6 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_6 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_6 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_6 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_6 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_6 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_6 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_6 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_6 = 10;
pub const _SC_TIMERS: _bindgen_ty_6 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_6 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_6 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_6 = 14;
pub const _SC_FSYNC: _bindgen_ty_6 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_6 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_6 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_6 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_6 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_6 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_6 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_6 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_6 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_6 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_6 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_6 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_6 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_6 = 28;
pub const _SC_VERSION: _bindgen_ty_6 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_6 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_6 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_6 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_6 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_6 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_6 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_6 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_6 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_6 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_6 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_6 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_6 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_6 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_6 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_6 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_6 = 45;
pub const _SC_2_VERSION: _bindgen_ty_6 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_6 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_6 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_6 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_6 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_6 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_6 = 52;
pub const _SC_PII: _bindgen_ty_6 = 53;
pub const _SC_PII_XTI: _bindgen_ty_6 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_6 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_6 = 56;
pub const _SC_PII_OSI: _bindgen_ty_6 = 57;
pub const _SC_POLL: _bindgen_ty_6 = 58;
pub const _SC_SELECT: _bindgen_ty_6 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_6 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_6 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_6 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_6 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_6 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_6 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_6 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_6 = 66;
pub const _SC_THREADS: _bindgen_ty_6 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_6 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_6 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_6 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_6 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_6 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_6 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_6 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_6 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_6 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_6 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_6 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_6 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_6 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_6 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_6 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_6 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_6 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_6 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_6 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_6 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_6 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_6 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_6 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_6 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_6 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_6 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_6 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_6 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_6 = 96;
pub const _SC_2_UPE: _bindgen_ty_6 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_6 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_6 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_6 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_6 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_6 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_6 = 103;
pub const _SC_INT_MAX: _bindgen_ty_6 = 104;
pub const _SC_INT_MIN: _bindgen_ty_6 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_6 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_6 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_6 = 108;
pub const _SC_NZERO: _bindgen_ty_6 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_6 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_6 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_6 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_6 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_6 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_6 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_6 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_6 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_6 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_6 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_6 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_6 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_6 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_6 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_6 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_6 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_6 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_6 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_6 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_6 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_6 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_6 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_6 = 132;
pub const _SC_BARRIERS: _bindgen_ty_6 = 133;
pub const _SC_BASE: _bindgen_ty_6 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_6 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_6 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_6 = 137;
pub const _SC_CPUTIME: _bindgen_ty_6 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_6 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_6 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_6 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_6 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_6 = 143;
pub const _SC_FIFO: _bindgen_ty_6 = 144;
pub const _SC_PIPE: _bindgen_ty_6 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_6 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_6 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_6 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_6 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_6 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_6 = 151;
pub const _SC_NETWORKING: _bindgen_ty_6 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_6 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_6 = 154;
pub const _SC_REGEXP: _bindgen_ty_6 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_6 = 156;
pub const _SC_SHELL: _bindgen_ty_6 = 157;
pub const _SC_SIGNALS: _bindgen_ty_6 = 158;
pub const _SC_SPAWN: _bindgen_ty_6 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_6 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_6 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_6 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_6 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_6 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_6 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_6 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_6 = 167;
pub const _SC_2_PBS: _bindgen_ty_6 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_6 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_6 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_6 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_6 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_6 = 173;
pub const _SC_STREAMS: _bindgen_ty_6 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_6 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_6 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_6 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_6 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_6 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_6 = 180;
pub const _SC_TRACE: _bindgen_ty_6 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_6 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_6 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_6 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_6 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_6 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_6 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_6 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_6 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_6 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_6 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_6 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_6 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_6 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_6 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_6 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_6 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_6 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_6 = 199;
pub const _SC_IPV6: _bindgen_ty_6 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_6 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_6 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_6 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_6 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_6 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_6 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_6 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_6 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_6 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_6 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_6 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_6 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_6 = 248;
pub const _SC_MINSIGSTKSZ: _bindgen_ty_6 = 249;
pub const _SC_SIGSTKSZ: _bindgen_ty_6 = 250;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const _CS_PATH: _bindgen_ty_7 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_7 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_7 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_7 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_7 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_7 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_7 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_7 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_7 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_7 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_7 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_7 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_7 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_7 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_7 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_7 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_7 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_7 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_7 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_7 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_7 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_7 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_7 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_7 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_7 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_7 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_7 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_7 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_7 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_7 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_7 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_7 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_7 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_7 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_7 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_7 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_7 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_7 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_7 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_7 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_7 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_7 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_7 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_7 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_7 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_7 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_7 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_7 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_7 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_7 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_7 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_7 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_7 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_7 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_7 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_7 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_7 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_7 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_7 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_7 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_7 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_7 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_7 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_7 = 1149;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> usize;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(
        __size: ::std::os::raw::c_int,
        __list: *mut __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn group_member(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getresuid(
        __ruid: *mut __uid_t,
        __euid: *mut __uid_t,
        __suid: *mut __uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getresgid(
        __rgid: *mut __gid_t,
        __egid: *mut __gid_t,
        __sgid: *mut __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setresuid(
        __ruid: __uid_t,
        __euid: __uid_t,
        __suid: __uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setresgid(
        __rgid: __gid_t,
        __egid: __gid_t,
        __sgid: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Fork() -> __pid_t;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(
        __fd: ::std::os::raw::c_int,
        __pgrp_id: __pid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(
        __name: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: usize,
        __offset: usize,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(
        __prompt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syncfs(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate64(
        __file: *const ::std::os::raw::c_char,
        __length: __off64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(
        __fd: ::std::os::raw::c_int,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate64(
        __fd: ::std::os::raw::c_int,
        __length: __off64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf64(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copy_file_range(
        __infd: ::std::os::raw::c_int,
        __pinoff: *mut __off64_t,
        __outfd: ::std::os::raw::c_int,
        __poutoff: *mut __off64_t,
        __length: usize,
        __flags: ::std::os::raw::c_uint,
    ) -> isize;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        __key: *const ::std::os::raw::c_char,
        __salt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        __from: *const ::std::os::raw::c_void,
        __to: *mut ::std::os::raw::c_void,
        __n: isize,
    );
}
extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gettid() -> __pid_t;
}
extern "C" {
    pub fn close_range(
        __fd: ::std::os::raw::c_uint,
        __max_fd: ::std::os::raw::c_uint,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timex {
    pub modes: ::std::os::raw::c_uint,
    pub offset: __syscall_slong_t,
    pub freq: __syscall_slong_t,
    pub maxerror: __syscall_slong_t,
    pub esterror: __syscall_slong_t,
    pub status: ::std::os::raw::c_int,
    pub constant: __syscall_slong_t,
    pub precision: __syscall_slong_t,
    pub tolerance: __syscall_slong_t,
    pub time: timeval,
    pub tick: __syscall_slong_t,
    pub ppsfreq: __syscall_slong_t,
    pub jitter: __syscall_slong_t,
    pub shift: ::std::os::raw::c_int,
    pub stabil: __syscall_slong_t,
    pub jitcnt: __syscall_slong_t,
    pub calcnt: __syscall_slong_t,
    pub errcnt: __syscall_slong_t,
    pub stbcnt: __syscall_slong_t,
    pub tai: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 44usize]>,
}
#[test]
fn bindgen_test_layout_timex() {
    const UNINIT: ::std::mem::MaybeUninit<timex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timex>(),
        208usize,
        concat!("Size of: ", stringify!(timex)),
    );
    assert_eq!(
        ::std::mem::align_of::<timex>(),
        8usize,
        concat!("Alignment of ", stringify!(timex)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modes) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(timex), "::", stringify!(modes)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(timex), "::", stringify!(offset)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(timex), "::", stringify!(freq)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxerror) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(timex), "::", stringify!(maxerror)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).esterror) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(timex), "::", stringify!(esterror)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(timex), "::", stringify!(status)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constant) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(timex), "::", stringify!(constant)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).precision) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(timex), "::", stringify!(precision)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tolerance) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(timex), "::", stringify!(tolerance)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(timex), "::", stringify!(time)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tick) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(timex), "::", stringify!(tick)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppsfreq) as usize - ptr as usize },
        96usize,
        concat!("Offset of field: ", stringify!(timex), "::", stringify!(ppsfreq)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jitter) as usize - ptr as usize },
        104usize,
        concat!("Offset of field: ", stringify!(timex), "::", stringify!(jitter)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shift) as usize - ptr as usize },
        112usize,
        concat!("Offset of field: ", stringify!(timex), "::", stringify!(shift)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stabil) as usize - ptr as usize },
        120usize,
        concat!("Offset of field: ", stringify!(timex), "::", stringify!(stabil)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jitcnt) as usize - ptr as usize },
        128usize,
        concat!("Offset of field: ", stringify!(timex), "::", stringify!(jitcnt)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).calcnt) as usize - ptr as usize },
        136usize,
        concat!("Offset of field: ", stringify!(timex), "::", stringify!(calcnt)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errcnt) as usize - ptr as usize },
        144usize,
        concat!("Offset of field: ", stringify!(timex), "::", stringify!(errcnt)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stbcnt) as usize - ptr as usize },
        152usize,
        concat!("Offset of field: ", stringify!(timex), "::", stringify!(stbcnt)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tai) as usize - ptr as usize },
        160usize,
        concat!("Offset of field: ", stringify!(timex), "::", stringify!(tai)),
    );
}
extern "C" {
    pub fn clock_adjtime(
        __clock_id: __clockid_t,
        __utx: *mut timex,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    const UNINIT: ::std::mem::MaybeUninit<tm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm)),
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_sec) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_sec)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_min) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_min)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_hour) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_hour)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mday) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_mday)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mon) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_mon)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_year) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_year)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_wday) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_wday)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_yday) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_yday)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_isdst) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_isdst)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_gmtoff) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_gmtoff)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_zone) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_zone)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    const UNINIT: ::std::mem::MaybeUninit<itimerspec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec)),
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(itimerspec), "::", stringify!(it_value)),
    );
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strptime(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strptime_l(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
        __loc: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(
        __clock_id: clockid_t,
        __res: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(
        __clock_id: clockid_t,
        __tp: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(
        __clock_id: clockid_t,
        __tp: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(
        __pid: pid_t,
        __clock_id: *mut clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(
        __timerid: timer_t,
        __value: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_getres(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdate(__string: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn getdate_r(
        __string: *const ::std::os::raw::c_char,
        __resbufp: *mut tm,
    ) -> ::std::os::raw::c_int;
}
pub type zend_hrtime_t = u64;
extern "C" {
    pub fn zend_startup_hrtime();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_gc_status {
    pub active: bool,
    pub gc_protected: bool,
    pub full: bool,
    pub runs: u32,
    pub collected: u32,
    pub threshold: u32,
    pub buf_size: u32,
    pub num_roots: u32,
    pub application_time: zend_hrtime_t,
    pub collector_time: zend_hrtime_t,
    pub dtor_time: zend_hrtime_t,
    pub free_time: zend_hrtime_t,
}
#[test]
fn bindgen_test_layout__zend_gc_status() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_gc_status> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_gc_status>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_gc_status)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_gc_status>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_gc_status)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_status),
            "::",
            stringify!(active),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_protected) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_status),
            "::",
            stringify!(gc_protected),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(_zend_gc_status), "::", stringify!(full)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).runs) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(_zend_gc_status), "::", stringify!(runs)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).collected) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_status),
            "::",
            stringify!(collected),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threshold) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_status),
            "::",
            stringify!(threshold),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_status),
            "::",
            stringify!(buf_size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_roots) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_status),
            "::",
            stringify!(num_roots),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).application_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_status),
            "::",
            stringify!(application_time),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).collector_time) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_status),
            "::",
            stringify!(collector_time),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dtor_time) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_status),
            "::",
            stringify!(dtor_time),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_time) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_gc_status),
            "::",
            stringify!(free_time),
        ),
    );
}
pub type zend_gc_status = _zend_gc_status;
extern "C" {
    pub static mut gc_collect_cycles: ::std::option::Option<
        unsafe extern "C" fn() -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub fn gc_possible_root(ref_: *mut zend_refcounted);
}
extern "C" {
    pub fn gc_remove_from_buffer(ref_: *mut zend_refcounted);
}
extern "C" {
    pub fn gc_enable(enable: bool) -> bool;
}
extern "C" {
    pub fn gc_enabled() -> bool;
}
extern "C" {
    pub fn gc_protect(protect: bool) -> bool;
}
extern "C" {
    pub fn gc_protected() -> bool;
}
extern "C" {
    pub fn zend_gc_collect_cycles() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_gc_get_status(status: *mut zend_gc_status);
}
extern "C" {
    pub fn gc_globals_ctor();
}
extern "C" {
    pub fn gc_globals_dtor();
}
extern "C" {
    pub fn gc_reset();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zend_get_gc_buffer {
    pub cur: *mut zval,
    pub end: *mut zval,
    pub start: *mut zval,
}
#[test]
fn bindgen_test_layout_zend_get_gc_buffer() {
    const UNINIT: ::std::mem::MaybeUninit<zend_get_gc_buffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<zend_get_gc_buffer>(),
        24usize,
        concat!("Size of: ", stringify!(zend_get_gc_buffer)),
    );
    assert_eq!(
        ::std::mem::align_of::<zend_get_gc_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(zend_get_gc_buffer)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zend_get_gc_buffer),
            "::",
            stringify!(cur),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zend_get_gc_buffer),
            "::",
            stringify!(end),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(zend_get_gc_buffer),
            "::",
            stringify!(start),
        ),
    );
}
extern "C" {
    pub fn zend_get_gc_buffer_create() -> *mut zend_get_gc_buffer;
}
extern "C" {
    pub fn zend_get_gc_buffer_grow(gc_buffer: *mut zend_get_gc_buffer);
}
extern "C" {
    pub fn rc_dtor_func(p: *mut zend_refcounted);
}
extern "C" {
    pub fn zval_copy_ctor_func(zvalue: *mut zval);
}
extern "C" {
    pub fn zval_ptr_dtor(zval_ptr: *mut zval);
}
extern "C" {
    pub fn zval_internal_ptr_dtor(zvalue: *mut zval);
}
extern "C" {
    pub fn zval_add_ref(p: *mut zval);
}
pub type zend_object_iterator = _zend_object_iterator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_object_iterator_funcs {
    pub dtor: ::std::option::Option<
        unsafe extern "C" fn(iter: *mut zend_object_iterator),
    >,
    pub valid: ::std::option::Option<
        unsafe extern "C" fn(iter: *mut zend_object_iterator) -> ::std::os::raw::c_int,
    >,
    pub get_current_data: ::std::option::Option<
        unsafe extern "C" fn(iter: *mut zend_object_iterator) -> *mut zval,
    >,
    pub get_current_key: ::std::option::Option<
        unsafe extern "C" fn(iter: *mut zend_object_iterator, key: *mut zval),
    >,
    pub move_forward: ::std::option::Option<
        unsafe extern "C" fn(iter: *mut zend_object_iterator),
    >,
    pub rewind: ::std::option::Option<
        unsafe extern "C" fn(iter: *mut zend_object_iterator),
    >,
    pub invalidate_current: ::std::option::Option<
        unsafe extern "C" fn(iter: *mut zend_object_iterator),
    >,
    pub get_gc: ::std::option::Option<
        unsafe extern "C" fn(
            iter: *mut zend_object_iterator,
            table: *mut *mut zval,
            n: *mut ::std::os::raw::c_int,
        ) -> *mut HashTable,
    >,
}
#[test]
fn bindgen_test_layout__zend_object_iterator_funcs() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_object_iterator_funcs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_object_iterator_funcs>(),
        64usize,
        concat!("Size of: ", stringify!(_zend_object_iterator_funcs)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_object_iterator_funcs>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_object_iterator_funcs)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dtor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(dtor),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(valid),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_current_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(get_current_data),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_current_key) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(get_current_key),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).move_forward) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(move_forward),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rewind) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(rewind),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).invalidate_current) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(invalidate_current),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_gc) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(get_gc),
        ),
    );
}
pub type zend_object_iterator_funcs = _zend_object_iterator_funcs;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_object_iterator {
    pub std: zend_object,
    pub data: zval,
    pub funcs: *const zend_object_iterator_funcs,
    pub index: zend_ulong,
}
#[test]
fn bindgen_test_layout__zend_object_iterator() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_object_iterator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_object_iterator>(),
        88usize,
        concat!("Size of: ", stringify!(_zend_object_iterator)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_object_iterator>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_object_iterator)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).std) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator),
            "::",
            stringify!(std),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator),
            "::",
            stringify!(data),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).funcs) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator),
            "::",
            stringify!(funcs),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator),
            "::",
            stringify!(index),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_iterator_funcs {
    pub zf_new_iterator: *mut zend_function,
    pub zf_valid: *mut zend_function,
    pub zf_current: *mut zend_function,
    pub zf_key: *mut zend_function,
    pub zf_next: *mut zend_function,
    pub zf_rewind: *mut zend_function,
}
#[test]
fn bindgen_test_layout__zend_class_iterator_funcs() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_class_iterator_funcs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_iterator_funcs>(),
        48usize,
        concat!("Size of: ", stringify!(_zend_class_iterator_funcs)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_iterator_funcs>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_iterator_funcs)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zf_new_iterator) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_new_iterator),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zf_valid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_valid),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zf_current) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_current),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zf_key) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_key),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zf_next) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_next),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zf_rewind) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_rewind),
        ),
    );
}
pub type zend_class_iterator_funcs = _zend_class_iterator_funcs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_arrayaccess_funcs {
    pub zf_offsetget: *mut zend_function,
    pub zf_offsetexists: *mut zend_function,
    pub zf_offsetset: *mut zend_function,
    pub zf_offsetunset: *mut zend_function,
}
#[test]
fn bindgen_test_layout__zend_class_arrayaccess_funcs() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_class_arrayaccess_funcs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_arrayaccess_funcs>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_class_arrayaccess_funcs)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_arrayaccess_funcs>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_arrayaccess_funcs)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zf_offsetget) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_arrayaccess_funcs),
            "::",
            stringify!(zf_offsetget),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zf_offsetexists) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_arrayaccess_funcs),
            "::",
            stringify!(zf_offsetexists),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zf_offsetset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_arrayaccess_funcs),
            "::",
            stringify!(zf_offsetset),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zf_offsetunset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_arrayaccess_funcs),
            "::",
            stringify!(zf_offsetunset),
        ),
    );
}
pub type zend_class_arrayaccess_funcs = _zend_class_arrayaccess_funcs;
extern "C" {
    pub fn zend_iterator_unwrap(array_ptr: *mut zval) -> *mut zend_object_iterator;
}
extern "C" {
    pub fn zend_iterator_init(iter: *mut zend_object_iterator);
}
extern "C" {
    pub fn zend_iterator_dtor(iter: *mut zend_object_iterator);
}
extern "C" {
    pub fn zend_register_iterator_wrapper();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_mode: __mode_t,
    pub st_nlink: __nlink_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub st_rdev: __dev_t,
    pub __pad1: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub __pad2: ::std::os::raw::c_int,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout_stat() {
    const UNINIT: ::std::mem::MaybeUninit<stat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        128usize,
        concat!("Size of: ", stringify!(stat)),
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(stat), "::", stringify!(st_dev)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(stat), "::", stringify!(st_ino)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(stat), "::", stringify!(st_mode)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(stat), "::", stringify!(st_nlink)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(stat), "::", stringify!(st_uid)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(stat), "::", stringify!(st_gid)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(stat), "::", stringify!(st_rdev)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(stat), "::", stringify!(__pad1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(stat), "::", stringify!(st_size)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(stat), "::", stringify!(st_blksize)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        60usize,
        concat!("Offset of field: ", stringify!(stat), "::", stringify!(__pad2)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(stat), "::", stringify!(st_blocks)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_atim) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(stat), "::", stringify!(st_atim)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mtim) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(stat), "::", stringify!(st_mtim)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ctim) as usize - ptr as usize },
        104usize,
        concat!("Offset of field: ", stringify!(stat), "::", stringify!(st_ctim)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat64 {
    pub st_dev: __dev_t,
    pub st_ino: __ino64_t,
    pub st_mode: __mode_t,
    pub st_nlink: __nlink_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub st_rdev: __dev_t,
    pub __pad1: __dev_t,
    pub st_size: __off64_t,
    pub st_blksize: __blksize_t,
    pub __pad2: ::std::os::raw::c_int,
    pub st_blocks: __blkcnt64_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout_stat64() {
    const UNINIT: ::std::mem::MaybeUninit<stat64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stat64>(),
        128usize,
        concat!("Size of: ", stringify!(stat64)),
    );
    assert_eq!(
        ::std::mem::align_of::<stat64>(),
        8usize,
        concat!("Alignment of ", stringify!(stat64)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(stat64), "::", stringify!(st_dev)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(stat64), "::", stringify!(st_ino)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(stat64), "::", stringify!(st_mode)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(stat64), "::", stringify!(st_nlink)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(stat64), "::", stringify!(st_uid)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(stat64), "::", stringify!(st_gid)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(stat64), "::", stringify!(st_rdev)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(stat64), "::", stringify!(__pad1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(stat64), "::", stringify!(st_size)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(stat64), "::", stringify!(st_blksize)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        60usize,
        concat!("Offset of field: ", stringify!(stat64), "::", stringify!(__pad2)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(stat64), "::", stringify!(st_blocks)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_atim) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(stat64), "::", stringify!(st_atim)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mtim) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(stat64), "::", stringify!(st_mtim)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ctim) as usize - ptr as usize },
        104usize,
        concat!("Offset of field: ", stringify!(stat64), "::", stringify!(st_ctim)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(__glibc_reserved),
        ),
    );
}
extern "C" {
    pub fn stat(
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat(__fd: ::std::os::raw::c_int, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stat64(
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat64(
        __fd: ::std::os::raw::c_int,
        __buf: *mut stat64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatat64(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat64,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat(
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat64(
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmod(
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchmod(
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmod(
        __fd: ::std::os::raw::c_int,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmodat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umask(__mask: __mode_t) -> __mode_t;
}
extern "C" {
    pub fn getumask() -> __mode_t;
}
extern "C" {
    pub fn mkdir(
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknod(
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknodat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifo(
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifoat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimens(
        __fd: ::std::os::raw::c_int,
        __times: *const timespec,
    ) -> ::std::os::raw::c_int;
}
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set)),
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits),
        ),
    );
}
pub type __kernel_sighandler_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_int),
>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_old_dev_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__kernel_fsid_t), "::", stringify!(val)),
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statx_timestamp {
    pub tv_sec: __s64,
    pub tv_nsec: __u32,
    pub __reserved: __s32,
}
#[test]
fn bindgen_test_layout_statx_timestamp() {
    const UNINIT: ::std::mem::MaybeUninit<statx_timestamp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<statx_timestamp>(),
        16usize,
        concat!("Size of: ", stringify!(statx_timestamp)),
    );
    assert_eq!(
        ::std::mem::align_of::<statx_timestamp>(),
        8usize,
        concat!("Alignment of ", stringify!(statx_timestamp)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(statx_timestamp),
            "::",
            stringify!(tv_sec),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(statx_timestamp),
            "::",
            stringify!(tv_nsec),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(statx_timestamp),
            "::",
            stringify!(__reserved),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statx {
    pub stx_mask: __u32,
    pub stx_blksize: __u32,
    pub stx_attributes: __u64,
    pub stx_nlink: __u32,
    pub stx_uid: __u32,
    pub stx_gid: __u32,
    pub stx_mode: __u16,
    pub __spare0: [__u16; 1usize],
    pub stx_ino: __u64,
    pub stx_size: __u64,
    pub stx_blocks: __u64,
    pub stx_attributes_mask: __u64,
    pub stx_atime: statx_timestamp,
    pub stx_btime: statx_timestamp,
    pub stx_ctime: statx_timestamp,
    pub stx_mtime: statx_timestamp,
    pub stx_rdev_major: __u32,
    pub stx_rdev_minor: __u32,
    pub stx_dev_major: __u32,
    pub stx_dev_minor: __u32,
    pub stx_mnt_id: __u64,
    pub stx_dio_mem_align: __u32,
    pub stx_dio_offset_align: __u32,
    pub __spare3: [__u64; 12usize],
}
#[test]
fn bindgen_test_layout_statx() {
    const UNINIT: ::std::mem::MaybeUninit<statx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<statx>(),
        256usize,
        concat!("Size of: ", stringify!(statx)),
    );
    assert_eq!(
        ::std::mem::align_of::<statx>(),
        8usize,
        concat!("Alignment of ", stringify!(statx)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_mask) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(statx), "::", stringify!(stx_mask)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_blksize) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(statx), "::", stringify!(stx_blksize)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_attributes) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(statx), "::", stringify!(stx_attributes)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_nlink) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(statx), "::", stringify!(stx_nlink)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_uid) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(statx), "::", stringify!(stx_uid)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_gid) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(statx), "::", stringify!(stx_gid)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_mode) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(statx), "::", stringify!(stx_mode)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spare0) as usize - ptr as usize },
        30usize,
        concat!("Offset of field: ", stringify!(statx), "::", stringify!(__spare0)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_ino) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(statx), "::", stringify!(stx_ino)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_size) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(statx), "::", stringify!(stx_size)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_blocks) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(statx), "::", stringify!(stx_blocks)),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).stx_attributes_mask) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_attributes_mask),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_atime) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(statx), "::", stringify!(stx_atime)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_btime) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(statx), "::", stringify!(stx_btime)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_ctime) as usize - ptr as usize },
        96usize,
        concat!("Offset of field: ", stringify!(statx), "::", stringify!(stx_ctime)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_mtime) as usize - ptr as usize },
        112usize,
        concat!("Offset of field: ", stringify!(statx), "::", stringify!(stx_mtime)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_rdev_major) as usize - ptr as usize },
        128usize,
        concat!("Offset of field: ", stringify!(statx), "::", stringify!(stx_rdev_major)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_rdev_minor) as usize - ptr as usize },
        132usize,
        concat!("Offset of field: ", stringify!(statx), "::", stringify!(stx_rdev_minor)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_dev_major) as usize - ptr as usize },
        136usize,
        concat!("Offset of field: ", stringify!(statx), "::", stringify!(stx_dev_major)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_dev_minor) as usize - ptr as usize },
        140usize,
        concat!("Offset of field: ", stringify!(statx), "::", stringify!(stx_dev_minor)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stx_mnt_id) as usize - ptr as usize },
        144usize,
        concat!("Offset of field: ", stringify!(statx), "::", stringify!(stx_mnt_id)),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).stx_dio_mem_align) as usize - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_dio_mem_align),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).stx_dio_offset_align) as usize - ptr as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_dio_offset_align),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spare3) as usize - ptr as usize },
        160usize,
        concat!("Offset of field: ", stringify!(statx), "::", stringify!(__spare3)),
    );
}
extern "C" {
    pub fn statx(
        __dirfd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
        __mask: ::std::os::raw::c_uint,
        __buf: *mut statx,
    ) -> ::std::os::raw::c_int;
}
pub type zend_stream_fsizer_t = ::std::option::Option<
    unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void) -> usize,
>;
pub type zend_stream_reader_t = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        buf: *mut ::std::os::raw::c_char,
        len: usize,
    ) -> isize,
>;
pub type zend_stream_closer_t = ::std::option::Option<
    unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void),
>;
pub const zend_stream_type_ZEND_HANDLE_FILENAME: zend_stream_type = 0;
pub const zend_stream_type_ZEND_HANDLE_FP: zend_stream_type = 1;
pub const zend_stream_type_ZEND_HANDLE_STREAM: zend_stream_type = 2;
pub type zend_stream_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_stream {
    pub handle: *mut ::std::os::raw::c_void,
    pub isatty: ::std::os::raw::c_int,
    pub reader: zend_stream_reader_t,
    pub fsizer: zend_stream_fsizer_t,
    pub closer: zend_stream_closer_t,
}
#[test]
fn bindgen_test_layout__zend_stream() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_stream> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_stream>(),
        40usize,
        concat!("Size of: ", stringify!(_zend_stream)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_stream>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_stream)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_stream), "::", stringify!(handle)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isatty) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_stream), "::", stringify!(isatty)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reader) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_zend_stream), "::", stringify!(reader)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsizer) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_zend_stream), "::", stringify!(fsizer)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).closer) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(_zend_stream), "::", stringify!(closer)),
    );
}
pub type zend_stream = _zend_stream;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_file_handle {
    pub handle: _zend_file_handle__bindgen_ty_1,
    pub filename: *mut zend_string,
    pub opened_path: *mut zend_string,
    pub type_: u8,
    pub primary_script: bool,
    pub in_list: bool,
    pub buf: *mut ::std::os::raw::c_char,
    pub len: usize,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_file_handle__bindgen_ty_1 {
    pub fp: *mut FILE,
    pub stream: zend_stream,
}
#[test]
fn bindgen_test_layout__zend_file_handle__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_file_handle__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_file_handle__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(_zend_file_handle__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_file_handle__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_file_handle__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_handle__bindgen_ty_1),
            "::",
            stringify!(fp),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_handle__bindgen_ty_1),
            "::",
            stringify!(stream),
        ),
    );
}
#[test]
fn bindgen_test_layout__zend_file_handle() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_file_handle> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_file_handle>(),
        80usize,
        concat!("Size of: ", stringify!(_zend_file_handle)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_file_handle>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_file_handle)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_handle),
            "::",
            stringify!(handle),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_handle),
            "::",
            stringify!(filename),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opened_path) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_handle),
            "::",
            stringify!(opened_path),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_handle),
            "::",
            stringify!(type_),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primary_script) as usize - ptr as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_handle),
            "::",
            stringify!(primary_script),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_list) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_handle),
            "::",
            stringify!(in_list),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_handle),
            "::",
            stringify!(buf),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_handle),
            "::",
            stringify!(len),
        ),
    );
}
pub type zend_file_handle = _zend_file_handle;
extern "C" {
    pub fn zend_stream_init_fp(
        handle: *mut zend_file_handle,
        fp: *mut FILE,
        filename: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn zend_stream_init_filename(
        handle: *mut zend_file_handle,
        filename: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn zend_stream_init_filename_ex(
        handle: *mut zend_file_handle,
        filename: *mut zend_string,
    );
}
extern "C" {
    pub fn zend_stream_open(handle: *mut zend_file_handle) -> zend_result;
}
extern "C" {
    pub fn zend_stream_fixup(
        file_handle: *mut zend_file_handle,
        buf: *mut *mut ::std::os::raw::c_char,
        len: *mut usize,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_destroy_file_handle(file_handle: *mut zend_file_handle);
}
extern "C" {
    pub fn zend_stream_init();
}
extern "C" {
    pub fn zend_stream_shutdown();
}
pub type zend_stat_t = stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct smart_str {
    /// See smart_str_extract()
    pub s: *mut zend_string,
    pub a: usize,
}
#[test]
fn bindgen_test_layout_smart_str() {
    const UNINIT: ::std::mem::MaybeUninit<smart_str> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<smart_str>(),
        16usize,
        concat!("Size of: ", stringify!(smart_str)),
    );
    assert_eq!(
        ::std::mem::align_of::<smart_str>(),
        8usize,
        concat!("Alignment of ", stringify!(smart_str)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(smart_str), "::", stringify!(s)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(smart_str), "::", stringify!(a)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct smart_string {
    pub c: *mut ::std::os::raw::c_char,
    pub len: usize,
    pub a: usize,
}
#[test]
fn bindgen_test_layout_smart_string() {
    const UNINIT: ::std::mem::MaybeUninit<smart_string> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<smart_string>(),
        24usize,
        concat!("Size of: ", stringify!(smart_string)),
    );
    assert_eq!(
        ::std::mem::align_of::<smart_string>(),
        8usize,
        concat!("Alignment of ", stringify!(smart_string)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(smart_string), "::", stringify!(c)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(smart_string), "::", stringify!(len)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(smart_string), "::", stringify!(a)),
    );
}
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    const UNINIT: ::std::mem::MaybeUninit<sigval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval)),
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sival_int) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sigval), "::", stringify!(sival_int)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sival_ptr) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sigval), "::", stringify!(sival_ptr)),
    );
}
pub type __sigval_t = sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub __pad0: ::std::os::raw::c_int,
    pub _sifields: siginfo_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 28usize],
    pub _kill: siginfo_t__bindgen_ty_1__bindgen_ty_1,
    pub _timer: siginfo_t__bindgen_ty_1__bindgen_ty_2,
    pub _rt: siginfo_t__bindgen_ty_1__bindgen_ty_3,
    pub _sigchld: siginfo_t__bindgen_ty_1__bindgen_ty_4,
    pub _sigfault: siginfo_t__bindgen_ty_1__bindgen_ty_5,
    pub _sigpoll: siginfo_t__bindgen_ty_1__bindgen_ty_6,
    pub _sigsys: siginfo_t__bindgen_ty_1__bindgen_ty_7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_pid),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_uid),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: __sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)),
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_tid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_tid),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_overrun) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_overrun),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_sigval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_sigval),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: __sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)),
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_pid),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_uid),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_sigval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_sigval),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __clock_t,
    pub si_stime: __clock_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        32usize,
        concat!("Size of: ", stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)),
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_pid),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_uid),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_status),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_utime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_utime),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_stime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_stime),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub _bounds: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub _addr_bnd: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub _pkey: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
        >(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
        ),
    );
    assert_eq!(
        ::std::mem::align_of::<
            siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lower) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1
            ),
            "::",
            stringify!(_lower),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._upper) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1
            ),
            "::",
            stringify!(_upper),
        ),
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
        ),
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._addr_bnd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_addr_bnd),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pkey) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_pkey),
        ),
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_5> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        32usize,
        concat!("Size of: ", stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)),
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_addr_lsb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr_lsb),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._bounds) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(_bounds),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_6> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        16usize,
        concat!("Size of: ", stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)),
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_band) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_band),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_fd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_fd),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_7() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_7> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        16usize,
        concat!("Size of: ", stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)),
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._call_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_call_addr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._syscall) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_syscall),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._arch) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_arch),
        ),
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1>(),
        112usize,
        concat!("Size of: ", stringify!(siginfo_t__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_pad),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._kill) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_kill),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._timer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_timer),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._rt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_rt),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigchld) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigchld),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigfault) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigfault),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigpoll) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigpoll),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigsys) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigsys),
        ),
    );
}
#[test]
fn bindgen_test_layout_siginfo_t() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t>(),
        128usize,
        concat!("Size of: ", stringify!(siginfo_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_signo) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(siginfo_t), "::", stringify!(si_signo)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_errno) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(siginfo_t), "::", stringify!(si_errno)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_code) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(siginfo_t), "::", stringify!(si_code)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad0) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(siginfo_t), "::", stringify!(__pad0)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sifields) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(siginfo_t), "::", stringify!(_sifields)),
    );
}
pub const SI_ASYNCNL: _bindgen_ty_8 = -60;
pub const SI_DETHREAD: _bindgen_ty_8 = -7;
pub const SI_TKILL: _bindgen_ty_8 = -6;
pub const SI_SIGIO: _bindgen_ty_8 = -5;
pub const SI_ASYNCIO: _bindgen_ty_8 = -4;
pub const SI_MESGQ: _bindgen_ty_8 = -3;
pub const SI_TIMER: _bindgen_ty_8 = -2;
pub const SI_QUEUE: _bindgen_ty_8 = -1;
pub const SI_USER: _bindgen_ty_8 = 0;
pub const SI_KERNEL: _bindgen_ty_8 = 128;
pub type _bindgen_ty_8 = ::std::os::raw::c_int;
pub const ILL_ILLOPC: _bindgen_ty_9 = 1;
pub const ILL_ILLOPN: _bindgen_ty_9 = 2;
pub const ILL_ILLADR: _bindgen_ty_9 = 3;
pub const ILL_ILLTRP: _bindgen_ty_9 = 4;
pub const ILL_PRVOPC: _bindgen_ty_9 = 5;
pub const ILL_PRVREG: _bindgen_ty_9 = 6;
pub const ILL_COPROC: _bindgen_ty_9 = 7;
pub const ILL_BADSTK: _bindgen_ty_9 = 8;
pub const ILL_BADIADDR: _bindgen_ty_9 = 9;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const FPE_INTDIV: _bindgen_ty_10 = 1;
pub const FPE_INTOVF: _bindgen_ty_10 = 2;
pub const FPE_FLTDIV: _bindgen_ty_10 = 3;
pub const FPE_FLTOVF: _bindgen_ty_10 = 4;
pub const FPE_FLTUND: _bindgen_ty_10 = 5;
pub const FPE_FLTRES: _bindgen_ty_10 = 6;
pub const FPE_FLTINV: _bindgen_ty_10 = 7;
pub const FPE_FLTSUB: _bindgen_ty_10 = 8;
pub const FPE_FLTUNK: _bindgen_ty_10 = 14;
pub const FPE_CONDTRAP: _bindgen_ty_10 = 15;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub const SEGV_MAPERR: _bindgen_ty_11 = 1;
pub const SEGV_ACCERR: _bindgen_ty_11 = 2;
pub const SEGV_BNDERR: _bindgen_ty_11 = 3;
pub const SEGV_PKUERR: _bindgen_ty_11 = 4;
pub const SEGV_ACCADI: _bindgen_ty_11 = 5;
pub const SEGV_ADIDERR: _bindgen_ty_11 = 6;
pub const SEGV_ADIPERR: _bindgen_ty_11 = 7;
pub const SEGV_MTEAERR: _bindgen_ty_11 = 8;
pub const SEGV_MTESERR: _bindgen_ty_11 = 9;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
pub const BUS_ADRALN: _bindgen_ty_12 = 1;
pub const BUS_ADRERR: _bindgen_ty_12 = 2;
pub const BUS_OBJERR: _bindgen_ty_12 = 3;
pub const BUS_MCEERR_AR: _bindgen_ty_12 = 4;
pub const BUS_MCEERR_AO: _bindgen_ty_12 = 5;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
pub const TRAP_BRKPT: _bindgen_ty_13 = 1;
pub const TRAP_TRACE: _bindgen_ty_13 = 2;
pub const TRAP_BRANCH: _bindgen_ty_13 = 3;
pub const TRAP_HWBKPT: _bindgen_ty_13 = 4;
pub const TRAP_UNK: _bindgen_ty_13 = 5;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
pub const CLD_EXITED: _bindgen_ty_14 = 1;
pub const CLD_KILLED: _bindgen_ty_14 = 2;
pub const CLD_DUMPED: _bindgen_ty_14 = 3;
pub const CLD_TRAPPED: _bindgen_ty_14 = 4;
pub const CLD_STOPPED: _bindgen_ty_14 = 5;
pub const CLD_CONTINUED: _bindgen_ty_14 = 6;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
pub const POLL_IN: _bindgen_ty_15 = 1;
pub const POLL_OUT: _bindgen_ty_15 = 2;
pub const POLL_MSG: _bindgen_ty_15 = 3;
pub const POLL_ERR: _bindgen_ty_15 = 4;
pub const POLL_PRI: _bindgen_ty_15 = 5;
pub const POLL_HUP: _bindgen_ty_15 = 6;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
pub type sigval_t = __sigval_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_value: __sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigevent__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 12usize],
    pub _tid: __pid_t,
    pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::std::option::Option<unsafe extern "C" fn(arg1: __sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sigevent__bindgen_ty_1__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._function) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_function),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._attribute) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_attribute),
        ),
    );
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sigevent__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(sigevent__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_pad),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._tid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_tid),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigev_thread) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_sigev_thread),
        ),
    );
}
#[test]
fn bindgen_test_layout_sigevent() {
    const UNINIT: ::std::mem::MaybeUninit<sigevent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        64usize,
        concat!("Size of: ", stringify!(sigevent)),
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_value) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sigevent), "::", stringify!(sigev_value)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_signo) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(sigevent), "::", stringify!(sigev_signo)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_notify) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigev_un) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(sigevent), "::", stringify!(_sigev_un)),
    );
}
pub type sigevent_t = sigevent;
pub const SIGEV_SIGNAL: _bindgen_ty_16 = 0;
pub const SIGEV_NONE: _bindgen_ty_16 = 1;
pub const SIGEV_THREAD: _bindgen_ty_16 = 2;
pub const SIGEV_THREAD_ID: _bindgen_ty_16 = 4;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
pub type __sighandler_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_int),
>;
extern "C" {
    pub fn __sysv_signal(
        __sig: ::std::os::raw::c_int,
        __handler: __sighandler_t,
    ) -> __sighandler_t;
}
extern "C" {
    pub fn sysv_signal(
        __sig: ::std::os::raw::c_int,
        __handler: __sighandler_t,
    ) -> __sighandler_t;
}
extern "C" {
    pub fn signal(
        __sig: ::std::os::raw::c_int,
        __handler: __sighandler_t,
    ) -> __sighandler_t;
}
extern "C" {
    pub fn kill(__pid: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(
        __pgrp: __pid_t,
        __sig: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raise(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ssignal(
        __sig: ::std::os::raw::c_int,
        __handler: __sighandler_t,
    ) -> __sighandler_t;
}
extern "C" {
    pub fn gsignal(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(__sig: ::std::os::raw::c_int, __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn psiginfo(__pinfo: *const siginfo_t, __s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}__xpg_sigpause"]
    pub fn sigpause(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigblock(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siggetmask() -> ::std::os::raw::c_int;
}
pub type sighandler_t = __sighandler_t;
pub type sig_t = __sighandler_t;
extern "C" {
    pub fn sigemptyset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(
        __set: *mut sigset_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(
        __set: *mut sigset_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(
        __set: *const sigset_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigisemptyset(__set: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigandset(
        __set: *mut sigset_t,
        __left: *const sigset_t,
        __right: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigorset(
        __set: *mut sigset_t,
        __left: *const sigset_t,
        __right: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_handler: sigaction__bindgen_ty_1,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::std::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigaction__bindgen_ty_1 {
    pub sa_handler: __sighandler_t,
    pub sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut siginfo_t,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout_sigaction__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sigaction__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigaction__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sigaction__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(sa_handler),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_sigaction) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(sa_sigaction),
        ),
    );
}
#[test]
fn bindgen_test_layout_sigaction() {
    const UNINIT: ::std::mem::MaybeUninit<sigaction> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        152usize,
        concat!("Size of: ", stringify!(sigaction)),
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction)),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__sigaction_handler) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(__sigaction_handler),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(sigaction), "::", stringify!(sa_mask)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize },
        136usize,
        concat!("Offset of field: ", stringify!(sigaction), "::", stringify!(sa_flags)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_restorer) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_restorer),
        ),
    );
}
extern "C" {
    pub fn sigprocmask(
        __how: ::std::os::raw::c_int,
        __set: *const sigset_t,
        __oset: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsuspend(__set: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(
        __sig: ::std::os::raw::c_int,
        __act: *const sigaction,
        __oact: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(
        __set: *const sigset_t,
        __sig: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwaitinfo(
        __set: *const sigset_t,
        __info: *mut siginfo_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigtimedwait(
        __set: *const sigset_t,
        __info: *mut siginfo_t,
        __timeout: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigqueue(
        __pid: __pid_t,
        __sig: ::std::os::raw::c_int,
        __val: sigval,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct sigcontext {
    pub fault_address: __u64,
    pub regs: [__u64; 31usize],
    pub sp: __u64,
    pub pc: __u64,
    pub pstate: __u64,
    pub __bindgen_padding_0: [u8; 8usize],
    pub __reserved: [__u8; 4096usize],
}
#[test]
fn bindgen_test_layout_sigcontext() {
    const UNINIT: ::std::mem::MaybeUninit<sigcontext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigcontext>(),
        4384usize,
        concat!("Size of: ", stringify!(sigcontext)),
    );
    assert_eq!(
        ::std::mem::align_of::<sigcontext>(),
        16usize,
        concat!("Alignment of ", stringify!(sigcontext)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fault_address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(fault_address),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regs) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(sigcontext), "::", stringify!(regs)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp) as usize - ptr as usize },
        256usize,
        concat!("Offset of field: ", stringify!(sigcontext), "::", stringify!(sp)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pc) as usize - ptr as usize },
        264usize,
        concat!("Offset of field: ", stringify!(sigcontext), "::", stringify!(pc)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstate) as usize - ptr as usize },
        272usize,
        concat!("Offset of field: ", stringify!(sigcontext), "::", stringify!(pstate)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(__reserved),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _aarch64_ctx {
    pub magic: __u32,
    pub size: __u32,
}
#[test]
fn bindgen_test_layout__aarch64_ctx() {
    const UNINIT: ::std::mem::MaybeUninit<_aarch64_ctx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_aarch64_ctx>(),
        8usize,
        concat!("Size of: ", stringify!(_aarch64_ctx)),
    );
    assert_eq!(
        ::std::mem::align_of::<_aarch64_ctx>(),
        4usize,
        concat!("Alignment of ", stringify!(_aarch64_ctx)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magic) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_aarch64_ctx), "::", stringify!(magic)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(_aarch64_ctx), "::", stringify!(size)),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct fpsimd_context {
    pub head: _aarch64_ctx,
    pub fpsr: __u32,
    pub fpcr: __u32,
    pub vregs: [__uint128_t; 32usize],
}
#[test]
fn bindgen_test_layout_fpsimd_context() {
    const UNINIT: ::std::mem::MaybeUninit<fpsimd_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fpsimd_context>(),
        528usize,
        concat!("Size of: ", stringify!(fpsimd_context)),
    );
    assert_eq!(
        ::std::mem::align_of::<fpsimd_context>(),
        16usize,
        concat!("Alignment of ", stringify!(fpsimd_context)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(fpsimd_context), "::", stringify!(head)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpsr) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(fpsimd_context), "::", stringify!(fpsr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpcr) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(fpsimd_context), "::", stringify!(fpcr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vregs) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(fpsimd_context), "::", stringify!(vregs)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esr_context {
    pub head: _aarch64_ctx,
    pub esr: __u64,
}
#[test]
fn bindgen_test_layout_esr_context() {
    const UNINIT: ::std::mem::MaybeUninit<esr_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<esr_context>(),
        16usize,
        concat!("Size of: ", stringify!(esr_context)),
    );
    assert_eq!(
        ::std::mem::align_of::<esr_context>(),
        8usize,
        concat!("Alignment of ", stringify!(esr_context)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(esr_context), "::", stringify!(head)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).esr) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(esr_context), "::", stringify!(esr)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct extra_context {
    pub head: _aarch64_ctx,
    pub datap: __u64,
    pub size: __u32,
    pub __reserved: [__u32; 3usize],
}
#[test]
fn bindgen_test_layout_extra_context() {
    const UNINIT: ::std::mem::MaybeUninit<extra_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<extra_context>(),
        32usize,
        concat!("Size of: ", stringify!(extra_context)),
    );
    assert_eq!(
        ::std::mem::align_of::<extra_context>(),
        8usize,
        concat!("Alignment of ", stringify!(extra_context)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(extra_context), "::", stringify!(head)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datap) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(extra_context), "::", stringify!(datap)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(extra_context), "::", stringify!(size)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(extra_context),
            "::",
            stringify!(__reserved),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sve_context {
    pub head: _aarch64_ctx,
    pub vl: __u16,
    pub flags: __u16,
    pub __reserved: [__u16; 2usize],
}
#[test]
fn bindgen_test_layout_sve_context() {
    const UNINIT: ::std::mem::MaybeUninit<sve_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sve_context>(),
        16usize,
        concat!("Size of: ", stringify!(sve_context)),
    );
    assert_eq!(
        ::std::mem::align_of::<sve_context>(),
        4usize,
        concat!("Alignment of ", stringify!(sve_context)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sve_context), "::", stringify!(head)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vl) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(sve_context), "::", stringify!(vl)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        10usize,
        concat!("Offset of field: ", stringify!(sve_context), "::", stringify!(flags)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sve_context),
            "::",
            stringify!(__reserved),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct za_context {
    pub head: _aarch64_ctx,
    pub vl: __u16,
    pub __reserved: [__u16; 3usize],
}
#[test]
fn bindgen_test_layout_za_context() {
    const UNINIT: ::std::mem::MaybeUninit<za_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<za_context>(),
        16usize,
        concat!("Size of: ", stringify!(za_context)),
    );
    assert_eq!(
        ::std::mem::align_of::<za_context>(),
        4usize,
        concat!("Alignment of ", stringify!(za_context)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(za_context), "::", stringify!(head)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vl) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(za_context), "::", stringify!(vl)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(za_context),
            "::",
            stringify!(__reserved),
        ),
    );
}
extern "C" {
    pub fn sigreturn(__scp: *mut sigcontext) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_t {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: usize,
}
#[test]
fn bindgen_test_layout_stack_t() {
    const UNINIT: ::std::mem::MaybeUninit<stack_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stack_t>(),
        24usize,
        concat!("Size of: ", stringify!(stack_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<stack_t>(),
        8usize,
        concat!("Alignment of ", stringify!(stack_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(stack_t), "::", stringify!(ss_sp)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_flags) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(stack_t), "::", stringify!(ss_flags)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_size) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(stack_t), "::", stringify!(ss_size)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    const UNINIT: ::std::mem::MaybeUninit<timezone> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone)),
    );
    assert_eq!(
        ::std::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tz_minuteswest) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tz_dsttime) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(timezone), "::", stringify!(tz_dsttime)),
    );
}
extern "C" {
    pub fn gettimeofday(
        __tv: *mut timeval,
        __tz: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(
        __tv: *const timeval,
        __tz: *const timezone,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjtime(
        __delta: *const timeval,
        __olddelta: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
pub const __itimer_which_ITIMER_REAL: __itimer_which = 0;
pub const __itimer_which_ITIMER_VIRTUAL: __itimer_which = 1;
pub const __itimer_which_ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    const UNINIT: ::std::mem::MaybeUninit<itimerval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(itimerval)),
    );
    assert_eq!(
        ::std::mem::align_of::<itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerval)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(itimerval), "::", stringify!(it_value)),
    );
}
pub use self::__itimer_which as __itimer_which_t;
extern "C" {
    pub fn getitimer(
        __which: __itimer_which_t,
        __value: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(
        __fd: ::std::os::raw::c_int,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimesat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user_regs_struct {
    pub regs: [::std::os::raw::c_ulonglong; 31usize],
    pub sp: ::std::os::raw::c_ulonglong,
    pub pc: ::std::os::raw::c_ulonglong,
    pub pstate: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_user_regs_struct() {
    const UNINIT: ::std::mem::MaybeUninit<user_regs_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<user_regs_struct>(),
        272usize,
        concat!("Size of: ", stringify!(user_regs_struct)),
    );
    assert_eq!(
        ::std::mem::align_of::<user_regs_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(user_regs_struct)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(user_regs_struct),
            "::",
            stringify!(regs),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp) as usize - ptr as usize },
        248usize,
        concat!("Offset of field: ", stringify!(user_regs_struct), "::", stringify!(sp)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pc) as usize - ptr as usize },
        256usize,
        concat!("Offset of field: ", stringify!(user_regs_struct), "::", stringify!(pc)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstate) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(user_regs_struct),
            "::",
            stringify!(pstate),
        ),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct user_fpsimd_struct {
    pub vregs: [__uint128_t; 32usize],
    pub fpsr: ::std::os::raw::c_uint,
    pub fpcr: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_user_fpsimd_struct() {
    const UNINIT: ::std::mem::MaybeUninit<user_fpsimd_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<user_fpsimd_struct>(),
        528usize,
        concat!("Size of: ", stringify!(user_fpsimd_struct)),
    );
    assert_eq!(
        ::std::mem::align_of::<user_fpsimd_struct>(),
        16usize,
        concat!("Alignment of ", stringify!(user_fpsimd_struct)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vregs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(user_fpsimd_struct),
            "::",
            stringify!(vregs),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpsr) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(user_fpsimd_struct),
            "::",
            stringify!(fpsr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpcr) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(user_fpsimd_struct),
            "::",
            stringify!(fpcr),
        ),
    );
}
pub type elf_greg_t = __uint64_t;
pub type elf_gregset_t = [elf_greg_t; 34usize];
pub type elf_fpregset_t = user_fpsimd_struct;
pub type __pr_uid_t = ::std::os::raw::c_uint;
pub type __pr_gid_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf_siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_elf_siginfo() {
    const UNINIT: ::std::mem::MaybeUninit<elf_siginfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<elf_siginfo>(),
        12usize,
        concat!("Size of: ", stringify!(elf_siginfo)),
    );
    assert_eq!(
        ::std::mem::align_of::<elf_siginfo>(),
        4usize,
        concat!("Alignment of ", stringify!(elf_siginfo)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_signo) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(elf_siginfo), "::", stringify!(si_signo)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_code) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(elf_siginfo), "::", stringify!(si_code)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_errno) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(elf_siginfo), "::", stringify!(si_errno)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf_prstatus {
    pub pr_info: elf_siginfo,
    pub pr_cursig: ::std::os::raw::c_short,
    pub pr_sigpend: ::std::os::raw::c_ulong,
    pub pr_sighold: ::std::os::raw::c_ulong,
    pub pr_pid: __pid_t,
    pub pr_ppid: __pid_t,
    pub pr_pgrp: __pid_t,
    pub pr_sid: __pid_t,
    pub pr_utime: timeval,
    pub pr_stime: timeval,
    pub pr_cutime: timeval,
    pub pr_cstime: timeval,
    pub pr_reg: elf_gregset_t,
    pub pr_fpvalid: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_elf_prstatus() {
    const UNINIT: ::std::mem::MaybeUninit<elf_prstatus> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<elf_prstatus>(),
        392usize,
        concat!("Size of: ", stringify!(elf_prstatus)),
    );
    assert_eq!(
        ::std::mem::align_of::<elf_prstatus>(),
        8usize,
        concat!("Alignment of ", stringify!(elf_prstatus)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_info) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(elf_prstatus), "::", stringify!(pr_info)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_cursig) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_cursig),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_sigpend) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_sigpend),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_sighold) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_sighold),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_pid) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(elf_prstatus), "::", stringify!(pr_pid)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_ppid) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(elf_prstatus), "::", stringify!(pr_ppid)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_pgrp) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(elf_prstatus), "::", stringify!(pr_pgrp)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_sid) as usize - ptr as usize },
        44usize,
        concat!("Offset of field: ", stringify!(elf_prstatus), "::", stringify!(pr_sid)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_utime) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_utime),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_stime) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_stime),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_cutime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_cutime),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_cstime) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_cstime),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_reg) as usize - ptr as usize },
        112usize,
        concat!("Offset of field: ", stringify!(elf_prstatus), "::", stringify!(pr_reg)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_fpvalid) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_fpvalid),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf_prpsinfo {
    pub pr_state: ::std::os::raw::c_char,
    pub pr_sname: ::std::os::raw::c_char,
    pub pr_zomb: ::std::os::raw::c_char,
    pub pr_nice: ::std::os::raw::c_char,
    pub pr_flag: ::std::os::raw::c_ulong,
    pub pr_uid: __pr_uid_t,
    pub pr_gid: __pr_gid_t,
    pub pr_pid: ::std::os::raw::c_int,
    pub pr_ppid: ::std::os::raw::c_int,
    pub pr_pgrp: ::std::os::raw::c_int,
    pub pr_sid: ::std::os::raw::c_int,
    pub pr_fname: [::std::os::raw::c_char; 16usize],
    pub pr_psargs: [::std::os::raw::c_char; 80usize],
}
#[test]
fn bindgen_test_layout_elf_prpsinfo() {
    const UNINIT: ::std::mem::MaybeUninit<elf_prpsinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<elf_prpsinfo>(),
        136usize,
        concat!("Size of: ", stringify!(elf_prpsinfo)),
    );
    assert_eq!(
        ::std::mem::align_of::<elf_prpsinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(elf_prpsinfo)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prpsinfo),
            "::",
            stringify!(pr_state),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_sname) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prpsinfo),
            "::",
            stringify!(pr_sname),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_zomb) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(elf_prpsinfo), "::", stringify!(pr_zomb)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_nice) as usize - ptr as usize },
        3usize,
        concat!("Offset of field: ", stringify!(elf_prpsinfo), "::", stringify!(pr_nice)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_flag) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(elf_prpsinfo), "::", stringify!(pr_flag)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_uid) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(elf_prpsinfo), "::", stringify!(pr_uid)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_gid) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(elf_prpsinfo), "::", stringify!(pr_gid)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_pid) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(elf_prpsinfo), "::", stringify!(pr_pid)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_ppid) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(elf_prpsinfo), "::", stringify!(pr_ppid)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_pgrp) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(elf_prpsinfo), "::", stringify!(pr_pgrp)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_sid) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(elf_prpsinfo), "::", stringify!(pr_sid)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_fname) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prpsinfo),
            "::",
            stringify!(pr_fname),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_psargs) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prpsinfo),
            "::",
            stringify!(pr_psargs),
        ),
    );
}
pub type psaddr_t = *mut ::std::os::raw::c_void;
pub type __prgregset_t = elf_gregset_t;
pub type __prfpregset_t = elf_fpregset_t;
pub type prgregset_t = __prgregset_t;
pub type prfpregset_t = __prfpregset_t;
pub type lwpid_t = __pid_t;
pub type prstatus_t = elf_prstatus;
pub type prpsinfo_t = elf_prpsinfo;
pub type greg_t = elf_greg_t;
pub type gregset_t = elf_gregset_t;
pub type fpregset_t = elf_fpregset_t;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct mcontext_t {
    pub fault_address: ::std::os::raw::c_ulonglong,
    pub regs: [::std::os::raw::c_ulonglong; 31usize],
    pub sp: ::std::os::raw::c_ulonglong,
    pub pc: ::std::os::raw::c_ulonglong,
    pub pstate: ::std::os::raw::c_ulonglong,
    pub __bindgen_padding_0: [u8; 8usize],
    pub __reserved: [::std::os::raw::c_uchar; 4096usize],
}
#[test]
fn bindgen_test_layout_mcontext_t() {
    const UNINIT: ::std::mem::MaybeUninit<mcontext_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mcontext_t>(),
        4384usize,
        concat!("Size of: ", stringify!(mcontext_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<mcontext_t>(),
        16usize,
        concat!("Alignment of ", stringify!(mcontext_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fault_address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(fault_address),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regs) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(mcontext_t), "::", stringify!(regs)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp) as usize - ptr as usize },
        256usize,
        concat!("Offset of field: ", stringify!(mcontext_t), "::", stringify!(sp)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pc) as usize - ptr as usize },
        264usize,
        concat!("Offset of field: ", stringify!(mcontext_t), "::", stringify!(pc)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstate) as usize - ptr as usize },
        272usize,
        concat!("Offset of field: ", stringify!(mcontext_t), "::", stringify!(pstate)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(__reserved),
        ),
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct ucontext_t {
    pub uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut ucontext_t,
    pub uc_stack: stack_t,
    pub uc_sigmask: sigset_t,
    pub __bindgen_padding_0: u64,
    pub uc_mcontext: mcontext_t,
}
#[test]
fn bindgen_test_layout_ucontext_t() {
    const UNINIT: ::std::mem::MaybeUninit<ucontext_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ucontext_t>(),
        4560usize,
        concat!("Size of: ", stringify!(ucontext_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<ucontext_t>(),
        16usize,
        concat!("Alignment of ", stringify!(ucontext_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_flags) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ucontext_t), "::", stringify!(uc_flags)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_link) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ucontext_t), "::", stringify!(uc_link)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_stack) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(ucontext_t), "::", stringify!(uc_stack)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_sigmask) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_sigmask),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_mcontext) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_mcontext),
        ),
    );
}
extern "C" {
    pub fn siginterrupt(
        __sig: ::std::os::raw::c_int,
        __interrupt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const SS_ONSTACK: _bindgen_ty_17 = 1;
pub const SS_DISABLE: _bindgen_ty_17 = 2;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
extern "C" {
    pub fn sigaltstack(
        __ss: *const stack_t,
        __oss: *mut stack_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    const UNINIT: ::std::mem::MaybeUninit<sigstack> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack)),
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sigstack), "::", stringify!(ss_sp)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_onstack) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(sigstack), "::", stringify!(ss_onstack)),
    );
}
extern "C" {
    pub fn sigstack(__ss: *mut sigstack, __oss: *mut sigstack) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sighold(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigrelse(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigignore(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigset(
        __sig: ::std::os::raw::c_int,
        __disp: __sighandler_t,
    ) -> __sighandler_t;
}
extern "C" {
    pub fn pthread_sigmask(
        __how: ::std::os::raw::c_int,
        __newmask: *const __sigset_t,
        __oldmask: *mut __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(
        __threadid: pthread_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_sigqueue(
        __threadid: pthread_t,
        __signo: ::std::os::raw::c_int,
        __value: sigval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmax() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tgkill(
        __tgid: __pid_t,
        __tid: __pid_t,
        __signal: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_signal_entry_t {
    pub flags: ::std::os::raw::c_int,
    pub handler: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__zend_signal_entry_t() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_signal_entry_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_signal_entry_t>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_signal_entry_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_signal_entry_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_signal_entry_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_entry_t),
            "::",
            stringify!(flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_entry_t),
            "::",
            stringify!(handler),
        ),
    );
}
pub type zend_signal_entry_t = _zend_signal_entry_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_signal_t {
    pub signo: ::std::os::raw::c_int,
    pub siginfo: *mut siginfo_t,
    pub context: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__zend_signal_t() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_signal_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_signal_t>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_signal_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_signal_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_signal_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signo) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_signal_t), "::", stringify!(signo)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).siginfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_t),
            "::",
            stringify!(siginfo),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_t),
            "::",
            stringify!(context),
        ),
    );
}
pub type zend_signal_t = _zend_signal_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_signal_queue_t {
    pub zend_signal: zend_signal_t,
    pub next: *mut _zend_signal_queue_t,
}
#[test]
fn bindgen_test_layout__zend_signal_queue_t() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_signal_queue_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_signal_queue_t>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_signal_queue_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_signal_queue_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_signal_queue_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zend_signal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_queue_t),
            "::",
            stringify!(zend_signal),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_queue_t),
            "::",
            stringify!(next),
        ),
    );
}
pub type zend_signal_queue_t = _zend_signal_queue_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_signal_globals_t {
    pub depth: ::std::os::raw::c_int,
    pub blocked: ::std::os::raw::c_int,
    pub running: ::std::os::raw::c_int,
    pub active: ::std::os::raw::c_int,
    pub check: bool,
    pub reset: bool,
    pub handlers: [zend_signal_entry_t; 65usize],
    pub pstorage: [zend_signal_queue_t; 64usize],
    pub phead: *mut zend_signal_queue_t,
    pub ptail: *mut zend_signal_queue_t,
    pub pavail: *mut zend_signal_queue_t,
}
#[test]
fn bindgen_test_layout__zend_signal_globals_t() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_signal_globals_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_signal_globals_t>(),
        3136usize,
        concat!("Size of: ", stringify!(_zend_signal_globals_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_signal_globals_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_signal_globals_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_globals_t),
            "::",
            stringify!(depth),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blocked) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_globals_t),
            "::",
            stringify!(blocked),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).running) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_globals_t),
            "::",
            stringify!(running),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_globals_t),
            "::",
            stringify!(active),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).check) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_globals_t),
            "::",
            stringify!(check),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reset) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_globals_t),
            "::",
            stringify!(reset),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handlers) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_globals_t),
            "::",
            stringify!(handlers),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstorage) as usize - ptr as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_globals_t),
            "::",
            stringify!(pstorage),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phead) as usize - ptr as usize },
        3112usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_globals_t),
            "::",
            stringify!(phead),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptail) as usize - ptr as usize },
        3120usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_globals_t),
            "::",
            stringify!(ptail),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pavail) as usize - ptr as usize },
        3128usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_signal_globals_t),
            "::",
            stringify!(pavail),
        ),
    );
}
pub type zend_signal_globals_t = _zend_signal_globals_t;
extern "C" {
    pub static mut zend_signal_globals: zend_signal_globals_t;
}
extern "C" {
    pub fn zend_signal_handler_unblock();
}
extern "C" {
    pub fn zend_signal_activate();
}
extern "C" {
    pub fn zend_signal_deactivate();
}
extern "C" {
    pub fn zend_signal_startup();
}
extern "C" {
    pub fn zend_signal_init();
}
extern "C" {
    pub fn zend_signal(
        signo: ::std::os::raw::c_int,
        handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    );
}
extern "C" {
    pub fn zend_sigaction(
        signo: ::std::os::raw::c_int,
        act: *const sigaction,
        oldact: *mut sigaction,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_serialize_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_unserialize_data {
    _unused: [u8; 0],
}
pub type zend_serialize_data = _zend_serialize_data;
pub type zend_unserialize_data = _zend_unserialize_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_name {
    pub name: *mut zend_string,
    pub lc_name: *mut zend_string,
}
#[test]
fn bindgen_test_layout__zend_class_name() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_class_name> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_name>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_class_name)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_name>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_name)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_name),
            "::",
            stringify!(name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lc_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_name),
            "::",
            stringify!(lc_name),
        ),
    );
}
pub type zend_class_name = _zend_class_name;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_trait_method_reference {
    pub method_name: *mut zend_string,
    pub class_name: *mut zend_string,
}
#[test]
fn bindgen_test_layout__zend_trait_method_reference() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_trait_method_reference> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_trait_method_reference>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_trait_method_reference)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_trait_method_reference>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_trait_method_reference)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_method_reference),
            "::",
            stringify!(method_name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_method_reference),
            "::",
            stringify!(class_name),
        ),
    );
}
pub type zend_trait_method_reference = _zend_trait_method_reference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_trait_precedence {
    pub trait_method: zend_trait_method_reference,
    pub num_excludes: u32,
    pub exclude_class_names: [*mut zend_string; 1usize],
}
#[test]
fn bindgen_test_layout__zend_trait_precedence() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_trait_precedence> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_trait_precedence>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_trait_precedence)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_trait_precedence>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_trait_precedence)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trait_method) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_precedence),
            "::",
            stringify!(trait_method),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_excludes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_precedence),
            "::",
            stringify!(num_excludes),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).exclude_class_names) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_precedence),
            "::",
            stringify!(exclude_class_names),
        ),
    );
}
pub type zend_trait_precedence = _zend_trait_precedence;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_trait_alias {
    pub trait_method: zend_trait_method_reference,
    /// name for method to be added
    pub alias: *mut zend_string,
    /// modifiers to be set on trait method
    pub modifiers: u32,
}
#[test]
fn bindgen_test_layout__zend_trait_alias() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_trait_alias> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_trait_alias>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_trait_alias)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_trait_alias>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_trait_alias)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trait_method) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_alias),
            "::",
            stringify!(trait_method),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alias) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_alias),
            "::",
            stringify!(alias),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modifiers) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_alias),
            "::",
            stringify!(modifiers),
        ),
    );
}
pub type zend_trait_alias = _zend_trait_alias;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_mutable_data {
    pub default_properties_table: *mut zval,
    pub constants_table: *mut HashTable,
    pub ce_flags: u32,
    pub backed_enum_table: *mut HashTable,
}
#[test]
fn bindgen_test_layout__zend_class_mutable_data() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_class_mutable_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_mutable_data>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_class_mutable_data)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_mutable_data>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_mutable_data)),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).default_properties_table) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_mutable_data),
            "::",
            stringify!(default_properties_table),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constants_table) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_mutable_data),
            "::",
            stringify!(constants_table),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ce_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_mutable_data),
            "::",
            stringify!(ce_flags),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).backed_enum_table) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_mutable_data),
            "::",
            stringify!(backed_enum_table),
        ),
    );
}
pub type zend_class_mutable_data = _zend_class_mutable_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_dependency {
    pub name: *mut zend_string,
    pub ce: *mut zend_class_entry,
}
#[test]
fn bindgen_test_layout__zend_class_dependency() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_class_dependency> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_dependency>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_class_dependency)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_dependency>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_dependency)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_dependency),
            "::",
            stringify!(name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ce) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_dependency),
            "::",
            stringify!(ce),
        ),
    );
}
pub type zend_class_dependency = _zend_class_dependency;
pub type zend_inheritance_cache_entry = _zend_inheritance_cache_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_error_info {
    pub type_: ::std::os::raw::c_int,
    pub lineno: u32,
    pub filename: *mut zend_string,
    pub message: *mut zend_string,
}
#[test]
fn bindgen_test_layout__zend_error_info() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_error_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_error_info>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_error_info)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_error_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_error_info)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_error_info),
            "::",
            stringify!(type_),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineno) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_error_info),
            "::",
            stringify!(lineno),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_error_info),
            "::",
            stringify!(filename),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_error_info),
            "::",
            stringify!(message),
        ),
    );
}
pub type zend_error_info = _zend_error_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_inheritance_cache_entry {
    pub next: *mut zend_inheritance_cache_entry,
    pub ce: *mut zend_class_entry,
    pub parent: *mut zend_class_entry,
    pub dependencies: *mut zend_class_dependency,
    pub dependencies_count: u32,
    pub num_warnings: u32,
    pub warnings: *mut *mut zend_error_info,
    pub traits_and_interfaces: [*mut zend_class_entry; 1usize],
}
#[test]
fn bindgen_test_layout__zend_inheritance_cache_entry() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_inheritance_cache_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_inheritance_cache_entry>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_inheritance_cache_entry)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_inheritance_cache_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_inheritance_cache_entry)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_inheritance_cache_entry),
            "::",
            stringify!(next),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ce) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_inheritance_cache_entry),
            "::",
            stringify!(ce),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_inheritance_cache_entry),
            "::",
            stringify!(parent),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_inheritance_cache_entry),
            "::",
            stringify!(dependencies),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dependencies_count) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_inheritance_cache_entry),
            "::",
            stringify!(dependencies_count),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_warnings) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_inheritance_cache_entry),
            "::",
            stringify!(num_warnings),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).warnings) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_inheritance_cache_entry),
            "::",
            stringify!(warnings),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).traits_and_interfaces) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_inheritance_cache_entry),
            "::",
            stringify!(traits_and_interfaces),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_class_entry {
    pub type_: ::std::os::raw::c_char,
    pub name: *mut zend_string,
    pub __bindgen_anon_1: _zend_class_entry__bindgen_ty_1,
    pub refcount: ::std::os::raw::c_int,
    pub ce_flags: u32,
    pub default_properties_count: ::std::os::raw::c_int,
    pub default_static_members_count: ::std::os::raw::c_int,
    pub default_properties_table: *mut zval,
    pub default_static_members_table: *mut zval,
    pub static_members_table__ptr: *mut zval,
    pub function_table: HashTable,
    pub properties_info: HashTable,
    pub constants_table: HashTable,
    pub mutable_data__ptr: *mut zend_class_mutable_data,
    pub inheritance_cache: *mut zend_inheritance_cache_entry,
    pub properties_info_table: *mut *mut _zend_property_info,
    pub constructor: *mut zend_function,
    pub destructor: *mut zend_function,
    pub clone: *mut zend_function,
    pub __get: *mut zend_function,
    pub __set: *mut zend_function,
    pub __unset: *mut zend_function,
    pub __isset: *mut zend_function,
    pub __call: *mut zend_function,
    pub __callstatic: *mut zend_function,
    pub __tostring: *mut zend_function,
    pub __debugInfo: *mut zend_function,
    pub __serialize: *mut zend_function,
    pub __unserialize: *mut zend_function,
    pub default_object_handlers: *const zend_object_handlers,
    pub iterator_funcs_ptr: *mut zend_class_iterator_funcs,
    pub arrayaccess_funcs_ptr: *mut zend_class_arrayaccess_funcs,
    pub __bindgen_anon_2: _zend_class_entry__bindgen_ty_2,
    pub get_iterator: ::std::option::Option<
        unsafe extern "C" fn(
            ce: *mut zend_class_entry,
            object: *mut zval,
            by_ref: ::std::os::raw::c_int,
        ) -> *mut zend_object_iterator,
    >,
    pub get_static_method: ::std::option::Option<
        unsafe extern "C" fn(
            ce: *mut zend_class_entry,
            method: *mut zend_string,
        ) -> *mut zend_function,
    >,
    pub serialize: ::std::option::Option<
        unsafe extern "C" fn(
            object: *mut zval,
            buffer: *mut *mut ::std::os::raw::c_uchar,
            buf_len: *mut usize,
            data: *mut zend_serialize_data,
        ) -> ::std::os::raw::c_int,
    >,
    pub unserialize: ::std::option::Option<
        unsafe extern "C" fn(
            object: *mut zval,
            ce: *mut zend_class_entry,
            buf: *const ::std::os::raw::c_uchar,
            buf_len: usize,
            data: *mut zend_unserialize_data,
        ) -> ::std::os::raw::c_int,
    >,
    pub num_interfaces: u32,
    pub num_traits: u32,
    pub __bindgen_anon_3: _zend_class_entry__bindgen_ty_3,
    pub trait_names: *mut zend_class_name,
    pub trait_aliases: *mut *mut zend_trait_alias,
    pub trait_precedences: *mut *mut zend_trait_precedence,
    pub attributes: *mut HashTable,
    pub enum_backing_type: u32,
    pub backed_enum_table: *mut HashTable,
    pub info: _zend_class_entry__bindgen_ty_4,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_class_entry__bindgen_ty_1 {
    pub parent: *mut zend_class_entry,
    pub parent_name: *mut zend_string,
}
#[test]
fn bindgen_test_layout__zend_class_entry__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_class_entry__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_class_entry__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_entry__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_1),
            "::",
            stringify!(parent),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_1),
            "::",
            stringify!(parent_name),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_class_entry__bindgen_ty_2 {
    pub create_object: ::std::option::Option<
        unsafe extern "C" fn(class_type: *mut zend_class_entry) -> *mut zend_object,
    >,
    pub interface_gets_implemented: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *mut zend_class_entry,
            class_type: *mut zend_class_entry,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__zend_class_entry__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_class_entry__bindgen_ty_2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_class_entry__bindgen_ty_2)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_entry__bindgen_ty_2)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_2),
            "::",
            stringify!(create_object),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).interface_gets_implemented) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_2),
            "::",
            stringify!(interface_gets_implemented),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_class_entry__bindgen_ty_3 {
    pub interfaces: *mut *mut zend_class_entry,
    pub interface_names: *mut zend_class_name,
}
#[test]
fn bindgen_test_layout__zend_class_entry__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_class_entry__bindgen_ty_3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_class_entry__bindgen_ty_3)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_entry__bindgen_ty_3)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interfaces) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_3),
            "::",
            stringify!(interfaces),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_names) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_3),
            "::",
            stringify!(interface_names),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_class_entry__bindgen_ty_4 {
    pub user: _zend_class_entry__bindgen_ty_4__bindgen_ty_1,
    pub internal: _zend_class_entry__bindgen_ty_4__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_entry__bindgen_ty_4__bindgen_ty_1 {
    pub filename: *mut zend_string,
    pub line_start: u32,
    pub line_end: u32,
    pub doc_comment: *mut zend_string,
}
#[test]
fn bindgen_test_layout__zend_class_entry__bindgen_ty_4__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        _zend_class_entry__bindgen_ty_4__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry__bindgen_ty_4__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_class_entry__bindgen_ty_4__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry__bindgen_ty_4__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_zend_class_entry__bindgen_ty_4__bindgen_ty_1),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(filename),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(line_start),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_end) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(line_end),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).doc_comment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(doc_comment),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_entry__bindgen_ty_4__bindgen_ty_2 {
    pub builtin_functions: *const _zend_function_entry,
    pub module: *mut _zend_module_entry,
}
#[test]
fn bindgen_test_layout__zend_class_entry__bindgen_ty_4__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        _zend_class_entry__bindgen_ty_4__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry__bindgen_ty_4__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_class_entry__bindgen_ty_4__bindgen_ty_2)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry__bindgen_ty_4__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_zend_class_entry__bindgen_ty_4__bindgen_ty_2),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).builtin_functions) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_4__bindgen_ty_2),
            "::",
            stringify!(builtin_functions),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_4__bindgen_ty_2),
            "::",
            stringify!(module),
        ),
    );
}
#[test]
fn bindgen_test_layout__zend_class_entry__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_class_entry__bindgen_ty_4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry__bindgen_ty_4>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_class_entry__bindgen_ty_4)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_entry__bindgen_ty_4)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_4),
            "::",
            stringify!(user),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_4),
            "::",
            stringify!(internal),
        ),
    );
}
#[test]
fn bindgen_test_layout__zend_class_entry() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_class_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry>(),
        512usize,
        concat!("Size of: ", stringify!(_zend_class_entry)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_entry)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(type_),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(refcount),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ce_flags) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(ce_flags),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).default_properties_count) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(default_properties_count),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).default_static_members_count) as usize
                - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(default_static_members_count),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).default_properties_table) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(default_properties_table),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).default_static_members_table) as usize
                - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(default_static_members_table),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).static_members_table__ptr) as usize
                - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(static_members_table__ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function_table) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(function_table),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).properties_info) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(properties_info),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constants_table) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(constants_table),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mutable_data__ptr) as usize - ptr as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(mutable_data__ptr),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).inheritance_cache) as usize - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(inheritance_cache),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).properties_info_table) as usize - ptr as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(properties_info_table),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constructor) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(constructor),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destructor) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(destructor),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clone) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(clone),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__get) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__get),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__set) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__set),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__unset) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__unset),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__isset) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__isset),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__call) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__call),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__callstatic) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__callstatic),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__tostring) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__tostring),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__debugInfo) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__debugInfo),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__serialize) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__serialize),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__unserialize) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__unserialize),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).default_object_handlers) as usize - ptr as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(default_object_handlers),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iterator_funcs_ptr) as usize - ptr as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(iterator_funcs_ptr),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).arrayaccess_funcs_ptr) as usize - ptr as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(arrayaccess_funcs_ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_iterator) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(get_iterator),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_static_method) as usize - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(get_static_method),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serialize) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(serialize),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unserialize) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(unserialize),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_interfaces) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(num_interfaces),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_traits) as usize - ptr as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(num_traits),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trait_names) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(trait_names),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trait_aliases) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(trait_aliases),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).trait_precedences) as usize - ptr as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(trait_precedences),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(attributes),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).enum_backing_type) as usize - ptr as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(enum_backing_type),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).backed_enum_table) as usize - ptr as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(backed_enum_table),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(info),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_utility_functions {
    pub error_function: ::std::option::Option<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_int,
            error_filename: *mut zend_string,
            error_lineno: u32,
            message: *mut zend_string,
        ),
    >,
    pub printf_function: ::std::option::Option<
        unsafe extern "C" fn(format: *const ::std::os::raw::c_char, ...) -> usize,
    >,
    pub write_function: ::std::option::Option<
        unsafe extern "C" fn(
            str_: *const ::std::os::raw::c_char,
            str_length: usize,
        ) -> usize,
    >,
    pub fopen_function: ::std::option::Option<
        unsafe extern "C" fn(
            filename: *mut zend_string,
            opened_path: *mut *mut zend_string,
        ) -> *mut FILE,
    >,
    pub message_handler: ::std::option::Option<
        unsafe extern "C" fn(message: zend_long, data: *const ::std::os::raw::c_void),
    >,
    pub get_configuration_directive: ::std::option::Option<
        unsafe extern "C" fn(name: *mut zend_string) -> *mut zval,
    >,
    pub ticks_function: ::std::option::Option<
        unsafe extern "C" fn(ticks: ::std::os::raw::c_int),
    >,
    pub on_timeout: ::std::option::Option<
        unsafe extern "C" fn(seconds: ::std::os::raw::c_int),
    >,
    pub stream_open_function: ::std::option::Option<
        unsafe extern "C" fn(handle: *mut zend_file_handle) -> zend_result,
    >,
    pub printf_to_smart_string_function: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *mut smart_string,
            format: *const ::std::os::raw::c_char,
            ap: va_list,
        ),
    >,
    pub printf_to_smart_str_function: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *mut smart_str,
            format: *const ::std::os::raw::c_char,
            ap: va_list,
        ),
    >,
    pub getenv_function: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            name_len: usize,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub resolve_path_function: ::std::option::Option<
        unsafe extern "C" fn(filename: *mut zend_string) -> *mut zend_string,
    >,
}
#[test]
fn bindgen_test_layout__zend_utility_functions() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_utility_functions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_utility_functions>(),
        104usize,
        concat!("Size of: ", stringify!(_zend_utility_functions)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_utility_functions>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_utility_functions)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_function) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(error_function),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).printf_function) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(printf_function),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_function) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(write_function),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fopen_function) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(fopen_function),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message_handler) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(message_handler),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_configuration_directive) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(get_configuration_directive),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ticks_function) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(ticks_function),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).on_timeout) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(on_timeout),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).stream_open_function) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(stream_open_function),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).printf_to_smart_string_function) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(printf_to_smart_string_function),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).printf_to_smart_str_function) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(printf_to_smart_str_function),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getenv_function) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(getenv_function),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).resolve_path_function) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_functions),
            "::",
            stringify!(resolve_path_function),
        ),
    );
}
pub type zend_utility_functions = _zend_utility_functions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_utility_values {
    pub html_errors: bool,
}
#[test]
fn bindgen_test_layout__zend_utility_values() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_utility_values> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_utility_values>(),
        1usize,
        concat!("Size of: ", stringify!(_zend_utility_values)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_utility_values>(),
        1usize,
        concat!("Alignment of ", stringify!(_zend_utility_values)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).html_errors) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_utility_values),
            "::",
            stringify!(html_errors),
        ),
    );
}
pub type zend_utility_values = _zend_utility_values;
pub type zend_write_func_t = ::std::option::Option<
    unsafe extern "C" fn(str_: *const ::std::os::raw::c_char, str_length: usize) -> usize,
>;
extern "C" {
    pub fn zend_startup(utility_functions: *mut zend_utility_functions);
}
extern "C" {
    pub fn zend_shutdown();
}
extern "C" {
    pub fn zend_register_standard_ini_entries();
}
extern "C" {
    pub fn zend_post_startup() -> zend_result;
}
extern "C" {
    pub fn zend_set_utility_values(utility_values: *mut zend_utility_values);
}
extern "C" {
    pub fn _zend_bailout(filename: *const ::std::os::raw::c_char, lineno: u32) -> !;
}
extern "C" {
    pub fn zend_get_page_size() -> usize;
}
extern "C" {
    pub fn zend_vspprintf(
        pbuf: *mut *mut ::std::os::raw::c_char,
        max_len: usize,
        format: *const ::std::os::raw::c_char,
        ap: va_list,
    ) -> usize;
}
extern "C" {
    pub fn zend_spprintf(
        message: *mut *mut ::std::os::raw::c_char,
        max_len: usize,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> usize;
}
extern "C" {
    pub fn zend_vstrpprintf(
        max_len: usize,
        format: *const ::std::os::raw::c_char,
        ap: va_list,
    ) -> *mut zend_string;
}
extern "C" {
    pub fn zend_strpprintf(
        max_len: usize,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> *mut zend_string;
}
extern "C" {
    pub fn zend_spprintf_unchecked(
        message: *mut *mut ::std::os::raw::c_char,
        max_len: usize,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> usize;
}
extern "C" {
    pub fn zend_strpprintf_unchecked(
        max_len: usize,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> *mut zend_string;
}
extern "C" {
    pub fn get_zend_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_make_printable_zval(expr: *mut zval, expr_copy: *mut zval) -> bool;
}
extern "C" {
    pub fn zend_print_zval(expr: *mut zval, indent: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    pub fn zend_print_zval_r(expr: *mut zval, indent: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zend_print_zval_r_to_str(
        expr: *mut zval,
        indent: ::std::os::raw::c_int,
    ) -> *mut zend_string;
}
extern "C" {
    pub fn zend_print_flat_zval_r(expr: *mut zval);
}
extern "C" {
    pub fn zend_print_flat_zval_r_to_buf(str_: *mut smart_str, expr: *mut zval);
}
extern "C" {
    pub fn zend_output_debug_string(
        trigger_break: bool,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn zend_activate();
}
extern "C" {
    pub fn zend_deactivate();
}
extern "C" {
    pub fn zend_call_destructors();
}
extern "C" {
    pub fn zend_activate_modules();
}
extern "C" {
    pub fn zend_deactivate_modules();
}
extern "C" {
    pub fn zend_post_deactivate_modules();
}
extern "C" {
    pub fn free_estring(str_p: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub static mut zend_printf: ::std::option::Option<
        unsafe extern "C" fn(format: *const ::std::os::raw::c_char, ...) -> usize,
    >;
}
extern "C" {
    pub static mut zend_write: zend_write_func_t;
}
extern "C" {
    pub static mut zend_fopen: ::std::option::Option<
        unsafe extern "C" fn(
            filename: *mut zend_string,
            opened_path: *mut *mut zend_string,
        ) -> *mut FILE,
    >;
}
extern "C" {
    pub static mut zend_ticks_function: ::std::option::Option<
        unsafe extern "C" fn(ticks: ::std::os::raw::c_int),
    >;
}
extern "C" {
    pub static mut zend_interrupt_function: ::std::option::Option<
        unsafe extern "C" fn(execute_data: *mut zend_execute_data),
    >;
}
extern "C" {
    pub static mut zend_error_cb: ::std::option::Option<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_int,
            error_filename: *mut zend_string,
            error_lineno: u32,
            message: *mut zend_string,
        ),
    >;
}
extern "C" {
    pub static mut zend_on_timeout: ::std::option::Option<
        unsafe extern "C" fn(seconds: ::std::os::raw::c_int),
    >;
}
extern "C" {
    pub static mut zend_stream_open_function: ::std::option::Option<
        unsafe extern "C" fn(handle: *mut zend_file_handle) -> zend_result,
    >;
}
extern "C" {
    pub static mut zend_printf_to_smart_string: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *mut smart_string,
            format: *const ::std::os::raw::c_char,
            ap: va_list,
        ),
    >;
}
extern "C" {
    pub static mut zend_printf_to_smart_str: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *mut smart_str,
            format: *const ::std::os::raw::c_char,
            ap: va_list,
        ),
    >;
}
extern "C" {
    pub static mut zend_getenv: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            name_len: usize,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut zend_resolve_path: ::std::option::Option<
        unsafe extern "C" fn(filename: *mut zend_string) -> *mut zend_string,
    >;
}
extern "C" {
    pub static mut zend_post_startup_cb: ::std::option::Option<
        unsafe extern "C" fn() -> zend_result,
    >;
}
extern "C" {
    pub static mut zend_post_shutdown_cb: ::std::option::Option<unsafe extern "C" fn()>;
}
extern "C" {
    pub fn zend_error(
        type_: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn zend_error_noreturn(
        type_: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> !;
}
extern "C" {
    pub fn zend_error_unchecked(
        type_: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn zend_error_at(
        type_: ::std::os::raw::c_int,
        filename: *mut zend_string,
        lineno: u32,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn zend_error_at_noreturn(
        type_: ::std::os::raw::c_int,
        filename: *mut zend_string,
        lineno: u32,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> !;
}
extern "C" {
    pub fn zend_error_zstr(type_: ::std::os::raw::c_int, message: *mut zend_string);
}
extern "C" {
    pub fn zend_error_zstr_at(
        type_: ::std::os::raw::c_int,
        filename: *mut zend_string,
        lineno: u32,
        message: *mut zend_string,
    );
}
extern "C" {
    pub fn zend_throw_error(
        exception_ce: *mut zend_class_entry,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn zend_type_error(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zend_argument_count_error(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zend_value_error(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn zend_illegal_container_offset(
        container: *const zend_string,
        offset: *const zval,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zenderror(error: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zend_strerror_noreturn(
        type_: ::std::os::raw::c_int,
        errn: ::std::os::raw::c_int,
        message: *const ::std::os::raw::c_char,
    ) -> !;
}
extern "C" {
    pub static mut zend_standard_class_def: *mut zend_class_entry;
}
extern "C" {
    pub static mut zend_uv: zend_utility_values;
}
extern "C" {
    pub static mut zend_dtrace_enabled: bool;
}
extern "C" {
    pub fn zend_message_dispatcher(
        message: zend_long,
        data: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn zend_get_configuration_directive(name: *mut zend_string) -> *mut zval;
}
pub const zend_error_handling_t_EH_NORMAL: zend_error_handling_t = 0;
pub const zend_error_handling_t_EH_THROW: zend_error_handling_t = 1;
pub type zend_error_handling_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zend_error_handling {
    pub handling: zend_error_handling_t,
    pub exception: *mut zend_class_entry,
}
#[test]
fn bindgen_test_layout_zend_error_handling() {
    const UNINIT: ::std::mem::MaybeUninit<zend_error_handling> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<zend_error_handling>(),
        16usize,
        concat!("Size of: ", stringify!(zend_error_handling)),
    );
    assert_eq!(
        ::std::mem::align_of::<zend_error_handling>(),
        8usize,
        concat!("Alignment of ", stringify!(zend_error_handling)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handling) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zend_error_handling),
            "::",
            stringify!(handling),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exception) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zend_error_handling),
            "::",
            stringify!(exception),
        ),
    );
}
extern "C" {
    pub fn zend_save_error_handling(current: *mut zend_error_handling);
}
extern "C" {
    pub fn zend_replace_error_handling(
        error_handling: zend_error_handling_t,
        exception_class: *mut zend_class_entry,
        current: *mut zend_error_handling,
    );
}
extern "C" {
    pub fn zend_restore_error_handling(saved: *mut zend_error_handling);
}
extern "C" {
    pub fn zend_begin_record_errors();
}
extern "C" {
    pub fn zend_emit_recorded_errors();
}
extern "C" {
    pub fn zend_free_recorded_errors();
}
pub type zend_object_read_property_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zend_object,
        member: *mut zend_string,
        type_: ::std::os::raw::c_int,
        cache_slot: *mut *mut ::std::os::raw::c_void,
        rv: *mut zval,
    ) -> *mut zval,
>;
pub type zend_object_read_dimension_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zend_object,
        offset: *mut zval,
        type_: ::std::os::raw::c_int,
        rv: *mut zval,
    ) -> *mut zval,
>;
pub type zend_object_write_property_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zend_object,
        member: *mut zend_string,
        value: *mut zval,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    ) -> *mut zval,
>;
pub type zend_object_write_dimension_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zend_object, offset: *mut zval, value: *mut zval),
>;
pub type zend_object_get_property_ptr_ptr_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zend_object,
        member: *mut zend_string,
        type_: ::std::os::raw::c_int,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    ) -> *mut zval,
>;
pub type zend_object_has_property_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zend_object,
        member: *mut zend_string,
        has_set_exists: ::std::os::raw::c_int,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type zend_object_has_dimension_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zend_object,
        member: *mut zval,
        check_empty: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type zend_object_unset_property_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zend_object,
        member: *mut zend_string,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    ),
>;
pub type zend_object_unset_dimension_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zend_object, offset: *mut zval),
>;
pub type zend_object_get_properties_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zend_object) -> *mut HashTable,
>;
pub type zend_object_get_debug_info_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zend_object,
        is_temp: *mut ::std::os::raw::c_int,
    ) -> *mut HashTable,
>;
pub const _zend_prop_purpose_ZEND_PROP_PURPOSE_DEBUG: _zend_prop_purpose = 0;
pub const _zend_prop_purpose_ZEND_PROP_PURPOSE_ARRAY_CAST: _zend_prop_purpose = 1;
pub const _zend_prop_purpose_ZEND_PROP_PURPOSE_SERIALIZE: _zend_prop_purpose = 2;
pub const _zend_prop_purpose_ZEND_PROP_PURPOSE_VAR_EXPORT: _zend_prop_purpose = 3;
pub const _zend_prop_purpose_ZEND_PROP_PURPOSE_JSON: _zend_prop_purpose = 4;
pub const _zend_prop_purpose__ZEND_PROP_PURPOSE_NON_EXHAUSTIVE_ENUM: _zend_prop_purpose = 5;
pub type _zend_prop_purpose = ::std::os::raw::c_uint;
pub use self::_zend_prop_purpose as zend_prop_purpose;
pub type zend_object_get_properties_for_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zend_object,
        purpose: zend_prop_purpose,
    ) -> *mut zend_array,
>;
pub type zend_object_get_method_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut *mut zend_object,
        method: *mut zend_string,
        key: *const zval,
    ) -> *mut zend_function,
>;
pub type zend_object_get_constructor_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zend_object) -> *mut zend_function,
>;
pub type zend_object_free_obj_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zend_object),
>;
pub type zend_object_dtor_obj_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zend_object),
>;
pub type zend_object_clone_obj_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zend_object) -> *mut zend_object,
>;
pub type zend_object_get_class_name_t = ::std::option::Option<
    unsafe extern "C" fn(object: *const zend_object) -> *mut zend_string,
>;
pub type zend_object_compare_t = ::std::option::Option<
    unsafe extern "C" fn(object1: *mut zval, object2: *mut zval) -> ::std::os::raw::c_int,
>;
pub type zend_object_cast_t = ::std::option::Option<
    unsafe extern "C" fn(
        readobj: *mut zend_object,
        retval: *mut zval,
        type_: ::std::os::raw::c_int,
    ) -> zend_result,
>;
pub type zend_object_count_elements_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zend_object, count: *mut zend_long) -> zend_result,
>;
pub type zend_object_get_closure_t = ::std::option::Option<
    unsafe extern "C" fn(
        obj: *mut zend_object,
        ce_ptr: *mut *mut zend_class_entry,
        fptr_ptr: *mut *mut zend_function,
        obj_ptr: *mut *mut zend_object,
        check_only: bool,
    ) -> zend_result,
>;
pub type zend_object_get_gc_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zend_object,
        table: *mut *mut zval,
        n: *mut ::std::os::raw::c_int,
    ) -> *mut HashTable,
>;
pub type zend_object_do_operation_t = ::std::option::Option<
    unsafe extern "C" fn(
        opcode: u8,
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_object_handlers {
    pub offset: ::std::os::raw::c_int,
    pub free_obj: zend_object_free_obj_t,
    pub dtor_obj: zend_object_dtor_obj_t,
    pub clone_obj: zend_object_clone_obj_t,
    pub read_property: zend_object_read_property_t,
    pub write_property: zend_object_write_property_t,
    pub read_dimension: zend_object_read_dimension_t,
    pub write_dimension: zend_object_write_dimension_t,
    pub get_property_ptr_ptr: zend_object_get_property_ptr_ptr_t,
    pub has_property: zend_object_has_property_t,
    pub unset_property: zend_object_unset_property_t,
    pub has_dimension: zend_object_has_dimension_t,
    pub unset_dimension: zend_object_unset_dimension_t,
    pub get_properties: zend_object_get_properties_t,
    pub get_method: zend_object_get_method_t,
    pub get_constructor: zend_object_get_constructor_t,
    pub get_class_name: zend_object_get_class_name_t,
    pub cast_object: zend_object_cast_t,
    pub count_elements: zend_object_count_elements_t,
    pub get_debug_info: zend_object_get_debug_info_t,
    pub get_closure: zend_object_get_closure_t,
    pub get_gc: zend_object_get_gc_t,
    pub do_operation: zend_object_do_operation_t,
    pub compare: zend_object_compare_t,
    pub get_properties_for: zend_object_get_properties_for_t,
}
#[test]
fn bindgen_test_layout__zend_object_handlers() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_object_handlers> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_object_handlers>(),
        200usize,
        concat!("Size of: ", stringify!(_zend_object_handlers)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_object_handlers>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_object_handlers)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(offset),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_obj) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(free_obj),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dtor_obj) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(dtor_obj),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clone_obj) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(clone_obj),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_property) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(read_property),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_property) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(write_property),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_dimension) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(read_dimension),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_dimension) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(write_dimension),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_property_ptr_ptr) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_property_ptr_ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_property) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(has_property),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unset_property) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(unset_property),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_dimension) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(has_dimension),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unset_dimension) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(unset_dimension),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_properties) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_properties),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_method) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_method),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_constructor) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_constructor),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_class_name) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_class_name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cast_object) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(cast_object),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count_elements) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(count_elements),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_debug_info) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_debug_info),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_closure) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_closure),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_gc) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_gc),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_operation) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(do_operation),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compare) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(compare),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_properties_for) as usize - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_properties_for),
        ),
    );
}
extern "C" {
    pub static std_object_handlers: zend_object_handlers;
}
extern "C" {
    pub fn zend_class_init_statics(ce: *mut zend_class_entry);
}
extern "C" {
    pub fn zend_std_get_static_method(
        ce: *mut zend_class_entry,
        function_name_strval: *mut zend_string,
        key: *const zval,
    ) -> *mut zend_function;
}
extern "C" {
    pub fn zend_std_get_static_property_with_info(
        ce: *mut zend_class_entry,
        property_name: *mut zend_string,
        type_: ::std::os::raw::c_int,
        prop_info: *mut *mut _zend_property_info,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_std_get_static_property(
        ce: *mut zend_class_entry,
        property_name: *mut zend_string,
        type_: ::std::os::raw::c_int,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_std_unset_static_property(
        ce: *mut zend_class_entry,
        property_name: *mut zend_string,
    ) -> bool;
}
extern "C" {
    pub fn zend_std_get_constructor(object: *mut zend_object) -> *mut zend_function;
}
extern "C" {
    pub fn zend_get_property_info(
        ce: *const zend_class_entry,
        member: *mut zend_string,
        silent: ::std::os::raw::c_int,
    ) -> *mut _zend_property_info;
}
extern "C" {
    pub fn zend_std_get_properties(object: *mut zend_object) -> *mut HashTable;
}
extern "C" {
    pub fn zend_std_get_gc(
        object: *mut zend_object,
        table: *mut *mut zval,
        n: *mut ::std::os::raw::c_int,
    ) -> *mut HashTable;
}
extern "C" {
    pub fn zend_std_get_debug_info(
        object: *mut zend_object,
        is_temp: *mut ::std::os::raw::c_int,
    ) -> *mut HashTable;
}
extern "C" {
    pub fn zend_std_cast_object_tostring(
        object: *mut zend_object,
        writeobj: *mut zval,
        type_: ::std::os::raw::c_int,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_std_get_property_ptr_ptr(
        object: *mut zend_object,
        member: *mut zend_string,
        type_: ::std::os::raw::c_int,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_std_read_property(
        object: *mut zend_object,
        member: *mut zend_string,
        type_: ::std::os::raw::c_int,
        cache_slot: *mut *mut ::std::os::raw::c_void,
        rv: *mut zval,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_std_write_property(
        object: *mut zend_object,
        member: *mut zend_string,
        value: *mut zval,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_std_has_property(
        object: *mut zend_object,
        member: *mut zend_string,
        has_set_exists: ::std::os::raw::c_int,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_std_unset_property(
        object: *mut zend_object,
        member: *mut zend_string,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn zend_std_read_dimension(
        object: *mut zend_object,
        offset: *mut zval,
        type_: ::std::os::raw::c_int,
        rv: *mut zval,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_std_write_dimension(
        object: *mut zend_object,
        offset: *mut zval,
        value: *mut zval,
    );
}
extern "C" {
    pub fn zend_std_has_dimension(
        object: *mut zend_object,
        offset: *mut zval,
        check_empty: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_std_unset_dimension(object: *mut zend_object, offset: *mut zval);
}
extern "C" {
    pub fn zend_std_get_method(
        obj_ptr: *mut *mut zend_object,
        method_name: *mut zend_string,
        key: *const zval,
    ) -> *mut zend_function;
}
extern "C" {
    pub fn zend_std_get_class_name(zobj: *const zend_object) -> *mut zend_string;
}
extern "C" {
    pub fn zend_std_compare_objects(
        o1: *mut zval,
        o2: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_std_get_closure(
        obj: *mut zend_object,
        ce_ptr: *mut *mut zend_class_entry,
        fptr_ptr: *mut *mut zend_function,
        obj_ptr: *mut *mut zend_object,
        check_only: bool,
    ) -> zend_result;
}
extern "C" {
    pub fn rebuild_object_properties(zobj: *mut zend_object);
}
extern "C" {
    pub fn zend_std_build_object_properties_array(
        zobj: *mut zend_object,
    ) -> *mut HashTable;
}
extern "C" {
    pub fn zend_objects_not_comparable(
        o1: *mut zval,
        o2: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_check_protected(
        ce: *const zend_class_entry,
        scope: *const zend_class_entry,
    ) -> bool;
}
extern "C" {
    pub fn zend_check_property_access(
        zobj: *const zend_object,
        prop_info_name: *mut zend_string,
        is_dynamic: bool,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_get_call_trampoline_func(
        ce: *const zend_class_entry,
        method_name: *mut zend_string,
        is_static: bool,
    ) -> *mut zend_function;
}
extern "C" {
    pub fn zend_get_property_guard(
        zobj: *mut zend_object,
        member: *mut zend_string,
    ) -> *mut u32;
}
extern "C" {
    pub fn zend_get_recursion_guard(zobj: *mut zend_object) -> *mut u32;
}
extern "C" {
    pub fn zend_std_get_properties_for(
        obj: *mut zend_object,
        purpose: zend_prop_purpose,
    ) -> *mut HashTable;
}
extern "C" {
    pub fn zend_get_properties_for(
        obj: *mut zval,
        purpose: zend_prop_purpose,
    ) -> *mut HashTable;
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub static mut program_invocation_name: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut program_invocation_short_name: *mut ::std::os::raw::c_char;
}
pub type error_t = ::std::os::raw::c_int;
extern "C" {
    pub fn zend_freedtoa(s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn zend_dtoa(
        _d: f64,
        mode: ::std::os::raw::c_int,
        ndigits: ::std::os::raw::c_int,
        decpt: *mut ::std::os::raw::c_int,
        sign: *mut bool,
        rve: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_gcvt(
        value: f64,
        ndigit: ::std::os::raw::c_int,
        dec_point: ::std::os::raw::c_char,
        exponent: ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_strtod(
        s00: *const ::std::os::raw::c_char,
        se: *mut *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn zend_hex_strtod(
        str_: *const ::std::os::raw::c_char,
        endptr: *mut *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn zend_oct_strtod(
        str_: *const ::std::os::raw::c_char,
        endptr: *mut *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn zend_bin_strtod(
        str_: *const ::std::os::raw::c_char,
        endptr: *mut *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn zend_startup_strtod() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_shutdown_strtod() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn sub_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn mul_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn pow_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn div_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn mod_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn boolean_xor_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn boolean_not_function(result: *mut zval, op1: *mut zval) -> zend_result;
}
extern "C" {
    pub fn bitwise_not_function(result: *mut zval, op1: *mut zval) -> zend_result;
}
extern "C" {
    pub fn bitwise_or_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn bitwise_and_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn bitwise_xor_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn shift_left_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn shift_right_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn concat_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_is_identical(op1: *const zval, op2: *const zval) -> bool;
}
extern "C" {
    pub fn is_equal_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn is_identical_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn is_not_identical_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn is_not_equal_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn is_smaller_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn is_smaller_or_equal_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_class_implements_interface(
        class_ce: *const zend_class_entry,
        interface_ce: *const zend_class_entry,
    ) -> bool;
}
extern "C" {
    pub fn instanceof_function_slow(
        instance_ce: *const zend_class_entry,
        ce: *const zend_class_entry,
    ) -> bool;
}
extern "C" {
    pub fn zend_string_only_has_ascii_alphanumeric(str_: *const zend_string) -> bool;
}
extern "C" {
    /** Checks whether the string "str" with length "length" is numeric. The value
 of allow_errors determines whether it's required to be entirely numeric, or
 just its prefix. Leading whitespace is allowed.

 The function returns 0 if the string did not contain a valid number; IS_LONG
 if it contained a number that fits within the range of a long; or IS_DOUBLE
 if the number was out of long range or contained a decimal point/exponent.
 The number's value is returned into the respective pointer, *lval or *dval,
 if that pointer is not NULL.

 This variant also gives information if a string that represents an integer
 could not be represented as such due to overflow. It writes 1 to oflow_info
 if the integer is larger than ZEND_LONG_MAX and -1 if it's smaller than ZEND_LONG_MIN.*/
    pub fn _is_numeric_string_ex(
        str_: *const ::std::os::raw::c_char,
        length: usize,
        lval: *mut zend_long,
        dval: *mut f64,
        allow_errors: bool,
        oflow_info: *mut ::std::os::raw::c_int,
        trailing_data: *mut bool,
    ) -> u8;
}
extern "C" {
    pub fn zend_memnstr_ex(
        haystack: *const ::std::os::raw::c_char,
        needle: *const ::std::os::raw::c_char,
        needle_len: usize,
        end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_memnrstr_ex(
        haystack: *const ::std::os::raw::c_char,
        needle: *const ::std::os::raw::c_char,
        needle_len: usize,
        end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_dval_to_lval_slow(d: f64) -> zend_long;
}
extern "C" {
    pub fn zend_incompatible_double_to_long_error(d: f64);
}
extern "C" {
    pub fn zend_incompatible_string_to_long_error(s: *const zend_string);
}
extern "C" {
    pub fn is_numeric_str_function(
        str_: *const zend_string,
        lval: *mut zend_long,
        dval: *mut f64,
    ) -> u8;
}
extern "C" {
    pub fn increment_function(op1: *mut zval) -> zend_result;
}
extern "C" {
    pub fn decrement_function(op2: *mut zval) -> zend_result;
}
extern "C" {
    pub fn convert_scalar_to_number(op: *mut zval);
}
extern "C" {
    pub fn _convert_to_string(op: *mut zval);
}
extern "C" {
    pub fn convert_to_long(op: *mut zval);
}
extern "C" {
    pub fn convert_to_double(op: *mut zval);
}
extern "C" {
    pub fn convert_to_null(op: *mut zval);
}
extern "C" {
    pub fn convert_to_boolean(op: *mut zval);
}
extern "C" {
    pub fn convert_to_array(op: *mut zval);
}
extern "C" {
    pub fn convert_to_object(op: *mut zval);
}
extern "C" {
    pub fn zval_get_long_func(op: *const zval, is_strict: bool) -> zend_long;
}
extern "C" {
    pub fn zval_try_get_long(op: *const zval, failed: *mut bool) -> zend_long;
}
extern "C" {
    pub fn zval_get_double_func(op: *const zval) -> f64;
}
extern "C" {
    pub fn zval_get_string_func(op: *mut zval) -> *mut zend_string;
}
extern "C" {
    pub fn zval_try_get_string_func(op: *mut zval) -> *mut zend_string;
}
extern "C" {
    pub fn _try_convert_to_string(op: *mut zval) -> bool;
}
extern "C" {
    pub fn zend_is_true(op: *const zval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_object_is_true(op: *const zval) -> bool;
}
extern "C" {
    pub fn zend_compare(op1: *mut zval, op2: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn compare_function(
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn numeric_compare_function(
        op1: *mut zval,
        op2: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn string_compare_function_ex(
        op1: *mut zval,
        op2: *mut zval,
        case_insensitive: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn string_compare_function(
        op1: *mut zval,
        op2: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn string_case_compare_function(
        op1: *mut zval,
        op2: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn string_locale_compare_function(
        op1: *mut zval,
        op2: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static zend_tolower_map: [::std::os::raw::c_uchar; 256usize];
}
extern "C" {
    pub static zend_toupper_map: [::std::os::raw::c_uchar; 256usize];
}
extern "C" {
    pub fn zend_str_tolower(str_: *mut ::std::os::raw::c_char, length: usize);
}
extern "C" {
    pub fn zend_str_toupper(str_: *mut ::std::os::raw::c_char, length: usize);
}
extern "C" {
    pub fn zend_str_tolower_copy(
        dest: *mut ::std::os::raw::c_char,
        source: *const ::std::os::raw::c_char,
        length: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_str_toupper_copy(
        dest: *mut ::std::os::raw::c_char,
        source: *const ::std::os::raw::c_char,
        length: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_str_tolower_dup(
        source: *const ::std::os::raw::c_char,
        length: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_str_toupper_dup(
        source: *const ::std::os::raw::c_char,
        length: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_str_tolower_dup_ex(
        source: *const ::std::os::raw::c_char,
        length: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_str_toupper_dup_ex(
        source: *const ::std::os::raw::c_char,
        length: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_string_tolower_ex(
        str_: *mut zend_string,
        persistent: bool,
    ) -> *mut zend_string;
}
extern "C" {
    pub fn zend_string_toupper_ex(
        str_: *mut zend_string,
        persistent: bool,
    ) -> *mut zend_string;
}
extern "C" {
    pub fn zend_binary_zval_strcmp(
        s1: *mut zval,
        s2: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_binary_zval_strncmp(
        s1: *mut zval,
        s2: *mut zval,
        s3: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_binary_strcmp(
        s1: *const ::std::os::raw::c_char,
        len1: usize,
        s2: *const ::std::os::raw::c_char,
        len2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_binary_strncmp(
        s1: *const ::std::os::raw::c_char,
        len1: usize,
        s2: *const ::std::os::raw::c_char,
        len2: usize,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_binary_strcasecmp(
        s1: *const ::std::os::raw::c_char,
        len1: usize,
        s2: *const ::std::os::raw::c_char,
        len2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_binary_strncasecmp(
        s1: *const ::std::os::raw::c_char,
        len1: usize,
        s2: *const ::std::os::raw::c_char,
        len2: usize,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_binary_strcasecmp_l(
        s1: *const ::std::os::raw::c_char,
        len1: usize,
        s2: *const ::std::os::raw::c_char,
        len2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_binary_strncasecmp_l(
        s1: *const ::std::os::raw::c_char,
        len1: usize,
        s2: *const ::std::os::raw::c_char,
        len2: usize,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zendi_smart_streq(s1: *mut zend_string, s2: *mut zend_string) -> bool;
}
extern "C" {
    pub fn zendi_smart_strcmp(
        s1: *mut zend_string,
        s2: *mut zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_compare_symbol_tables(
        ht1: *mut HashTable,
        ht2: *mut HashTable,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_compare_arrays(a1: *mut zval, a2: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_compare_objects(o1: *mut zval, o2: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Deprecatd in favor of ZEND_STRTOL()
    pub fn zend_atoi(
        str_: *const ::std::os::raw::c_char,
        str_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Deprecatd in favor of ZEND_STRTOL()
    pub fn zend_atol(str_: *const ::std::os::raw::c_char, str_len: usize) -> zend_long;
}
extern "C" {
    pub fn zend_update_current_locale();
}
extern "C" {
    pub fn zend_reset_lc_ctype_locale();
}
extern "C" {
    pub fn zend_long_to_str(num: zend_long) -> *mut zend_string;
}
extern "C" {
    pub fn zend_ulong_to_str(num: zend_ulong) -> *mut zend_string;
}
extern "C" {
    pub fn zend_u64_to_str(num: u64) -> *mut zend_string;
}
extern "C" {
    pub fn zend_i64_to_str(num: i64) -> *mut zend_string;
}
extern "C" {
    pub fn zend_double_to_str(num: f64) -> *mut zend_string;
}
pub type zend_op_array = _zend_op_array;
pub type zend_op = _zend_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _znode_op {
    pub constant: u32,
    pub var: u32,
    pub num: u32,
    pub opline_num: u32,
    pub jmp_offset: u32,
}
#[test]
fn bindgen_test_layout__znode_op() {
    const UNINIT: ::std::mem::MaybeUninit<_znode_op> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_znode_op>(),
        4usize,
        concat!("Size of: ", stringify!(_znode_op)),
    );
    assert_eq!(
        ::std::mem::align_of::<_znode_op>(),
        4usize,
        concat!("Alignment of ", stringify!(_znode_op)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constant) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_znode_op), "::", stringify!(constant)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).var) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_znode_op), "::", stringify!(var)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_znode_op), "::", stringify!(num)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opline_num) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_znode_op), "::", stringify!(opline_num)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jmp_offset) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_znode_op), "::", stringify!(jmp_offset)),
    );
}
pub type znode_op = _znode_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _znode {
    pub op_type: u8,
    pub flag: u8,
    pub u: _znode__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _znode__bindgen_ty_1 {
    pub op: znode_op,
    pub constant: zval,
}
#[test]
fn bindgen_test_layout__znode__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_znode__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_znode__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(_znode__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_znode__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_znode__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_znode__bindgen_ty_1),
            "::",
            stringify!(op),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constant) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_znode__bindgen_ty_1),
            "::",
            stringify!(constant),
        ),
    );
}
#[test]
fn bindgen_test_layout__znode() {
    const UNINIT: ::std::mem::MaybeUninit<_znode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_znode>(),
        24usize,
        concat!("Size of: ", stringify!(_znode)),
    );
    assert_eq!(
        ::std::mem::align_of::<_znode>(),
        8usize,
        concat!("Alignment of ", stringify!(_znode)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_znode), "::", stringify!(op_type)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(_znode), "::", stringify!(flag)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_znode), "::", stringify!(u)),
    );
}
pub type znode = _znode;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_ast_znode {
    pub kind: zend_ast_kind,
    pub attr: zend_ast_attr,
    pub lineno: u32,
    pub node: znode,
}
#[test]
fn bindgen_test_layout__zend_ast_znode() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_ast_znode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_ast_znode>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_ast_znode)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ast_znode>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ast_znode)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_ast_znode), "::", stringify!(kind)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(_zend_ast_znode), "::", stringify!(attr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineno) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_znode),
            "::",
            stringify!(lineno),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_ast_znode), "::", stringify!(node)),
    );
}
pub type zend_ast_znode = _zend_ast_znode;
extern "C" {
    pub fn zend_ast_create_znode(node: *mut znode) -> *mut zend_ast;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_declarables {
    pub ticks: zend_long,
}
#[test]
fn bindgen_test_layout__zend_declarables() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_declarables> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_declarables>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_declarables)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_declarables>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_declarables)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ticks) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_declarables),
            "::",
            stringify!(ticks),
        ),
    );
}
pub type zend_declarables = _zend_declarables;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_file_context {
    pub declarables: zend_declarables,
    pub current_namespace: *mut zend_string,
    pub in_namespace: bool,
    pub has_bracketed_namespaces: bool,
    pub imports: *mut HashTable,
    pub imports_function: *mut HashTable,
    pub imports_const: *mut HashTable,
    pub seen_symbols: HashTable,
}
#[test]
fn bindgen_test_layout__zend_file_context() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_file_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_file_context>(),
        104usize,
        concat!("Size of: ", stringify!(_zend_file_context)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_file_context>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_file_context)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).declarables) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_context),
            "::",
            stringify!(declarables),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).current_namespace) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_context),
            "::",
            stringify!(current_namespace),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_namespace) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_context),
            "::",
            stringify!(in_namespace),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).has_bracketed_namespaces) as usize - ptr as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_context),
            "::",
            stringify!(has_bracketed_namespaces),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imports) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_context),
            "::",
            stringify!(imports),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imports_function) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_context),
            "::",
            stringify!(imports_function),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imports_const) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_context),
            "::",
            stringify!(imports_const),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seen_symbols) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_file_context),
            "::",
            stringify!(seen_symbols),
        ),
    );
}
pub type zend_file_context = _zend_file_context;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_parser_stack_elem {
    pub ast: *mut zend_ast,
    pub str_: *mut zend_string,
    pub num: zend_ulong,
    pub ptr: *mut ::std::os::raw::c_uchar,
    pub ident: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__zend_parser_stack_elem() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_parser_stack_elem> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_parser_stack_elem>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_parser_stack_elem)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_parser_stack_elem>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_parser_stack_elem)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ast) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_parser_stack_elem),
            "::",
            stringify!(ast),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_parser_stack_elem),
            "::",
            stringify!(str_),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_parser_stack_elem),
            "::",
            stringify!(num),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_parser_stack_elem),
            "::",
            stringify!(ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ident) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_parser_stack_elem),
            "::",
            stringify!(ident),
        ),
    );
}
pub type zend_parser_stack_elem = _zend_parser_stack_elem;
extern "C" {
    pub fn zend_compile_top_stmt(ast: *mut zend_ast);
}
extern "C" {
    pub fn zend_const_expr_to_zval(
        result: *mut zval,
        ast_ptr: *mut *mut zend_ast,
        allow_dynamic: bool,
    );
}
pub type user_opcode_handler_t = ::std::option::Option<
    unsafe extern "C" fn(execute_data: *mut zend_execute_data) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_op {
    pub handler: *const ::std::os::raw::c_void,
    pub op1: znode_op,
    pub op2: znode_op,
    pub result: znode_op,
    pub extended_value: u32,
    pub lineno: u32,
    pub opcode: u8,
    pub op1_type: u8,
    pub op2_type: u8,
    pub result_type: u8,
}
#[test]
fn bindgen_test_layout__zend_op() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_op> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_op>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_op)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_op>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_op)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_op), "::", stringify!(handler)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op1) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_op), "::", stringify!(op1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op2) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(_zend_op), "::", stringify!(op2)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_zend_op), "::", stringify!(result)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extended_value) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(extended_value),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineno) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_zend_op), "::", stringify!(lineno)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(_zend_op), "::", stringify!(opcode)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op1_type) as usize - ptr as usize },
        29usize,
        concat!("Offset of field: ", stringify!(_zend_op), "::", stringify!(op1_type)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op2_type) as usize - ptr as usize },
        30usize,
        concat!("Offset of field: ", stringify!(_zend_op), "::", stringify!(op2_type)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result_type) as usize - ptr as usize },
        31usize,
        concat!("Offset of field: ", stringify!(_zend_op), "::", stringify!(result_type)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_brk_cont_element {
    pub start: ::std::os::raw::c_int,
    pub cont: ::std::os::raw::c_int,
    pub brk: ::std::os::raw::c_int,
    pub parent: ::std::os::raw::c_int,
    pub is_switch: bool,
}
#[test]
fn bindgen_test_layout__zend_brk_cont_element() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_brk_cont_element> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_brk_cont_element>(),
        20usize,
        concat!("Size of: ", stringify!(_zend_brk_cont_element)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_brk_cont_element>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_brk_cont_element)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_brk_cont_element),
            "::",
            stringify!(start),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cont) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_brk_cont_element),
            "::",
            stringify!(cont),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).brk) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_brk_cont_element),
            "::",
            stringify!(brk),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_brk_cont_element),
            "::",
            stringify!(parent),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_switch) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_brk_cont_element),
            "::",
            stringify!(is_switch),
        ),
    );
}
pub type zend_brk_cont_element = _zend_brk_cont_element;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_label {
    pub brk_cont: ::std::os::raw::c_int,
    pub opline_num: u32,
}
#[test]
fn bindgen_test_layout__zend_label() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_label> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_label>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_label)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_label>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_label)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).brk_cont) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_label), "::", stringify!(brk_cont)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opline_num) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_label),
            "::",
            stringify!(opline_num),
        ),
    );
}
pub type zend_label = _zend_label;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_try_catch_element {
    pub try_op: u32,
    pub catch_op: u32,
    pub finally_op: u32,
    pub finally_end: u32,
}
#[test]
fn bindgen_test_layout__zend_try_catch_element() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_try_catch_element> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_try_catch_element>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_try_catch_element)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_try_catch_element>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_try_catch_element)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).try_op) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_try_catch_element),
            "::",
            stringify!(try_op),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).catch_op) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_try_catch_element),
            "::",
            stringify!(catch_op),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).finally_op) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_try_catch_element),
            "::",
            stringify!(finally_op),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).finally_end) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_try_catch_element),
            "::",
            stringify!(finally_end),
        ),
    );
}
pub type zend_try_catch_element = _zend_try_catch_element;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_live_range {
    pub var: u32,
    pub start: u32,
    pub end: u32,
}
#[test]
fn bindgen_test_layout__zend_live_range() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_live_range> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_live_range>(),
        12usize,
        concat!("Size of: ", stringify!(_zend_live_range)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_live_range>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_live_range)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).var) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_live_range), "::", stringify!(var)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_live_range),
            "::",
            stringify!(start),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_live_range), "::", stringify!(end)),
    );
}
pub type zend_live_range = _zend_live_range;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_oparray_context {
    pub opcodes_size: u32,
    pub vars_size: ::std::os::raw::c_int,
    pub literals_size: ::std::os::raw::c_int,
    pub fast_call_var: u32,
    pub try_catch_offset: u32,
    pub current_brk_cont: ::std::os::raw::c_int,
    pub last_brk_cont: ::std::os::raw::c_int,
    pub brk_cont_array: *mut zend_brk_cont_element,
    pub labels: *mut HashTable,
}
#[test]
fn bindgen_test_layout__zend_oparray_context() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_oparray_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_oparray_context>(),
        48usize,
        concat!("Size of: ", stringify!(_zend_oparray_context)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_oparray_context>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_oparray_context)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcodes_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_oparray_context),
            "::",
            stringify!(opcodes_size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vars_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_oparray_context),
            "::",
            stringify!(vars_size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).literals_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_oparray_context),
            "::",
            stringify!(literals_size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fast_call_var) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_oparray_context),
            "::",
            stringify!(fast_call_var),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).try_catch_offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_oparray_context),
            "::",
            stringify!(try_catch_offset),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_brk_cont) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_oparray_context),
            "::",
            stringify!(current_brk_cont),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_brk_cont) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_oparray_context),
            "::",
            stringify!(last_brk_cont),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).brk_cont_array) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_oparray_context),
            "::",
            stringify!(brk_cont_array),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).labels) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_oparray_context),
            "::",
            stringify!(labels),
        ),
    );
}
pub type zend_oparray_context = _zend_oparray_context;
extern "C" {
    pub fn zend_visibility_string(fn_flags: u32) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_property_info {
    pub offset: u32,
    pub flags: u32,
    pub name: *mut zend_string,
    pub doc_comment: *mut zend_string,
    pub attributes: *mut HashTable,
    pub ce: *mut zend_class_entry,
    pub type_: zend_type,
}
#[test]
fn bindgen_test_layout__zend_property_info() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_property_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_property_info>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_property_info)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_property_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_property_info)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_property_info),
            "::",
            stringify!(offset),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_property_info),
            "::",
            stringify!(flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_property_info),
            "::",
            stringify!(name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).doc_comment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_property_info),
            "::",
            stringify!(doc_comment),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_property_info),
            "::",
            stringify!(attributes),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ce) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_property_info),
            "::",
            stringify!(ce),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_property_info),
            "::",
            stringify!(type_),
        ),
    );
}
pub type zend_property_info = _zend_property_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_class_constant {
    pub value: zval,
    pub doc_comment: *mut zend_string,
    pub attributes: *mut HashTable,
    pub ce: *mut zend_class_entry,
    pub type_: zend_type,
}
#[test]
fn bindgen_test_layout__zend_class_constant() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_class_constant> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_constant>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_class_constant)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_constant>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_constant)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_constant),
            "::",
            stringify!(value),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).doc_comment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_constant),
            "::",
            stringify!(doc_comment),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_constant),
            "::",
            stringify!(attributes),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ce) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_constant),
            "::",
            stringify!(ce),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_constant),
            "::",
            stringify!(type_),
        ),
    );
}
pub type zend_class_constant = _zend_class_constant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_internal_arg_info {
    pub name: *const ::std::os::raw::c_char,
    pub type_: zend_type,
    pub default_value: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__zend_internal_arg_info() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_internal_arg_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_internal_arg_info>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_internal_arg_info)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_internal_arg_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_internal_arg_info)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_arg_info),
            "::",
            stringify!(name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_arg_info),
            "::",
            stringify!(type_),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_arg_info),
            "::",
            stringify!(default_value),
        ),
    );
}
pub type zend_internal_arg_info = _zend_internal_arg_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_arg_info {
    pub name: *mut zend_string,
    pub type_: zend_type,
    pub default_value: *mut zend_string,
}
#[test]
fn bindgen_test_layout__zend_arg_info() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_arg_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_arg_info>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_arg_info)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_arg_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_arg_info)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_arg_info), "::", stringify!(name)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_arg_info), "::", stringify!(type_)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_arg_info),
            "::",
            stringify!(default_value),
        ),
    );
}
pub type zend_arg_info = _zend_arg_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_internal_function_info {
    pub required_num_args: usize,
    pub type_: zend_type,
    pub default_value: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__zend_internal_function_info() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_internal_function_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_internal_function_info>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_internal_function_info)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_internal_function_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_internal_function_info)),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).required_num_args) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function_info),
            "::",
            stringify!(required_num_args),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function_info),
            "::",
            stringify!(type_),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function_info),
            "::",
            stringify!(default_value),
        ),
    );
}
pub type zend_internal_function_info = _zend_internal_function_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_op_array {
    pub type_: u8,
    pub arg_flags: [u8; 3usize],
    pub fn_flags: u32,
    pub function_name: *mut zend_string,
    pub scope: *mut zend_class_entry,
    pub prototype: *mut zend_function,
    pub num_args: u32,
    pub required_num_args: u32,
    pub arg_info: *mut zend_arg_info,
    pub attributes: *mut HashTable,
    pub run_time_cache__ptr: *mut *mut ::std::os::raw::c_void,
    pub T: u32,
    pub cache_size: ::std::os::raw::c_int,
    pub last_var: ::std::os::raw::c_int,
    pub last: u32,
    pub opcodes: *mut zend_op,
    pub static_variables_ptr__ptr: *mut HashTable,
    pub static_variables: *mut HashTable,
    pub vars: *mut *mut zend_string,
    pub refcount: *mut u32,
    pub last_live_range: ::std::os::raw::c_int,
    pub last_try_catch: ::std::os::raw::c_int,
    pub live_range: *mut zend_live_range,
    pub try_catch_array: *mut zend_try_catch_element,
    pub filename: *mut zend_string,
    pub line_start: u32,
    pub line_end: u32,
    pub doc_comment: *mut zend_string,
    pub last_literal: ::std::os::raw::c_int,
    pub num_dynamic_func_defs: u32,
    pub literals: *mut zval,
    pub dynamic_func_defs: *mut *mut zend_op_array,
    pub reserved: [*mut ::std::os::raw::c_void; 6usize],
}
#[test]
fn bindgen_test_layout__zend_op_array() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_op_array> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_op_array>(),
        240usize,
        concat!("Size of: ", stringify!(_zend_op_array)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_op_array>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_op_array)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_op_array), "::", stringify!(type_)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_flags) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(arg_flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fn_flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(fn_flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(function_name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scope) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_zend_op_array), "::", stringify!(scope)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prototype) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(prototype),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_args) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(num_args),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).required_num_args) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(required_num_args),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_info) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(arg_info),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(attributes),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).run_time_cache__ptr) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(run_time_cache__ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).T) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(_zend_op_array), "::", stringify!(T)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_size) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(cache_size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_var) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(last_var),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize },
        76usize,
        concat!("Offset of field: ", stringify!(_zend_op_array), "::", stringify!(last)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcodes) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(opcodes),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).static_variables_ptr__ptr) as usize
                - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(static_variables_ptr__ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).static_variables) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(static_variables),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vars) as usize - ptr as usize },
        104usize,
        concat!("Offset of field: ", stringify!(_zend_op_array), "::", stringify!(vars)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(refcount),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_live_range) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(last_live_range),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_try_catch) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(last_try_catch),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).live_range) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(live_range),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).try_catch_array) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(try_catch_array),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(filename),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_start) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(line_start),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_end) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(line_end),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).doc_comment) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(doc_comment),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_literal) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(last_literal),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_dynamic_func_defs) as usize - ptr as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(num_dynamic_func_defs),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).literals) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(literals),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dynamic_func_defs) as usize - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(dynamic_func_defs),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(reserved),
        ),
    );
}
pub type zif_handler = ::std::option::Option<
    unsafe extern "C" fn(execute_data: *mut zend_execute_data, return_value: *mut zval),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_internal_function {
    pub type_: u8,
    pub arg_flags: [u8; 3usize],
    pub fn_flags: u32,
    pub function_name: *mut zend_string,
    pub scope: *mut zend_class_entry,
    pub prototype: *mut zend_function,
    pub num_args: u32,
    pub required_num_args: u32,
    pub arg_info: *mut zend_internal_arg_info,
    pub attributes: *mut HashTable,
    pub run_time_cache__ptr: *mut *mut ::std::os::raw::c_void,
    pub T: u32,
    pub handler: zif_handler,
    pub module: *mut _zend_module_entry,
    pub reserved: [*mut ::std::os::raw::c_void; 6usize],
}
#[test]
fn bindgen_test_layout__zend_internal_function() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_internal_function> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_internal_function>(),
        136usize,
        concat!("Size of: ", stringify!(_zend_internal_function)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_internal_function>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_internal_function)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(type_),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_flags) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(arg_flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fn_flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(fn_flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(function_name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scope) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(scope),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prototype) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(prototype),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_args) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(num_args),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).required_num_args) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(required_num_args),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_info) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(arg_info),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(attributes),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).run_time_cache__ptr) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(run_time_cache__ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).T) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(T),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(handler),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(module),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(reserved),
        ),
    );
}
pub type zend_internal_function = _zend_internal_function;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_function {
    pub type_: u8,
    pub quick_arg_flags: u32,
    pub common: _zend_function__bindgen_ty_1,
    pub op_array: zend_op_array,
    pub internal_function: zend_internal_function,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_function__bindgen_ty_1 {
    pub type_: u8,
    pub arg_flags: [u8; 3usize],
    pub fn_flags: u32,
    pub function_name: *mut zend_string,
    pub scope: *mut zend_class_entry,
    pub prototype: *mut zend_function,
    pub num_args: u32,
    pub required_num_args: u32,
    pub arg_info: *mut zend_arg_info,
    pub attributes: *mut HashTable,
    pub run_time_cache__ptr: *mut *mut ::std::os::raw::c_void,
    pub T: u32,
}
#[test]
fn bindgen_test_layout__zend_function__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_function__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_function__bindgen_ty_1>(),
        72usize,
        concat!("Size of: ", stringify!(_zend_function__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_function__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_function__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(type_),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_flags) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(arg_flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fn_flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(fn_flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(function_name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scope) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(scope),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prototype) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(prototype),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_args) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(num_args),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).required_num_args) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(required_num_args),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_info) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(arg_info),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(attributes),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).run_time_cache__ptr) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(run_time_cache__ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).T) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(T),
        ),
    );
}
#[test]
fn bindgen_test_layout__zend_function() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_function> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_function>(),
        240usize,
        concat!("Size of: ", stringify!(_zend_function)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_function>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_function)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_function), "::", stringify!(type_)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quick_arg_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function),
            "::",
            stringify!(quick_arg_flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).common) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function),
            "::",
            stringify!(common),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function),
            "::",
            stringify!(op_array),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).internal_function) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function),
            "::",
            stringify!(internal_function),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_execute_data {
    pub opline: *const zend_op,
    pub call: *mut zend_execute_data,
    pub return_value: *mut zval,
    pub func: *mut zend_function,
    pub This: zval,
    pub prev_execute_data: *mut zend_execute_data,
    pub symbol_table: *mut zend_array,
    pub run_time_cache: *mut *mut ::std::os::raw::c_void,
    pub extra_named_params: *mut zend_array,
}
#[test]
fn bindgen_test_layout__zend_execute_data() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_execute_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_execute_data>(),
        80usize,
        concat!("Size of: ", stringify!(_zend_execute_data)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_execute_data>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_execute_data)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opline) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(opline),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).call) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(call),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).return_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(return_value),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(func),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).This) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(This),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).prev_execute_data) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(prev_execute_data),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol_table) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(symbol_table),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).run_time_cache) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(run_time_cache),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extra_named_params) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(extra_named_params),
        ),
    );
}
pub type __jmp_buf = [::std::os::raw::c_ulonglong; 22usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__jmp_buf_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jmp_buf_tag>(),
        312usize,
        concat!("Size of: ", stringify!(__jmp_buf_tag)),
    );
    assert_eq!(
        ::std::mem::align_of::<__jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__jmp_buf_tag)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__jmpbuf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__jmpbuf),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mask_was_saved) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__saved_mask) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__saved_mask),
        ),
    );
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn siglongjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
pub type zend_compiler_globals = _zend_compiler_globals;
pub type zend_executor_globals = _zend_executor_globals;
pub type zend_php_scanner_globals = _zend_php_scanner_globals;
pub type zend_ini_scanner_globals = _zend_ini_scanner_globals;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_compiler_globals {
    pub loop_var_stack: zend_stack,
    pub active_class_entry: *mut zend_class_entry,
    pub compiled_filename: *mut zend_string,
    pub zend_lineno: ::std::os::raw::c_int,
    pub active_op_array: *mut zend_op_array,
    pub function_table: *mut HashTable,
    pub class_table: *mut HashTable,
    pub auto_globals: *mut HashTable,
    pub parse_error: u8,
    pub in_compilation: bool,
    pub short_tags: bool,
    pub unclean_shutdown: bool,
    pub ini_parser_unbuffered_errors: bool,
    pub open_files: zend_llist,
    pub ini_parser_param: *mut _zend_ini_parser_param,
    pub skip_shebang: bool,
    pub increment_lineno: bool,
    pub variable_width_locale: bool,
    pub ascii_compatible_locale: bool,
    pub doc_comment: *mut zend_string,
    pub extra_fn_flags: u32,
    pub compiler_options: u32,
    pub context: zend_oparray_context,
    pub file_context: zend_file_context,
    pub arena: *mut zend_arena,
    pub interned_strings: HashTable,
    pub script_encoding_list: *mut *const zend_encoding,
    pub script_encoding_list_size: usize,
    pub multibyte: bool,
    pub detect_unicode: bool,
    pub encoding_declared: bool,
    pub ast: *mut zend_ast,
    pub ast_arena: *mut zend_arena,
    pub delayed_oplines_stack: zend_stack,
    pub memoized_exprs: *mut HashTable,
    pub memoize_mode: zend_memoize_mode,
    pub map_ptr_real_base: *mut ::std::os::raw::c_void,
    pub map_ptr_base: *mut ::std::os::raw::c_void,
    pub map_ptr_size: usize,
    pub map_ptr_last: usize,
    pub delayed_variance_obligations: *mut HashTable,
    pub delayed_autoloads: *mut HashTable,
    pub unlinked_uses: *mut HashTable,
    pub current_linking_class: *mut zend_class_entry,
    pub rtd_key_counter: u32,
    pub short_circuiting_opnums: zend_stack,
}
#[test]
fn bindgen_test_layout__zend_compiler_globals() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_compiler_globals> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_compiler_globals>(),
        568usize,
        concat!("Size of: ", stringify!(_zend_compiler_globals)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_compiler_globals>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_compiler_globals)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_var_stack) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(loop_var_stack),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).active_class_entry) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(active_class_entry),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).compiled_filename) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(compiled_filename),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zend_lineno) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(zend_lineno),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_op_array) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(active_op_array),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function_table) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(function_table),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_table) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(class_table),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auto_globals) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(auto_globals),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parse_error) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(parse_error),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_compilation) as usize - ptr as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(in_compilation),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).short_tags) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(short_tags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unclean_shutdown) as usize - ptr as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(unclean_shutdown),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ini_parser_unbuffered_errors) as usize
                - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(ini_parser_unbuffered_errors),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open_files) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(open_files),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ini_parser_param) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(ini_parser_param),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skip_shebang) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(skip_shebang),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).increment_lineno) as usize - ptr as usize },
        153usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(increment_lineno),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).variable_width_locale) as usize - ptr as usize
        },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(variable_width_locale),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ascii_compatible_locale) as usize - ptr as usize
        },
        155usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(ascii_compatible_locale),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).doc_comment) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(doc_comment),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra_fn_flags) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(extra_fn_flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compiler_options) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(compiler_options),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(context),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_context) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(file_context),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arena) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(arena),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interned_strings) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(interned_strings),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).script_encoding_list) as usize - ptr as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(script_encoding_list),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).script_encoding_list_size) as usize
                - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(script_encoding_list_size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multibyte) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(multibyte),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).detect_unicode) as usize - ptr as usize },
        409usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(detect_unicode),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).encoding_declared) as usize - ptr as usize
        },
        410usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(encoding_declared),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ast) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(ast),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ast_arena) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(ast_arena),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).delayed_oplines_stack) as usize - ptr as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(delayed_oplines_stack),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoized_exprs) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(memoized_exprs),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoize_mode) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(memoize_mode),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).map_ptr_real_base) as usize - ptr as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(map_ptr_real_base),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map_ptr_base) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(map_ptr_base),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map_ptr_size) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(map_ptr_size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map_ptr_last) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(map_ptr_last),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).delayed_variance_obligations) as usize
                - ptr as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(delayed_variance_obligations),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).delayed_autoloads) as usize - ptr as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(delayed_autoloads),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unlinked_uses) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(unlinked_uses),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).current_linking_class) as usize - ptr as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(current_linking_class),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtd_key_counter) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(rtd_key_counter),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).short_circuiting_opnums) as usize - ptr as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_compiler_globals),
            "::",
            stringify!(short_circuiting_opnums),
        ),
    );
}
extern "C" {
    pub static mut compiler_globals: _zend_compiler_globals;
}
extern "C" {
    pub fn zendparse() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut executor_globals: zend_executor_globals;
}
extern "C" {
    pub static mut language_scanner_globals: zend_php_scanner_globals;
}
extern "C" {
    pub static mut ini_scanner_globals: zend_ini_scanner_globals;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zend_atomic_bool_s {
    pub value: u8,
}
#[test]
fn bindgen_test_layout_zend_atomic_bool_s() {
    const UNINIT: ::std::mem::MaybeUninit<zend_atomic_bool_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<zend_atomic_bool_s>(),
        1usize,
        concat!("Size of: ", stringify!(zend_atomic_bool_s)),
    );
    assert_eq!(
        ::std::mem::align_of::<zend_atomic_bool_s>(),
        1usize,
        concat!("Alignment of ", stringify!(zend_atomic_bool_s)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zend_atomic_bool_s),
            "::",
            stringify!(value),
        ),
    );
}
pub type zend_atomic_bool = zend_atomic_bool_s;
extern "C" {
    pub fn zend_atomic_bool_init(obj: *mut zend_atomic_bool, desired: bool);
}
extern "C" {
    pub fn zend_atomic_bool_exchange(obj: *mut zend_atomic_bool, desired: bool) -> bool;
}
extern "C" {
    pub fn zend_atomic_bool_store(obj: *mut zend_atomic_bool, desired: bool);
}
extern "C" {
    pub fn zend_atomic_bool_load(obj: *const zend_atomic_bool) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_stack {
    pub size: ::std::os::raw::c_int,
    pub top: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
    pub elements: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__zend_stack() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_stack> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_stack>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_stack)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_stack>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_stack)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_stack), "::", stringify!(size)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(_zend_stack), "::", stringify!(top)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_stack), "::", stringify!(max)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elements) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_zend_stack), "::", stringify!(elements)),
    );
}
pub type zend_stack = _zend_stack;
pub const zend_stack_apply_direction_ZEND_STACK_APPLY_TOPDOWN: zend_stack_apply_direction = 0;
pub const zend_stack_apply_direction_ZEND_STACK_APPLY_BOTTOMUP: zend_stack_apply_direction = 1;
pub type zend_stack_apply_direction = ::std::os::raw::c_uint;
extern "C" {
    pub fn zend_stack_init(stack: *mut zend_stack, size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zend_stack_push(
        stack: *mut zend_stack,
        element: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_stack_top(stack: *const zend_stack) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zend_stack_del_top(stack: *mut zend_stack);
}
extern "C" {
    pub fn zend_stack_int_top(stack: *const zend_stack) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_stack_is_empty(stack: *const zend_stack) -> bool;
}
extern "C" {
    pub fn zend_stack_destroy(stack: *mut zend_stack);
}
extern "C" {
    pub fn zend_stack_base(stack: *const zend_stack) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zend_stack_count(stack: *const zend_stack) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_stack_apply(
        stack: *mut zend_stack,
        type_: ::std::os::raw::c_int,
        apply_function: ::std::option::Option<
            unsafe extern "C" fn(
                element: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn zend_stack_apply_with_argument(
        stack: *mut zend_stack,
        type_: zend_stack_apply_direction,
        apply_function: ::std::option::Option<
            unsafe extern "C" fn(
                element: *mut ::std::os::raw::c_void,
                arg: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn zend_stack_clean(
        stack: *mut zend_stack,
        func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
        free_elements: bool,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_ptr_stack {
    pub top: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
    pub elements: *mut *mut ::std::os::raw::c_void,
    pub top_element: *mut *mut ::std::os::raw::c_void,
    pub persistent: bool,
}
#[test]
fn bindgen_test_layout__zend_ptr_stack() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_ptr_stack> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_ptr_stack>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_ptr_stack)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ptr_stack>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ptr_stack)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_ptr_stack), "::", stringify!(top)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(_zend_ptr_stack), "::", stringify!(max)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elements) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ptr_stack),
            "::",
            stringify!(elements),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top_element) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ptr_stack),
            "::",
            stringify!(top_element),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).persistent) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ptr_stack),
            "::",
            stringify!(persistent),
        ),
    );
}
pub type zend_ptr_stack = _zend_ptr_stack;
extern "C" {
    pub fn zend_ptr_stack_init(stack: *mut zend_ptr_stack);
}
extern "C" {
    pub fn zend_ptr_stack_init_ex(stack: *mut zend_ptr_stack, persistent: bool);
}
extern "C" {
    pub fn zend_ptr_stack_n_push(
        stack: *mut zend_ptr_stack,
        count: ::std::os::raw::c_int,
        ...
    );
}
extern "C" {
    pub fn zend_ptr_stack_n_pop(
        stack: *mut zend_ptr_stack,
        count: ::std::os::raw::c_int,
        ...
    );
}
extern "C" {
    pub fn zend_ptr_stack_destroy(stack: *mut zend_ptr_stack);
}
extern "C" {
    pub fn zend_ptr_stack_apply(
        stack: *mut zend_ptr_stack,
        func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    );
}
extern "C" {
    pub fn zend_ptr_stack_reverse_apply(
        stack: *mut zend_ptr_stack,
        func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    );
}
extern "C" {
    pub fn zend_ptr_stack_clean(
        stack: *mut zend_ptr_stack,
        func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
        free_elements: bool,
    );
}
extern "C" {
    pub fn zend_ptr_stack_num_elements(
        stack: *mut zend_ptr_stack,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_object_std_init(object: *mut zend_object, ce: *mut zend_class_entry);
}
extern "C" {
    pub fn zend_objects_new(ce: *mut zend_class_entry) -> *mut zend_object;
}
extern "C" {
    pub fn zend_objects_clone_members(
        new_object: *mut zend_object,
        old_object: *mut zend_object,
    );
}
extern "C" {
    pub fn zend_object_std_dtor(object: *mut zend_object);
}
extern "C" {
    pub fn zend_objects_destroy_object(object: *mut zend_object);
}
extern "C" {
    pub fn zend_objects_clone_obj(object: *mut zend_object) -> *mut zend_object;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_objects_store {
    pub object_buckets: *mut *mut zend_object,
    pub top: u32,
    pub size: u32,
    pub free_list_head: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__zend_objects_store() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_objects_store> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_objects_store>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_objects_store)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_objects_store>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_objects_store)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_buckets) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_objects_store),
            "::",
            stringify!(object_buckets),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_objects_store),
            "::",
            stringify!(top),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_objects_store),
            "::",
            stringify!(size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_list_head) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_objects_store),
            "::",
            stringify!(free_list_head),
        ),
    );
}
pub type zend_objects_store = _zend_objects_store;
extern "C" {
    pub fn zend_objects_store_init(objects: *mut zend_objects_store, init_size: u32);
}
extern "C" {
    pub fn zend_objects_store_call_destructors(objects: *mut zend_objects_store);
}
extern "C" {
    pub fn zend_objects_store_mark_destructed(objects: *mut zend_objects_store);
}
extern "C" {
    pub fn zend_objects_store_free_object_storage(
        objects: *mut zend_objects_store,
        fast_shutdown: bool,
    );
}
extern "C" {
    pub fn zend_objects_store_destroy(objects: *mut zend_objects_store);
}
extern "C" {
    pub fn zend_objects_store_put(object: *mut zend_object);
}
extern "C" {
    pub fn zend_objects_store_del(object: *mut zend_object);
}
extern "C" {
    pub fn zend_init_fpu();
}
extern "C" {
    pub fn zend_shutdown_fpu();
}
extern "C" {
    pub fn zend_ensure_fpu_mode();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_encoding {
    _unused: [u8; 0],
}
pub type zend_encoding = _zend_encoding;
pub type zend_encoding_filter = ::std::option::Option<
    unsafe extern "C" fn(
        str_: *mut *mut ::std::os::raw::c_uchar,
        str_length: *mut usize,
        buf: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> usize,
>;
pub type zend_encoding_fetcher = ::std::option::Option<
    unsafe extern "C" fn(
        encoding_name: *const ::std::os::raw::c_char,
    ) -> *const zend_encoding,
>;
pub type zend_encoding_name_getter = ::std::option::Option<
    unsafe extern "C" fn(encoding: *const zend_encoding) -> *const ::std::os::raw::c_char,
>;
pub type zend_encoding_lexer_compatibility_checker = ::std::option::Option<
    unsafe extern "C" fn(encoding: *const zend_encoding) -> bool,
>;
pub type zend_encoding_detector = ::std::option::Option<
    unsafe extern "C" fn(
        string: *const ::std::os::raw::c_uchar,
        length: usize,
        list: *mut *const zend_encoding,
        list_size: usize,
    ) -> *const zend_encoding,
>;
pub type zend_encoding_converter = ::std::option::Option<
    unsafe extern "C" fn(
        to: *mut *mut ::std::os::raw::c_uchar,
        to_length: *mut usize,
        from: *const ::std::os::raw::c_uchar,
        from_length: usize,
        encoding_to: *const zend_encoding,
        encoding_from: *const zend_encoding,
    ) -> usize,
>;
pub type zend_encoding_list_parser = ::std::option::Option<
    unsafe extern "C" fn(
        encoding_list: *const ::std::os::raw::c_char,
        encoding_list_len: usize,
        return_list: *mut *mut *const zend_encoding,
        return_size: *mut usize,
        persistent: bool,
    ) -> zend_result,
>;
pub type zend_encoding_internal_encoding_getter = ::std::option::Option<
    unsafe extern "C" fn() -> *const zend_encoding,
>;
pub type zend_encoding_internal_encoding_setter = ::std::option::Option<
    unsafe extern "C" fn(encoding: *const zend_encoding) -> zend_result,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_multibyte_functions {
    pub provider_name: *const ::std::os::raw::c_char,
    pub encoding_fetcher: zend_encoding_fetcher,
    pub encoding_name_getter: zend_encoding_name_getter,
    pub lexer_compatibility_checker: zend_encoding_lexer_compatibility_checker,
    pub encoding_detector: zend_encoding_detector,
    pub encoding_converter: zend_encoding_converter,
    pub encoding_list_parser: zend_encoding_list_parser,
    pub internal_encoding_getter: zend_encoding_internal_encoding_getter,
    pub internal_encoding_setter: zend_encoding_internal_encoding_setter,
}
#[test]
fn bindgen_test_layout__zend_multibyte_functions() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_multibyte_functions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_multibyte_functions>(),
        72usize,
        concat!("Size of: ", stringify!(_zend_multibyte_functions)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_multibyte_functions>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_multibyte_functions)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).provider_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_multibyte_functions),
            "::",
            stringify!(provider_name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encoding_fetcher) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_multibyte_functions),
            "::",
            stringify!(encoding_fetcher),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).encoding_name_getter) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_multibyte_functions),
            "::",
            stringify!(encoding_name_getter),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).lexer_compatibility_checker) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_multibyte_functions),
            "::",
            stringify!(lexer_compatibility_checker),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).encoding_detector) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_multibyte_functions),
            "::",
            stringify!(encoding_detector),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).encoding_converter) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_multibyte_functions),
            "::",
            stringify!(encoding_converter),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).encoding_list_parser) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_multibyte_functions),
            "::",
            stringify!(encoding_list_parser),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).internal_encoding_getter) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_multibyte_functions),
            "::",
            stringify!(internal_encoding_getter),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).internal_encoding_setter) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_multibyte_functions),
            "::",
            stringify!(internal_encoding_setter),
        ),
    );
}
pub type zend_multibyte_functions = _zend_multibyte_functions;
extern "C" {
    pub static mut zend_multibyte_encoding_utf32be: *const zend_encoding;
}
extern "C" {
    pub static mut zend_multibyte_encoding_utf32le: *const zend_encoding;
}
extern "C" {
    pub static mut zend_multibyte_encoding_utf16be: *const zend_encoding;
}
extern "C" {
    pub static mut zend_multibyte_encoding_utf16le: *const zend_encoding;
}
extern "C" {
    pub static mut zend_multibyte_encoding_utf8: *const zend_encoding;
}
extern "C" {
    pub fn zend_multibyte_set_functions(
        functions: *const zend_multibyte_functions,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_multibyte_restore_functions();
}
extern "C" {
    pub fn zend_multibyte_get_functions() -> *const zend_multibyte_functions;
}
extern "C" {
    pub fn zend_multibyte_fetch_encoding(
        name: *const ::std::os::raw::c_char,
    ) -> *const zend_encoding;
}
extern "C" {
    pub fn zend_multibyte_get_encoding_name(
        encoding: *const zend_encoding,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_multibyte_check_lexer_compatibility(
        encoding: *const zend_encoding,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_multibyte_encoding_detector(
        string: *const ::std::os::raw::c_uchar,
        length: usize,
        list: *mut *const zend_encoding,
        list_size: usize,
    ) -> *const zend_encoding;
}
extern "C" {
    pub fn zend_multibyte_encoding_converter(
        to: *mut *mut ::std::os::raw::c_uchar,
        to_length: *mut usize,
        from: *const ::std::os::raw::c_uchar,
        from_length: usize,
        encoding_to: *const zend_encoding,
        encoding_from: *const zend_encoding,
    ) -> usize;
}
extern "C" {
    pub fn zend_multibyte_parse_encoding_list(
        encoding_list: *const ::std::os::raw::c_char,
        encoding_list_len: usize,
        return_list: *mut *mut *const zend_encoding,
        return_size: *mut usize,
        persistent: bool,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_multibyte_get_internal_encoding() -> *const zend_encoding;
}
extern "C" {
    pub fn zend_multibyte_get_script_encoding() -> *const zend_encoding;
}
extern "C" {
    pub fn zend_multibyte_set_script_encoding(
        encoding_list: *mut *const zend_encoding,
        encoding_list_size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_multibyte_set_internal_encoding(
        encoding: *const zend_encoding,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_multibyte_set_script_encoding_by_string(
        new_value: *const ::std::os::raw::c_char,
        new_value_length: usize,
    ) -> zend_result;
}
pub type zend_arena = _zend_arena;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_arena {
    pub ptr: *mut ::std::os::raw::c_char,
    pub end: *mut ::std::os::raw::c_char,
    pub prev: *mut zend_arena,
}
#[test]
fn bindgen_test_layout__zend_arena() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_arena> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_arena>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_arena)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_arena>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_arena)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_arena), "::", stringify!(ptr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_arena), "::", stringify!(end)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_zend_arena), "::", stringify!(prev)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_call_stack {
    pub base: *mut ::std::os::raw::c_void,
    pub max_size: usize,
}
#[test]
fn bindgen_test_layout__zend_call_stack() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_call_stack> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_call_stack>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_call_stack)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_call_stack>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_call_stack)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_call_stack),
            "::",
            stringify!(base),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_call_stack),
            "::",
            stringify!(max_size),
        ),
    );
}
pub type zend_call_stack = _zend_call_stack;
extern "C" {
    pub fn zend_call_stack_init();
}
extern "C" {
    pub fn zend_call_stack_get(stack: *mut zend_call_stack) -> bool;
}
pub type zend_vm_stack = *mut _zend_vm_stack;
pub type zend_ini_entry = _zend_ini_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_fiber_context {
    _unused: [u8; 0],
}
pub type zend_fiber_context = _zend_fiber_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_fiber {
    _unused: [u8; 0],
}
pub type zend_fiber = _zend_fiber;
pub const zend_memoize_mode_ZEND_MEMOIZE_NONE: zend_memoize_mode = 0;
pub const zend_memoize_mode_ZEND_MEMOIZE_COMPILE: zend_memoize_mode = 1;
pub const zend_memoize_mode_ZEND_MEMOIZE_FETCH: zend_memoize_mode = 2;
pub type zend_memoize_mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_executor_globals {
    pub uninitialized_zval: zval,
    pub error_zval: zval,
    pub symtable_cache: [*mut zend_array; 32usize],
    pub symtable_cache_limit: *mut *mut zend_array,
    pub symtable_cache_ptr: *mut *mut zend_array,
    pub symbol_table: zend_array,
    pub included_files: HashTable,
    pub bailout: *mut jmp_buf,
    pub error_reporting: ::std::os::raw::c_int,
    pub exit_status: ::std::os::raw::c_int,
    pub function_table: *mut HashTable,
    pub class_table: *mut HashTable,
    pub zend_constants: *mut HashTable,
    pub vm_stack_top: *mut zval,
    pub vm_stack_end: *mut zval,
    pub vm_stack: zend_vm_stack,
    pub vm_stack_page_size: usize,
    pub current_execute_data: *mut _zend_execute_data,
    pub fake_scope: *mut zend_class_entry,
    pub jit_trace_num: u32,
    pub ticks_count: ::std::os::raw::c_int,
    pub precision: zend_long,
    pub persistent_constants_count: u32,
    pub persistent_functions_count: u32,
    pub persistent_classes_count: u32,
    pub no_extensions: bool,
    pub full_tables_cleanup: bool,
    pub vm_interrupt: zend_atomic_bool,
    pub timed_out: zend_atomic_bool,
    pub in_autoload: *mut HashTable,
    pub hard_timeout: zend_long,
    pub stack_base: *mut ::std::os::raw::c_void,
    pub stack_limit: *mut ::std::os::raw::c_void,
    pub regular_list: HashTable,
    pub persistent_list: HashTable,
    pub user_error_handler_error_reporting: ::std::os::raw::c_int,
    pub exception_ignore_args: bool,
    pub user_error_handler: zval,
    pub user_exception_handler: zval,
    pub user_error_handlers_error_reporting: zend_stack,
    pub user_error_handlers: zend_stack,
    pub user_exception_handlers: zend_stack,
    pub exception_class: *mut zend_class_entry,
    pub error_handling: zend_error_handling_t,
    pub capture_warnings_during_sccp: ::std::os::raw::c_int,
    pub timeout_seconds: zend_long,
    pub ini_directives: *mut HashTable,
    pub modified_ini_directives: *mut HashTable,
    pub error_reporting_ini_entry: *mut zend_ini_entry,
    pub objects_store: zend_objects_store,
    pub exception: *mut zend_object,
    pub prev_exception: *mut zend_object,
    pub opline_before_exception: *const zend_op,
    pub exception_op: [zend_op; 3usize],
    pub current_module: *mut _zend_module_entry,
    pub active: bool,
    pub flags: u8,
    pub assertions: zend_long,
    pub ht_iterators_count: u32,
    pub ht_iterators_used: u32,
    pub ht_iterators: *mut HashTableIterator,
    pub ht_iterators_slots: [HashTableIterator; 16usize],
    pub saved_fpu_cw_ptr: *mut ::std::os::raw::c_void,
    pub trampoline: zend_function,
    pub call_trampoline_op: zend_op,
    pub weakrefs: HashTable,
    pub exception_string_param_max_len: zend_long,
    pub get_gc_buffer: zend_get_gc_buffer,
    pub main_fiber_context: *mut zend_fiber_context,
    pub current_fiber_context: *mut zend_fiber_context,
    pub active_fiber: *mut zend_fiber,
    pub fiber_stack_size: usize,
    pub record_errors: bool,
    pub num_errors: u32,
    pub errors: *mut *mut zend_error_info,
    pub filename_override: *mut zend_string,
    pub lineno_override: zend_long,
    pub call_stack: zend_call_stack,
    pub max_allowed_stack_size: zend_long,
    pub reserved_stack_size: zend_ulong,
    pub reserved: [*mut ::std::os::raw::c_void; 6usize],
}
#[test]
fn bindgen_test_layout__zend_executor_globals() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_executor_globals> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_executor_globals>(),
        1792usize,
        concat!("Size of: ", stringify!(_zend_executor_globals)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_executor_globals>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_executor_globals)),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).uninitialized_zval) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(uninitialized_zval),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_zval) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(error_zval),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symtable_cache) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(symtable_cache),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).symtable_cache_limit) as usize - ptr as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(symtable_cache_limit),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).symtable_cache_ptr) as usize - ptr as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(symtable_cache_ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol_table) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(symbol_table),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).included_files) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(included_files),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bailout) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(bailout),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_reporting) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(error_reporting),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exit_status) as usize - ptr as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(exit_status),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function_table) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(function_table),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_table) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(class_table),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zend_constants) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(zend_constants),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vm_stack_top) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(vm_stack_top),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vm_stack_end) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(vm_stack_end),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vm_stack) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(vm_stack),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vm_stack_page_size) as usize - ptr as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(vm_stack_page_size),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).current_execute_data) as usize - ptr as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(current_execute_data),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fake_scope) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(fake_scope),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jit_trace_num) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(jit_trace_num),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ticks_count) as usize - ptr as usize },
        508usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(ticks_count),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).precision) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(precision),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).persistent_constants_count) as usize
                - ptr as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(persistent_constants_count),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).persistent_functions_count) as usize
                - ptr as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(persistent_functions_count),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).persistent_classes_count) as usize - ptr as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(persistent_classes_count),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_extensions) as usize - ptr as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(no_extensions),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).full_tables_cleanup) as usize - ptr as usize
        },
        533usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(full_tables_cleanup),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vm_interrupt) as usize - ptr as usize },
        534usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(vm_interrupt),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timed_out) as usize - ptr as usize },
        535usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(timed_out),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_autoload) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(in_autoload),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hard_timeout) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(hard_timeout),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stack_base) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(stack_base),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stack_limit) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(stack_limit),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regular_list) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(regular_list),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).persistent_list) as usize - ptr as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(persistent_list),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_error_handler_error_reporting) as usize
                - ptr as usize
        },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(user_error_handler_error_reporting),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).exception_ignore_args) as usize - ptr as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(exception_ignore_args),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_error_handler) as usize - ptr as usize
        },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(user_error_handler),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_exception_handler) as usize - ptr as usize
        },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(user_exception_handler),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_error_handlers_error_reporting) as usize
                - ptr as usize
        },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(user_error_handlers_error_reporting),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_error_handlers) as usize - ptr as usize
        },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(user_error_handlers),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_exception_handlers) as usize - ptr as usize
        },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(user_exception_handlers),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exception_class) as usize - ptr as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(exception_class),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_handling) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(error_handling),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).capture_warnings_during_sccp) as usize
                - ptr as usize
        },
        804usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(capture_warnings_during_sccp),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout_seconds) as usize - ptr as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(timeout_seconds),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ini_directives) as usize - ptr as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(ini_directives),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).modified_ini_directives) as usize - ptr as usize
        },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(modified_ini_directives),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).error_reporting_ini_entry) as usize
                - ptr as usize
        },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(error_reporting_ini_entry),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objects_store) as usize - ptr as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(objects_store),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exception) as usize - ptr as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(exception),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev_exception) as usize - ptr as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(prev_exception),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).opline_before_exception) as usize - ptr as usize
        },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(opline_before_exception),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exception_op) as usize - ptr as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(exception_op),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_module) as usize - ptr as usize },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(current_module),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active) as usize - ptr as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(active),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        993usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assertions) as usize - ptr as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(assertions),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ht_iterators_count) as usize - ptr as usize
        },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(ht_iterators_count),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ht_iterators_used) as usize - ptr as usize
        },
        1012usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(ht_iterators_used),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ht_iterators) as usize - ptr as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(ht_iterators),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ht_iterators_slots) as usize - ptr as usize
        },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(ht_iterators_slots),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saved_fpu_cw_ptr) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(saved_fpu_cw_ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trampoline) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(trampoline),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).call_trampoline_op) as usize - ptr as usize
        },
        1528usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(call_trampoline_op),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weakrefs) as usize - ptr as usize },
        1560usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(weakrefs),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).exception_string_param_max_len) as usize
                - ptr as usize
        },
        1616usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(exception_string_param_max_len),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_gc_buffer) as usize - ptr as usize },
        1624usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(get_gc_buffer),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).main_fiber_context) as usize - ptr as usize
        },
        1648usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(main_fiber_context),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).current_fiber_context) as usize - ptr as usize
        },
        1656usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(current_fiber_context),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_fiber) as usize - ptr as usize },
        1664usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(active_fiber),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fiber_stack_size) as usize - ptr as usize },
        1672usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(fiber_stack_size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).record_errors) as usize - ptr as usize },
        1680usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(record_errors),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_errors) as usize - ptr as usize },
        1684usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(num_errors),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errors) as usize - ptr as usize },
        1688usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(errors),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).filename_override) as usize - ptr as usize
        },
        1696usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(filename_override),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineno_override) as usize - ptr as usize },
        1704usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(lineno_override),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).call_stack) as usize - ptr as usize },
        1712usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(call_stack),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_allowed_stack_size) as usize - ptr as usize
        },
        1728usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(max_allowed_stack_size),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reserved_stack_size) as usize - ptr as usize
        },
        1736usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(reserved_stack_size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        1744usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(reserved),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_ini_scanner_globals {
    pub yy_in: *mut zend_file_handle,
    pub yy_out: *mut zend_file_handle,
    pub yy_leng: ::std::os::raw::c_uint,
    pub yy_start: *const ::std::os::raw::c_uchar,
    pub yy_text: *const ::std::os::raw::c_uchar,
    pub yy_cursor: *const ::std::os::raw::c_uchar,
    pub yy_marker: *const ::std::os::raw::c_uchar,
    pub yy_limit: *const ::std::os::raw::c_uchar,
    pub yy_state: ::std::os::raw::c_int,
    pub state_stack: zend_stack,
    pub filename: *mut zend_string,
    pub lineno: ::std::os::raw::c_int,
    pub scanner_mode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__zend_ini_scanner_globals() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_ini_scanner_globals> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_ini_scanner_globals>(),
        112usize,
        concat!("Size of: ", stringify!(_zend_ini_scanner_globals)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ini_scanner_globals>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ini_scanner_globals)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yy_in) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(yy_in),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yy_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(yy_out),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yy_leng) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(yy_leng),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yy_start) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(yy_start),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yy_text) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(yy_text),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yy_cursor) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(yy_cursor),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yy_marker) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(yy_marker),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yy_limit) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(yy_limit),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yy_state) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(yy_state),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state_stack) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(state_stack),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(filename),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineno) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(lineno),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scanner_mode) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_scanner_globals),
            "::",
            stringify!(scanner_mode),
        ),
    );
}
pub const zend_php_scanner_event_ON_TOKEN: zend_php_scanner_event = 0;
pub const zend_php_scanner_event_ON_FEEDBACK: zend_php_scanner_event = 1;
pub const zend_php_scanner_event_ON_STOP: zend_php_scanner_event = 2;
pub type zend_php_scanner_event = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_php_scanner_globals {
    pub yy_in: *mut zend_file_handle,
    pub yy_out: *mut zend_file_handle,
    pub yy_leng: ::std::os::raw::c_uint,
    pub yy_start: *mut ::std::os::raw::c_uchar,
    pub yy_text: *mut ::std::os::raw::c_uchar,
    pub yy_cursor: *mut ::std::os::raw::c_uchar,
    pub yy_marker: *mut ::std::os::raw::c_uchar,
    pub yy_limit: *mut ::std::os::raw::c_uchar,
    pub yy_state: ::std::os::raw::c_int,
    pub state_stack: zend_stack,
    pub heredoc_label_stack: zend_ptr_stack,
    pub nest_location_stack: zend_stack,
    pub heredoc_scan_ahead: bool,
    pub heredoc_indentation: ::std::os::raw::c_int,
    pub heredoc_indentation_uses_spaces: bool,
    pub script_org: *mut ::std::os::raw::c_uchar,
    pub script_org_size: usize,
    pub script_filtered: *mut ::std::os::raw::c_uchar,
    pub script_filtered_size: usize,
    pub input_filter: zend_encoding_filter,
    pub output_filter: zend_encoding_filter,
    pub script_encoding: *const zend_encoding,
    pub scanned_string_len: ::std::os::raw::c_int,
    pub on_event: ::std::option::Option<
        unsafe extern "C" fn(
            event: zend_php_scanner_event,
            token: ::std::os::raw::c_int,
            line: ::std::os::raw::c_int,
            text: *const ::std::os::raw::c_char,
            length: usize,
            context: *mut ::std::os::raw::c_void,
        ),
    >,
    pub on_event_context: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__zend_php_scanner_globals() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_php_scanner_globals> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_php_scanner_globals>(),
        248usize,
        concat!("Size of: ", stringify!(_zend_php_scanner_globals)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_php_scanner_globals>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_php_scanner_globals)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yy_in) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(yy_in),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yy_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(yy_out),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yy_leng) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(yy_leng),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yy_start) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(yy_start),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yy_text) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(yy_text),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yy_cursor) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(yy_cursor),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yy_marker) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(yy_marker),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yy_limit) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(yy_limit),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yy_state) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(yy_state),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state_stack) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(state_stack),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).heredoc_label_stack) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(heredoc_label_stack),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).nest_location_stack) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(nest_location_stack),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).heredoc_scan_ahead) as usize - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(heredoc_scan_ahead),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).heredoc_indentation) as usize - ptr as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(heredoc_indentation),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).heredoc_indentation_uses_spaces) as usize
                - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(heredoc_indentation_uses_spaces),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).script_org) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(script_org),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).script_org_size) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(script_org_size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).script_filtered) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(script_filtered),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).script_filtered_size) as usize - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(script_filtered_size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_filter) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(input_filter),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_filter) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(output_filter),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).script_encoding) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(script_encoding),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).scanned_string_len) as usize - ptr as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(scanned_string_len),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).on_event) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(on_event),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).on_event_context) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_php_scanner_globals),
            "::",
            stringify!(on_event_context),
        ),
    );
}
pub const _zend_compile_position_ZEND_COMPILE_POSITION_AT_SHEBANG: _zend_compile_position = 0;
pub const _zend_compile_position_ZEND_COMPILE_POSITION_AT_OPEN_TAG: _zend_compile_position = 1;
pub const _zend_compile_position_ZEND_COMPILE_POSITION_AFTER_OPEN_TAG: _zend_compile_position = 2;
pub type _zend_compile_position = ::std::os::raw::c_uint;
pub use self::_zend_compile_position as zend_compile_position;
extern "C" {
    pub fn init_compiler();
}
extern "C" {
    pub fn shutdown_compiler();
}
extern "C" {
    pub fn zend_init_compiler_data_structures();
}
extern "C" {
    pub fn zend_oparray_context_begin(prev_context: *mut zend_oparray_context);
}
extern "C" {
    pub fn zend_oparray_context_end(prev_context: *mut zend_oparray_context);
}
extern "C" {
    pub fn zend_file_context_begin(prev_context: *mut zend_file_context);
}
extern "C" {
    pub fn zend_file_context_end(prev_context: *mut zend_file_context);
}
extern "C" {
    pub static mut zend_compile_file: ::std::option::Option<
        unsafe extern "C" fn(
            file_handle: *mut zend_file_handle,
            type_: ::std::os::raw::c_int,
        ) -> *mut zend_op_array,
    >;
}
extern "C" {
    pub static mut zend_compile_string: ::std::option::Option<
        unsafe extern "C" fn(
            source_string: *mut zend_string,
            filename: *const ::std::os::raw::c_char,
            position: zend_compile_position,
        ) -> *mut zend_op_array,
    >;
}
extern "C" {
    pub fn lex_scan(
        zendlval: *mut zval,
        elem: *mut zend_parser_stack_elem,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn startup_scanner();
}
extern "C" {
    pub fn shutdown_scanner();
}
extern "C" {
    pub fn zend_set_compiled_filename(
        new_compiled_filename: *mut zend_string,
    ) -> *mut zend_string;
}
extern "C" {
    pub fn zend_restore_compiled_filename(original_compiled_filename: *mut zend_string);
}
extern "C" {
    pub fn zend_get_compiled_filename() -> *mut zend_string;
}
extern "C" {
    pub fn zend_get_compiled_lineno() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_get_scanned_file_offset() -> usize;
}
extern "C" {
    pub fn zend_get_compiled_variable_name(
        op_array: *const zend_op_array,
        var: u32,
    ) -> *mut zend_string;
}
pub type unary_op_type = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut zval, arg2: *mut zval) -> zend_result,
>;
pub type binary_op_type = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut zval,
        arg2: *mut zval,
        arg3: *mut zval,
    ) -> zend_result,
>;
extern "C" {
    pub fn get_unary_op(opcode: ::std::os::raw::c_int) -> unary_op_type;
}
extern "C" {
    pub fn get_binary_op(opcode: ::std::os::raw::c_int) -> binary_op_type;
}
extern "C" {
    pub fn zend_stop_lexing();
}
extern "C" {
    pub fn zend_emit_final_return(return_one: bool);
}
pub const zend_modifier_target_ZEND_MODIFIER_TARGET_PROPERTY: zend_modifier_target = 0;
pub const zend_modifier_target_ZEND_MODIFIER_TARGET_METHOD: zend_modifier_target = 1;
pub const zend_modifier_target_ZEND_MODIFIER_TARGET_CONSTANT: zend_modifier_target = 2;
pub const zend_modifier_target_ZEND_MODIFIER_TARGET_CPP: zend_modifier_target = 3;
pub type zend_modifier_target = ::std::os::raw::c_uint;
extern "C" {
    pub fn zend_ast_append_str(
        left: *mut zend_ast,
        right: *mut zend_ast,
    ) -> *mut zend_ast;
}
extern "C" {
    pub fn zend_negate_num_string(ast: *mut zend_ast) -> *mut zend_ast;
}
extern "C" {
    pub fn zend_add_class_modifier(flags: u32, new_flag: u32) -> u32;
}
extern "C" {
    pub fn zend_add_anonymous_class_modifier(flags: u32, new_flag: u32) -> u32;
}
extern "C" {
    pub fn zend_add_member_modifier(
        flags: u32,
        new_flag: u32,
        target: zend_modifier_target,
    ) -> u32;
}
extern "C" {
    pub fn zend_modifier_token_to_flag(target: zend_modifier_target, flags: u32) -> u32;
}
extern "C" {
    pub fn zend_modifier_list_to_flags(
        target: zend_modifier_target,
        modifiers: *mut zend_ast,
    ) -> u32;
}
extern "C" {
    pub fn zend_handle_encoding_declaration(ast: *mut zend_ast) -> bool;
}
extern "C" {
    pub fn zend_bind_class_in_slot(
        class_table_slot: *mut zval,
        lcname: *mut zval,
        lc_parent_name: *mut zend_string,
    ) -> *mut zend_class_entry;
}
extern "C" {
    pub fn do_bind_function(func: *mut zend_function, lcname: *mut zval) -> zend_result;
}
extern "C" {
    pub fn do_bind_class(
        lcname: *mut zval,
        lc_parent_name: *mut zend_string,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_resolve_goto_label(op_array: *mut zend_op_array, opline: *mut zend_op);
}
extern "C" {
    pub fn function_add_ref(function: *mut zend_function);
}
extern "C" {
    pub fn zval_make_interned_string(zv: *mut zval) -> *mut zend_string;
}
extern "C" {
    pub fn compile_file(
        file_handle: *mut zend_file_handle,
        type_: ::std::os::raw::c_int,
    ) -> *mut zend_op_array;
}
extern "C" {
    pub fn compile_string(
        source_string: *mut zend_string,
        filename: *const ::std::os::raw::c_char,
        position: zend_compile_position,
    ) -> *mut zend_op_array;
}
extern "C" {
    pub fn compile_filename(
        type_: ::std::os::raw::c_int,
        filename: *mut zend_string,
    ) -> *mut zend_op_array;
}
extern "C" {
    pub fn zend_compile_string_to_ast(
        code: *mut zend_string,
        ast_arena: *mut *mut _zend_arena,
        filename: *mut zend_string,
    ) -> *mut zend_ast;
}
extern "C" {
    pub fn zend_execute_scripts(
        type_: ::std::os::raw::c_int,
        retval: *mut zval,
        file_count: ::std::os::raw::c_int,
        ...
    ) -> zend_result;
}
extern "C" {
    pub fn open_file_for_scanning(file_handle: *mut zend_file_handle) -> zend_result;
}
extern "C" {
    pub fn init_op_array(
        op_array: *mut zend_op_array,
        type_: u8,
        initial_ops_size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn destroy_op_array(op_array: *mut zend_op_array);
}
extern "C" {
    pub fn zend_destroy_static_vars(op_array: *mut zend_op_array);
}
extern "C" {
    pub fn zend_cleanup_mutable_class_data(ce: *mut zend_class_entry);
}
extern "C" {
    pub fn zend_cleanup_internal_class_data(ce: *mut zend_class_entry);
}
extern "C" {
    pub fn zend_type_release(type_: zend_type, persistent: bool);
}
extern "C" {
    pub fn zend_create_member_string(
        class_name: *mut zend_string,
        member_name: *mut zend_string,
    ) -> *mut zend_string;
}
extern "C" {
    pub fn zend_user_exception_handler();
}
extern "C" {
    pub fn zend_free_internal_arg_info(function: *mut zend_internal_function);
}
extern "C" {
    pub fn destroy_zend_function(function: *mut zend_function);
}
extern "C" {
    pub fn zend_function_dtor(zv: *mut zval);
}
extern "C" {
    pub fn destroy_zend_class(zv: *mut zval);
}
extern "C" {
    pub fn zend_class_add_ref(zv: *mut zval);
}
extern "C" {
    pub fn zend_mangle_property_name(
        src1: *const ::std::os::raw::c_char,
        src1_length: usize,
        src2: *const ::std::os::raw::c_char,
        src2_length: usize,
        internal: bool,
    ) -> *mut zend_string;
}
extern "C" {
    pub fn zend_unmangle_property_name_ex(
        name: *const zend_string,
        class_name: *mut *const ::std::os::raw::c_char,
        prop_name: *mut *const ::std::os::raw::c_char,
        prop_len: *mut usize,
    ) -> zend_result;
}
pub type zend_needs_live_range_cb = ::std::option::Option<
    unsafe extern "C" fn(op_array: *mut zend_op_array, opline: *mut zend_op) -> bool,
>;
extern "C" {
    pub fn zend_recalc_live_ranges(
        op_array: *mut zend_op_array,
        needs_live_range: zend_needs_live_range_cb,
    );
}
extern "C" {
    pub fn pass_two(op_array: *mut zend_op_array);
}
extern "C" {
    pub fn zend_is_compiling() -> bool;
}
extern "C" {
    pub fn zend_make_compiled_string_description(
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_initialize_class_data(ce: *mut zend_class_entry, nullify_handlers: bool);
}
extern "C" {
    pub fn zend_get_class_fetch_type(name: *const zend_string) -> u32;
}
extern "C" {
    pub fn zend_get_call_op(init_op: *const zend_op, fbc: *mut zend_function) -> u8;
}
extern "C" {
    pub fn zend_is_smart_branch(opline: *const zend_op) -> bool;
}
pub type zend_auto_global_callback = ::std::option::Option<
    unsafe extern "C" fn(name: *mut zend_string) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_auto_global {
    pub name: *mut zend_string,
    pub auto_global_callback: zend_auto_global_callback,
    pub jit: bool,
    pub armed: bool,
}
#[test]
fn bindgen_test_layout__zend_auto_global() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_auto_global> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_auto_global>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_auto_global)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_auto_global>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_auto_global)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_auto_global),
            "::",
            stringify!(name),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).auto_global_callback) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_auto_global),
            "::",
            stringify!(auto_global_callback),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_auto_global),
            "::",
            stringify!(jit),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).armed) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_auto_global),
            "::",
            stringify!(armed),
        ),
    );
}
pub type zend_auto_global = _zend_auto_global;
extern "C" {
    pub fn zend_register_auto_global(
        name: *mut zend_string,
        jit: bool,
        auto_global_callback: zend_auto_global_callback,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_activate_auto_globals();
}
extern "C" {
    pub fn zend_is_auto_global(name: *mut zend_string) -> bool;
}
extern "C" {
    pub fn zend_is_auto_global_str(
        name: *const ::std::os::raw::c_char,
        len: usize,
    ) -> bool;
}
extern "C" {
    pub fn zend_dirname(path: *mut ::std::os::raw::c_char, len: usize) -> usize;
}
extern "C" {
    pub fn zend_set_function_arg_flags(func: *mut zend_function);
}
extern "C" {
    pub fn zendlex(elem: *mut zend_parser_stack_elem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_assert_valid_class_name(const_name: *const zend_string);
}
extern "C" {
    pub fn zend_type_to_string_resolved(
        type_: zend_type,
        scope: *mut zend_class_entry,
    ) -> *mut zend_string;
}
extern "C" {
    pub fn zend_type_to_string(type_: zend_type) -> *mut zend_string;
}
extern "C" {
    pub fn zend_get_opcode_name(opcode: u8) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_get_opcode_flags(opcode: u8) -> u32;
}
extern "C" {
    pub fn zend_get_opcode_id(name: *const ::std::os::raw::c_char, length: usize) -> u8;
}
extern "C" {
    pub fn zend_is_op_long_compatible(op: *const zval) -> bool;
}
extern "C" {
    pub fn zend_binary_op_produces_error(
        opcode: u32,
        op1: *const zval,
        op2: *const zval,
    ) -> bool;
}
extern "C" {
    pub fn zend_unary_op_produces_error(opcode: u32, op: *const zval) -> bool;
}
pub type zend_module_entry = _zend_module_entry;
pub type zend_module_dep = _zend_module_dep;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_module_entry {
    pub size: ::std::os::raw::c_ushort,
    pub zend_api: ::std::os::raw::c_uint,
    pub zend_debug: ::std::os::raw::c_uchar,
    pub zts: ::std::os::raw::c_uchar,
    pub ini_entry: *const _zend_ini_entry,
    pub deps: *const _zend_module_dep,
    pub name: *const ::std::os::raw::c_char,
    pub functions: *const _zend_function_entry,
    pub module_startup_func: ::std::option::Option<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_int,
            module_number: ::std::os::raw::c_int,
        ) -> zend_result,
    >,
    pub module_shutdown_func: ::std::option::Option<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_int,
            module_number: ::std::os::raw::c_int,
        ) -> zend_result,
    >,
    pub request_startup_func: ::std::option::Option<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_int,
            module_number: ::std::os::raw::c_int,
        ) -> zend_result,
    >,
    pub request_shutdown_func: ::std::option::Option<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_int,
            module_number: ::std::os::raw::c_int,
        ) -> zend_result,
    >,
    pub info_func: ::std::option::Option<
        unsafe extern "C" fn(zend_module: *mut zend_module_entry),
    >,
    pub version: *const ::std::os::raw::c_char,
    pub globals_size: usize,
    pub globals_ptr: *mut ::std::os::raw::c_void,
    pub globals_ctor: ::std::option::Option<
        unsafe extern "C" fn(global: *mut ::std::os::raw::c_void),
    >,
    pub globals_dtor: ::std::option::Option<
        unsafe extern "C" fn(global: *mut ::std::os::raw::c_void),
    >,
    pub post_deactivate_func: ::std::option::Option<
        unsafe extern "C" fn() -> zend_result,
    >,
    pub module_started: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_uchar,
    pub handle: *mut ::std::os::raw::c_void,
    pub module_number: ::std::os::raw::c_int,
    pub build_id: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__zend_module_entry() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_module_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_module_entry>(),
        168usize,
        concat!("Size of: ", stringify!(_zend_module_entry)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_module_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_module_entry)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zend_api) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(zend_api),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zend_debug) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(zend_debug),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zts) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(zts),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ini_entry) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(ini_entry),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deps) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(deps),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functions) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(functions),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).module_startup_func) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(module_startup_func),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).module_shutdown_func) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(module_shutdown_func),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).request_startup_func) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(request_startup_func),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).request_shutdown_func) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(request_shutdown_func),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info_func) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(info_func),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(version),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globals_size) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(globals_size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globals_ptr) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(globals_ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globals_ctor) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(globals_ctor),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globals_dtor) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(globals_dtor),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).post_deactivate_func) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(post_deactivate_func),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_started) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(module_started),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(type_),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(handle),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_number) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(module_number),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).build_id) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(build_id),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_module_dep {
    pub name: *const ::std::os::raw::c_char,
    pub rel: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__zend_module_dep() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_module_dep> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_module_dep>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_module_dep)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_module_dep>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_module_dep)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_dep),
            "::",
            stringify!(name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rel) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_module_dep), "::", stringify!(rel)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_dep),
            "::",
            stringify!(version),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_dep),
            "::",
            stringify!(type_),
        ),
    );
}
extern "C" {
    pub static mut module_registry: HashTable;
}
extern "C" {
    pub fn module_destructor(module: *mut zend_module_entry);
}
extern "C" {
    pub fn module_registry_request_startup(
        module: *mut zend_module_entry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn module_registry_unload_temp(
        module: *const zend_module_entry,
    ) -> ::std::os::raw::c_int;
}
pub type rsrc_dtor_func_t = ::std::option::Option<
    unsafe extern "C" fn(res: *mut zend_resource),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_rsrc_list_dtors_entry {
    pub list_dtor_ex: rsrc_dtor_func_t,
    pub plist_dtor_ex: rsrc_dtor_func_t,
    pub type_name: *const ::std::os::raw::c_char,
    pub module_number: ::std::os::raw::c_int,
    pub resource_id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__zend_rsrc_list_dtors_entry() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_rsrc_list_dtors_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_rsrc_list_dtors_entry>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_rsrc_list_dtors_entry)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_rsrc_list_dtors_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_rsrc_list_dtors_entry)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list_dtor_ex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_rsrc_list_dtors_entry),
            "::",
            stringify!(list_dtor_ex),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plist_dtor_ex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_rsrc_list_dtors_entry),
            "::",
            stringify!(plist_dtor_ex),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_rsrc_list_dtors_entry),
            "::",
            stringify!(type_name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_number) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_rsrc_list_dtors_entry),
            "::",
            stringify!(module_number),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resource_id) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_rsrc_list_dtors_entry),
            "::",
            stringify!(resource_id),
        ),
    );
}
pub type zend_rsrc_list_dtors_entry = _zend_rsrc_list_dtors_entry;
extern "C" {
    pub fn zend_register_list_destructors_ex(
        ld: rsrc_dtor_func_t,
        pld: rsrc_dtor_func_t,
        type_name: *const ::std::os::raw::c_char,
        module_number: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_entry_destructor(ptr: *mut zval);
}
extern "C" {
    pub fn plist_entry_destructor(ptr: *mut zval);
}
extern "C" {
    pub fn zend_clean_module_rsrc_dtors(module_number: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zend_init_rsrc_list();
}
extern "C" {
    pub fn zend_init_rsrc_plist();
}
extern "C" {
    pub fn zend_close_rsrc_list(ht: *mut HashTable);
}
extern "C" {
    pub fn zend_destroy_rsrc_list(ht: *mut HashTable);
}
extern "C" {
    pub fn zend_init_rsrc_list_dtors();
}
extern "C" {
    pub fn zend_destroy_rsrc_list_dtors();
}
extern "C" {
    pub fn zend_list_insert(
        ptr: *mut ::std::os::raw::c_void,
        type_: ::std::os::raw::c_int,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_list_free(res: *mut zend_resource);
}
extern "C" {
    pub fn zend_list_delete(res: *mut zend_resource) -> zend_result;
}
extern "C" {
    pub fn zend_list_close(res: *mut zend_resource);
}
extern "C" {
    pub fn zend_register_resource(
        rsrc_pointer: *mut ::std::os::raw::c_void,
        rsrc_type: ::std::os::raw::c_int,
    ) -> *mut zend_resource;
}
extern "C" {
    pub fn zend_fetch_resource(
        res: *mut zend_resource,
        resource_type_name: *const ::std::os::raw::c_char,
        resource_type: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zend_fetch_resource2(
        res: *mut zend_resource,
        resource_type_name: *const ::std::os::raw::c_char,
        resource_type: ::std::os::raw::c_int,
        resource_type2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zend_fetch_resource_ex(
        res: *mut zval,
        resource_type_name: *const ::std::os::raw::c_char,
        resource_type: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zend_fetch_resource2_ex(
        res: *mut zval,
        resource_type_name: *const ::std::os::raw::c_char,
        resource_type: ::std::os::raw::c_int,
        resource_type2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zend_rsrc_list_get_rsrc_type(
        res: *mut zend_resource,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_fetch_list_dtor_id(
        type_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_register_persistent_resource(
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        rsrc_pointer: *mut ::std::os::raw::c_void,
        rsrc_type: ::std::os::raw::c_int,
    ) -> *mut zend_resource;
}
extern "C" {
    pub fn zend_register_persistent_resource_ex(
        key: *mut zend_string,
        rsrc_pointer: *mut ::std::os::raw::c_void,
        rsrc_type: ::std::os::raw::c_int,
    ) -> *mut zend_resource;
}
extern "C" {
    pub static mut le_index_ptr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut zend_execute_ex: ::std::option::Option<
        unsafe extern "C" fn(execute_data: *mut zend_execute_data),
    >;
}
extern "C" {
    pub static mut zend_execute_internal: ::std::option::Option<
        unsafe extern "C" fn(
            execute_data: *mut zend_execute_data,
            return_value: *mut zval,
        ),
    >;
}
extern "C" {
    pub static mut zend_autoload: ::std::option::Option<
        unsafe extern "C" fn(
            name: *mut zend_string,
            lc_name: *mut zend_string,
        ) -> *mut zend_class_entry,
    >;
}
extern "C" {
    pub fn init_executor();
}
extern "C" {
    pub fn shutdown_executor();
}
extern "C" {
    pub fn shutdown_destructors();
}
extern "C" {
    pub fn zend_shutdown_executor_values(fast_shutdown: bool);
}
extern "C" {
    pub fn zend_init_execute_data(
        execute_data: *mut zend_execute_data,
        op_array: *mut zend_op_array,
        return_value: *mut zval,
    );
}
extern "C" {
    pub fn zend_init_func_execute_data(
        execute_data: *mut zend_execute_data,
        op_array: *mut zend_op_array,
        return_value: *mut zval,
    );
}
extern "C" {
    pub fn zend_init_code_execute_data(
        execute_data: *mut zend_execute_data,
        op_array: *mut zend_op_array,
        return_value: *mut zval,
    );
}
extern "C" {
    pub fn zend_execute(op_array: *mut zend_op_array, return_value: *mut zval);
}
extern "C" {
    pub fn execute_ex(execute_data: *mut zend_execute_data);
}
extern "C" {
    pub fn execute_internal(
        execute_data: *mut zend_execute_data,
        return_value: *mut zval,
    );
}
extern "C" {
    pub fn zend_is_valid_class_name(name: *mut zend_string) -> bool;
}
extern "C" {
    pub fn zend_lookup_class(name: *mut zend_string) -> *mut zend_class_entry;
}
extern "C" {
    pub fn zend_lookup_class_ex(
        name: *mut zend_string,
        lcname: *mut zend_string,
        flags: u32,
    ) -> *mut zend_class_entry;
}
extern "C" {
    pub fn zend_get_called_scope(ex: *mut zend_execute_data) -> *mut zend_class_entry;
}
extern "C" {
    pub fn zend_get_this_object(ex: *mut zend_execute_data) -> *mut zend_object;
}
extern "C" {
    pub fn zend_eval_string(
        str_: *const ::std::os::raw::c_char,
        retval_ptr: *mut zval,
        string_name: *const ::std::os::raw::c_char,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_eval_stringl(
        str_: *const ::std::os::raw::c_char,
        str_len: usize,
        retval_ptr: *mut zval,
        string_name: *const ::std::os::raw::c_char,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_eval_string_ex(
        str_: *const ::std::os::raw::c_char,
        retval_ptr: *mut zval,
        string_name: *const ::std::os::raw::c_char,
        handle_exceptions: bool,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_eval_stringl_ex(
        str_: *const ::std::os::raw::c_char,
        str_len: usize,
        retval_ptr: *mut zval,
        string_name: *const ::std::os::raw::c_char,
        handle_exceptions: bool,
    ) -> zend_result;
}
extern "C" {
    pub static zend_pass_function: zend_internal_function;
}
extern "C" {
    pub fn zend_missing_arg_error(execute_data: *mut zend_execute_data);
}
extern "C" {
    pub fn zend_deprecated_function(fbc: *const zend_function);
}
extern "C" {
    pub fn zend_false_to_array_deprecated();
}
extern "C" {
    pub fn zend_param_must_be_ref(func: *const zend_function, arg_num: u32);
}
extern "C" {
    pub fn zend_use_resource_as_offset(dim: *const zval);
}
extern "C" {
    pub fn zend_verify_ref_assignable_zval(
        ref_: *mut zend_reference,
        zv: *mut zval,
        strict: bool,
    ) -> bool;
}
pub const zend_verify_prop_assignable_by_ref_context_ZEND_VERIFY_PROP_ASSIGNABLE_BY_REF_CONTEXT_ASSIGNMENT: zend_verify_prop_assignable_by_ref_context = 0;
pub const zend_verify_prop_assignable_by_ref_context_ZEND_VERIFY_PROP_ASSIGNABLE_BY_REF_CONTEXT_MAGIC_GET: zend_verify_prop_assignable_by_ref_context = 1;
pub type zend_verify_prop_assignable_by_ref_context = ::std::os::raw::c_uint;
extern "C" {
    pub fn zend_verify_prop_assignable_by_ref_ex(
        prop_info: *const zend_property_info,
        orig_val: *mut zval,
        strict: bool,
        context: zend_verify_prop_assignable_by_ref_context,
    ) -> bool;
}
extern "C" {
    pub fn zend_verify_prop_assignable_by_ref(
        prop_info: *const zend_property_info,
        orig_val: *mut zval,
        strict: bool,
    ) -> bool;
}
extern "C" {
    pub fn zend_throw_ref_type_error_zval(
        prop: *const zend_property_info,
        zv: *const zval,
    );
}
extern "C" {
    pub fn zend_throw_ref_type_error_type(
        prop1: *const zend_property_info,
        prop2: *const zend_property_info,
        zv: *const zval,
    );
}
extern "C" {
    pub fn zend_undefined_offset_write(ht: *mut HashTable, lval: zend_long) -> *mut zval;
}
extern "C" {
    pub fn zend_undefined_index_write(
        ht: *mut HashTable,
        offset: *mut zend_string,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_wrong_string_offset_error();
}
extern "C" {
    pub fn zend_readonly_property_modification_error(info: *const zend_property_info);
}
extern "C" {
    pub fn zend_readonly_property_indirect_modification_error(
        info: *const zend_property_info,
    );
}
extern "C" {
    pub fn zend_invalid_class_constant_type_error(type_: u8);
}
extern "C" {
    pub fn zend_object_released_while_assigning_to_property_error(
        info: *const zend_property_info,
    );
}
extern "C" {
    pub fn zend_cannot_add_element();
}
extern "C" {
    pub fn zend_verify_scalar_type_hint(
        type_mask: u32,
        arg: *mut zval,
        strict: bool,
        is_internal_arg: bool,
    ) -> bool;
}
extern "C" {
    pub fn zend_verify_arg_error(
        zf: *const zend_function,
        arg_info: *const zend_arg_info,
        arg_num: u32,
        value: *mut zval,
    );
}
extern "C" {
    pub fn zend_verify_return_error(zf: *const zend_function, value: *mut zval);
}
extern "C" {
    pub fn zend_verify_never_error(zf: *const zend_function);
}
extern "C" {
    pub fn zend_verify_ref_array_assignable(ref_: *mut zend_reference) -> bool;
}
extern "C" {
    pub fn zend_check_user_type_slow(
        type_: *mut zend_type,
        arg: *mut zval,
        ref_: *mut zend_reference,
        cache_slot: *mut *mut ::std::os::raw::c_void,
        is_return_type: bool,
    ) -> bool;
}
extern "C" {
    pub fn zend_ref_add_type_source(
        source_list: *mut zend_property_info_source_list,
        prop: *mut zend_property_info,
    );
}
extern "C" {
    pub fn zend_ref_del_type_source(
        source_list: *mut zend_property_info_source_list,
        prop: *const zend_property_info,
    );
}
extern "C" {
    pub fn zend_assign_to_typed_ref(
        variable_ptr: *mut zval,
        value: *mut zval,
        value_type: u8,
        strict: bool,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_assign_to_typed_ref_ex(
        variable_ptr: *mut zval,
        value: *mut zval,
        value_type: u8,
        strict: bool,
        garbage_ptr: *mut *mut zend_refcounted,
    ) -> *mut zval;
}
extern "C" {
    pub fn zval_update_constant(pp: *mut zval) -> zend_result;
}
extern "C" {
    pub fn zval_update_constant_ex(
        pp: *mut zval,
        scope: *mut zend_class_entry,
    ) -> zend_result;
}
extern "C" {
    pub fn zval_update_constant_with_ctx(
        pp: *mut zval,
        scope: *mut zend_class_entry,
        ctx: *mut zend_ast_evaluate_ctx,
    ) -> zend_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_vm_stack {
    pub top: *mut zval,
    pub end: *mut zval,
    pub prev: zend_vm_stack,
}
#[test]
fn bindgen_test_layout__zend_vm_stack() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_vm_stack> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_vm_stack>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_vm_stack)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_vm_stack>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_vm_stack)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_vm_stack), "::", stringify!(top)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_vm_stack), "::", stringify!(end)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_zend_vm_stack), "::", stringify!(prev)),
    );
}
extern "C" {
    pub fn zend_vm_stack_init();
}
extern "C" {
    pub fn zend_vm_stack_init_ex(page_size: usize);
}
extern "C" {
    pub fn zend_vm_stack_destroy();
}
extern "C" {
    pub fn zend_vm_stack_extend(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zend_vm_stack_copy_call_frame(
        call: *mut zend_execute_data,
        passed_args: u32,
        additional_args: u32,
    ) -> *mut zend_execute_data;
}
extern "C" {
    pub fn zend_free_extra_named_params(extra_named_params: *mut zend_array);
}
extern "C" {
    pub fn get_active_class_name(
        space: *mut *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_active_function_name() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_active_function_arg_name(arg_num: u32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_function_arg_name(
        func: *const zend_function,
        arg_num: u32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_active_function_or_method_name() -> *mut zend_string;
}
extern "C" {
    pub fn get_function_or_method_name(func: *const zend_function) -> *mut zend_string;
}
extern "C" {
    pub fn zend_get_executed_filename() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_get_executed_filename_ex() -> *mut zend_string;
}
extern "C" {
    pub fn zend_get_executed_lineno() -> u32;
}
extern "C" {
    pub fn zend_get_executed_scope() -> *mut zend_class_entry;
}
extern "C" {
    pub fn zend_is_executing() -> bool;
}
extern "C" {
    pub fn zend_cannot_pass_by_reference(arg_num: u32);
}
extern "C" {
    pub fn zend_set_timeout(seconds: zend_long, reset_signals: bool);
}
extern "C" {
    pub fn zend_unset_timeout();
}
extern "C" {
    pub fn zend_timeout() -> !;
}
extern "C" {
    pub fn zend_fetch_class(
        class_name: *mut zend_string,
        fetch_type: u32,
    ) -> *mut zend_class_entry;
}
extern "C" {
    pub fn zend_fetch_class_with_scope(
        class_name: *mut zend_string,
        fetch_type: u32,
        scope: *mut zend_class_entry,
    ) -> *mut zend_class_entry;
}
extern "C" {
    pub fn zend_fetch_class_by_name(
        class_name: *mut zend_string,
        lcname: *mut zend_string,
        fetch_type: u32,
    ) -> *mut zend_class_entry;
}
extern "C" {
    pub fn zend_fetch_function(name: *mut zend_string) -> *mut zend_function;
}
extern "C" {
    pub fn zend_fetch_function_str(
        name: *const ::std::os::raw::c_char,
        len: usize,
    ) -> *mut zend_function;
}
extern "C" {
    pub fn zend_init_func_run_time_cache(op_array: *mut zend_op_array);
}
extern "C" {
    pub fn zend_fetch_dimension_const(
        result: *mut zval,
        container: *mut zval,
        dim: *mut zval,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zend_get_compiled_variable_value(
        execute_data_ptr: *const zend_execute_data,
        var: u32,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_gcc_global_regs() -> bool;
}
extern "C" {
    pub fn zend_set_user_opcode_handler(
        opcode: u8,
        handler: user_opcode_handler_t,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_get_user_opcode_handler(opcode: u8) -> user_opcode_handler_t;
}
extern "C" {
    pub fn zend_get_zval_ptr(
        opline: *const zend_op,
        op_type: ::std::os::raw::c_int,
        node: *const znode_op,
        execute_data: *const zend_execute_data,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_clean_and_cache_symbol_table(symbol_table: *mut zend_array);
}
extern "C" {
    pub fn zend_free_compiled_variables(execute_data: *mut zend_execute_data);
}
extern "C" {
    pub fn zend_unfinished_calls_gc(
        execute_data: *mut zend_execute_data,
        call: *mut zend_execute_data,
        op_num: u32,
        buf: *mut zend_get_gc_buffer,
    );
}
extern "C" {
    pub fn zend_cleanup_unfinished_execution(
        execute_data: *mut zend_execute_data,
        op_num: u32,
        catch_op_num: u32,
    );
}
extern "C" {
    pub fn zend_unfinished_execution_gc(
        execute_data: *mut zend_execute_data,
        call: *mut zend_execute_data,
        gc_buffer: *mut zend_get_gc_buffer,
    ) -> *mut HashTable;
}
extern "C" {
    pub fn zend_unfinished_execution_gc_ex(
        execute_data: *mut zend_execute_data,
        call: *mut zend_execute_data,
        gc_buffer: *mut zend_get_gc_buffer,
        suspended_by_yield: bool,
    ) -> *mut HashTable;
}
extern "C" {
    pub fn zend_handle_named_arg(
        call_ptr: *mut *mut zend_execute_data,
        arg_name: *mut zend_string,
        arg_num_ptr: *mut u32,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_handle_undef_args(call: *mut zend_execute_data) -> zend_result;
}
extern "C" {
    pub fn zend_verify_class_constant_type(
        c: *mut zend_class_constant,
        name: *const zend_string,
        constant: *mut zval,
    ) -> bool;
}
extern "C" {
    pub fn zend_verify_class_constant_type_error(
        c: *const zend_class_constant,
        name: *const zend_string,
        constant: *const zval,
    );
}
extern "C" {
    pub fn zend_verify_property_type(
        info: *const zend_property_info,
        property: *mut zval,
        strict: bool,
    ) -> bool;
}
extern "C" {
    pub fn zend_verify_property_type_error(
        info: *const zend_property_info,
        property: *const zval,
    );
}
extern "C" {
    pub fn zend_magic_get_property_type_inconsistency_error(
        info: *const zend_property_info,
        property: *const zval,
    );
}
extern "C" {
    pub fn zend_match_unhandled_error(value: *const zval);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_function_entry {
    pub fname: *const ::std::os::raw::c_char,
    pub handler: zif_handler,
    pub arg_info: *const _zend_internal_arg_info,
    pub num_args: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout__zend_function_entry() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_function_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_function_entry>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_function_entry)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_function_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_function_entry)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function_entry),
            "::",
            stringify!(fname),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function_entry),
            "::",
            stringify!(handler),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_info) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function_entry),
            "::",
            stringify!(arg_info),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_args) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function_entry),
            "::",
            stringify!(num_args),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function_entry),
            "::",
            stringify!(flags),
        ),
    );
}
pub type zend_function_entry = _zend_function_entry;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_fcall_info {
    pub size: usize,
    pub function_name: zval,
    pub retval: *mut zval,
    pub params: *mut zval,
    pub object: *mut zend_object,
    pub param_count: u32,
    pub named_params: *mut HashTable,
}
#[test]
fn bindgen_test_layout__zend_fcall_info() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_fcall_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_fcall_info>(),
        64usize,
        concat!("Size of: ", stringify!(_zend_fcall_info)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_fcall_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_fcall_info)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info),
            "::",
            stringify!(size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info),
            "::",
            stringify!(function_name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retval) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info),
            "::",
            stringify!(retval),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info),
            "::",
            stringify!(params),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info),
            "::",
            stringify!(object),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_count) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info),
            "::",
            stringify!(param_count),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).named_params) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info),
            "::",
            stringify!(named_params),
        ),
    );
}
pub type zend_fcall_info = _zend_fcall_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_fcall_info_cache {
    pub function_handler: *mut zend_function,
    pub calling_scope: *mut zend_class_entry,
    pub called_scope: *mut zend_class_entry,
    pub object: *mut zend_object,
    pub closure: *mut zend_object,
}
#[test]
fn bindgen_test_layout__zend_fcall_info_cache() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_fcall_info_cache> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_fcall_info_cache>(),
        40usize,
        concat!("Size of: ", stringify!(_zend_fcall_info_cache)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_fcall_info_cache>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_fcall_info_cache)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info_cache),
            "::",
            stringify!(function_handler),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).calling_scope) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info_cache),
            "::",
            stringify!(calling_scope),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).called_scope) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info_cache),
            "::",
            stringify!(called_scope),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info_cache),
            "::",
            stringify!(object),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).closure) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_fcall_info_cache),
            "::",
            stringify!(closure),
        ),
    );
}
pub type zend_fcall_info_cache = _zend_fcall_info_cache;
extern "C" {
    pub fn zend_next_free_module() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zend_get_parameters_array_ex(
        param_count: u32,
        argument_array: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_copy_parameters_array(
        param_count: u32,
        argument_array: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_parse_parameters(
        num_args: u32,
        type_spec: *const ::std::os::raw::c_char,
        ...
    ) -> zend_result;
}
extern "C" {
    pub fn zend_parse_parameters_ex(
        flags: ::std::os::raw::c_int,
        num_args: u32,
        type_spec: *const ::std::os::raw::c_char,
        ...
    ) -> zend_result;
}
extern "C" {
    pub fn zend_zval_type_name(arg: *const zval) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_zval_value_name(arg: *const zval) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_zval_get_legacy_type(arg: *const zval) -> *mut zend_string;
}
extern "C" {
    pub fn zend_parse_method_parameters(
        num_args: u32,
        this_ptr: *mut zval,
        type_spec: *const ::std::os::raw::c_char,
        ...
    ) -> zend_result;
}
extern "C" {
    pub fn zend_parse_method_parameters_ex(
        flags: ::std::os::raw::c_int,
        num_args: u32,
        this_ptr: *mut zval,
        type_spec: *const ::std::os::raw::c_char,
        ...
    ) -> zend_result;
}
extern "C" {
    pub fn zend_parse_parameter(
        flags: ::std::os::raw::c_int,
        arg_num: u32,
        arg: *mut zval,
        spec: *const ::std::os::raw::c_char,
        ...
    ) -> zend_result;
}
extern "C" {
    pub fn zend_register_functions(
        scope: *mut zend_class_entry,
        functions: *const zend_function_entry,
        function_table: *mut HashTable,
        type_: ::std::os::raw::c_int,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_unregister_functions(
        functions: *const zend_function_entry,
        count: ::std::os::raw::c_int,
        function_table: *mut HashTable,
    );
}
extern "C" {
    pub fn zend_startup_module(module_entry: *mut zend_module_entry) -> zend_result;
}
extern "C" {
    pub fn zend_register_internal_module(
        module_entry: *mut zend_module_entry,
    ) -> *mut zend_module_entry;
}
extern "C" {
    pub fn zend_register_module_ex(
        module: *mut zend_module_entry,
    ) -> *mut zend_module_entry;
}
extern "C" {
    pub fn zend_startup_module_ex(module: *mut zend_module_entry) -> zend_result;
}
extern "C" {
    pub fn zend_startup_modules();
}
extern "C" {
    pub fn zend_collect_module_handlers();
}
extern "C" {
    pub fn zend_destroy_modules();
}
extern "C" {
    pub fn zend_check_magic_method_implementation(
        ce: *const zend_class_entry,
        fptr: *const zend_function,
        lcname: *mut zend_string,
        error_type: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zend_add_magic_method(
        ce: *mut zend_class_entry,
        fptr: *mut zend_function,
        lcname: *mut zend_string,
    );
}
extern "C" {
    pub fn zend_register_internal_class(
        class_entry: *mut zend_class_entry,
    ) -> *mut zend_class_entry;
}
extern "C" {
    pub fn zend_register_internal_class_ex(
        class_entry: *mut zend_class_entry,
        parent_ce: *mut zend_class_entry,
    ) -> *mut zend_class_entry;
}
extern "C" {
    pub fn zend_register_internal_interface(
        orig_class_entry: *mut zend_class_entry,
    ) -> *mut zend_class_entry;
}
extern "C" {
    pub fn zend_class_implements(
        class_entry: *mut zend_class_entry,
        num_interfaces: ::std::os::raw::c_int,
        ...
    );
}
extern "C" {
    pub fn zend_register_class_alias_ex(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        ce: *mut zend_class_entry,
        persistent: bool,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_disable_functions(function_list: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn zend_disable_class(
        class_name: *const ::std::os::raw::c_char,
        class_name_length: usize,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_wrong_param_count();
}
extern "C" {
    pub fn zend_wrong_property_read(object: *mut zval, property: *mut zval);
}
extern "C" {
    pub fn zend_release_fcall_info_cache(fcc: *mut zend_fcall_info_cache);
}
extern "C" {
    pub fn zend_get_callable_name_ex(
        callable: *mut zval,
        object: *mut zend_object,
    ) -> *mut zend_string;
}
extern "C" {
    pub fn zend_get_callable_name(callable: *mut zval) -> *mut zend_string;
}
extern "C" {
    pub fn zend_is_callable_at_frame(
        callable: *mut zval,
        object: *mut zend_object,
        frame: *mut zend_execute_data,
        check_flags: u32,
        fcc: *mut zend_fcall_info_cache,
        error: *mut *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn zend_is_callable_ex(
        callable: *mut zval,
        object: *mut zend_object,
        check_flags: u32,
        callable_name: *mut *mut zend_string,
        fcc: *mut zend_fcall_info_cache,
        error: *mut *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn zend_is_callable(
        callable: *mut zval,
        check_flags: u32,
        callable_name: *mut *mut zend_string,
    ) -> bool;
}
extern "C" {
    pub fn zend_make_callable(
        callable: *mut zval,
        callable_name: *mut *mut zend_string,
    ) -> bool;
}
extern "C" {
    pub fn zend_get_module_version(
        module_name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_get_module_started(
        module_name: *const ::std::os::raw::c_char,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_declare_typed_property(
        ce: *mut zend_class_entry,
        name: *mut zend_string,
        property: *mut zval,
        access_type: ::std::os::raw::c_int,
        doc_comment: *mut zend_string,
        type_: zend_type,
    ) -> *mut zend_property_info;
}
extern "C" {
    pub fn zend_declare_property_ex(
        ce: *mut zend_class_entry,
        name: *mut zend_string,
        property: *mut zval,
        access_type: ::std::os::raw::c_int,
        doc_comment: *mut zend_string,
    );
}
extern "C" {
    pub fn zend_declare_property(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        property: *mut zval,
        access_type: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zend_declare_property_null(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        access_type: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zend_declare_property_bool(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: zend_long,
        access_type: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zend_declare_property_long(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: zend_long,
        access_type: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zend_declare_property_double(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: f64,
        access_type: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zend_declare_property_string(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const ::std::os::raw::c_char,
        access_type: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zend_declare_property_stringl(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const ::std::os::raw::c_char,
        value_len: usize,
        access_type: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zend_declare_typed_class_constant(
        ce: *mut zend_class_entry,
        name: *mut zend_string,
        value: *mut zval,
        access_type: ::std::os::raw::c_int,
        doc_comment: *mut zend_string,
        type_: zend_type,
    ) -> *mut zend_class_constant;
}
extern "C" {
    pub fn zend_declare_class_constant_ex(
        ce: *mut zend_class_entry,
        name: *mut zend_string,
        value: *mut zval,
        access_type: ::std::os::raw::c_int,
        doc_comment: *mut zend_string,
    ) -> *mut zend_class_constant;
}
extern "C" {
    pub fn zend_declare_class_constant(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *mut zval,
    );
}
extern "C" {
    pub fn zend_declare_class_constant_null(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    );
}
extern "C" {
    pub fn zend_declare_class_constant_long(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: zend_long,
    );
}
extern "C" {
    pub fn zend_declare_class_constant_bool(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: bool,
    );
}
extern "C" {
    pub fn zend_declare_class_constant_double(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: f64,
    );
}
extern "C" {
    pub fn zend_declare_class_constant_stringl(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const ::std::os::raw::c_char,
        value_length: usize,
    );
}
extern "C" {
    pub fn zend_declare_class_constant_string(
        ce: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn zend_update_class_constant(
        c: *mut zend_class_constant,
        name: *const zend_string,
        scope: *mut zend_class_entry,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_update_class_constants(class_type: *mut zend_class_entry) -> zend_result;
}
extern "C" {
    pub fn zend_separate_class_constants_table(
        class_type: *mut zend_class_entry,
    ) -> *mut HashTable;
}
extern "C" {
    pub fn zend_update_property_ex(
        scope: *mut zend_class_entry,
        object: *mut zend_object,
        name: *mut zend_string,
        value: *mut zval,
    );
}
extern "C" {
    pub fn zend_update_property(
        scope: *mut zend_class_entry,
        object: *mut zend_object,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *mut zval,
    );
}
extern "C" {
    pub fn zend_update_property_null(
        scope: *mut zend_class_entry,
        object: *mut zend_object,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    );
}
extern "C" {
    pub fn zend_update_property_bool(
        scope: *mut zend_class_entry,
        object: *mut zend_object,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: zend_long,
    );
}
extern "C" {
    pub fn zend_update_property_long(
        scope: *mut zend_class_entry,
        object: *mut zend_object,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: zend_long,
    );
}
extern "C" {
    pub fn zend_update_property_double(
        scope: *mut zend_class_entry,
        object: *mut zend_object,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: f64,
    );
}
extern "C" {
    pub fn zend_update_property_str(
        scope: *mut zend_class_entry,
        object: *mut zend_object,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *mut zend_string,
    );
}
extern "C" {
    pub fn zend_update_property_string(
        scope: *mut zend_class_entry,
        object: *mut zend_object,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn zend_update_property_stringl(
        scope: *mut zend_class_entry,
        object: *mut zend_object,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const ::std::os::raw::c_char,
        value_length: usize,
    );
}
extern "C" {
    pub fn zend_unset_property(
        scope: *mut zend_class_entry,
        object: *mut zend_object,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    );
}
extern "C" {
    pub fn zend_update_static_property_ex(
        scope: *mut zend_class_entry,
        name: *mut zend_string,
        value: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_update_static_property(
        scope: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_update_static_property_null(
        scope: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_update_static_property_bool(
        scope: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: zend_long,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_update_static_property_long(
        scope: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: zend_long,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_update_static_property_double(
        scope: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: f64,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_update_static_property_string(
        scope: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const ::std::os::raw::c_char,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_update_static_property_stringl(
        scope: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        value: *const ::std::os::raw::c_char,
        value_length: usize,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_read_property_ex(
        scope: *mut zend_class_entry,
        object: *mut zend_object,
        name: *mut zend_string,
        silent: bool,
        rv: *mut zval,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_read_property(
        scope: *mut zend_class_entry,
        object: *mut zend_object,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        silent: bool,
        rv: *mut zval,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_read_static_property_ex(
        scope: *mut zend_class_entry,
        name: *mut zend_string,
        silent: bool,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_read_static_property(
        scope: *mut zend_class_entry,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        silent: bool,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_get_type_by_const(
        type_: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn object_init(arg: *mut zval);
}
extern "C" {
    pub fn object_init_ex(arg: *mut zval, ce: *mut zend_class_entry) -> zend_result;
}
extern "C" {
    pub fn object_and_properties_init(
        arg: *mut zval,
        ce: *mut zend_class_entry,
        properties: *mut HashTable,
    ) -> zend_result;
}
extern "C" {
    pub fn object_properties_init(
        object: *mut zend_object,
        class_type: *mut zend_class_entry,
    );
}
extern "C" {
    pub fn object_properties_init_ex(
        object: *mut zend_object,
        properties: *mut HashTable,
    );
}
extern "C" {
    pub fn object_properties_load(object: *mut zend_object, properties: *mut HashTable);
}
extern "C" {
    pub fn zend_merge_properties(obj: *mut zval, properties: *mut HashTable);
}
extern "C" {
    pub fn add_assoc_long_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        n: zend_long,
    );
}
extern "C" {
    pub fn add_assoc_null_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
    );
}
extern "C" {
    pub fn add_assoc_bool_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        b: bool,
    );
}
extern "C" {
    pub fn add_assoc_resource_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        r: *mut zend_resource,
    );
}
extern "C" {
    pub fn add_assoc_double_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        d: f64,
    );
}
extern "C" {
    pub fn add_assoc_str_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        str_: *mut zend_string,
    );
}
extern "C" {
    pub fn add_assoc_string_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        str_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn add_assoc_stringl_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        str_: *const ::std::os::raw::c_char,
        length: usize,
    );
}
extern "C" {
    pub fn add_assoc_array_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        arr: *mut zend_array,
    );
}
extern "C" {
    pub fn add_assoc_object_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        obj: *mut zend_object,
    );
}
extern "C" {
    pub fn add_assoc_reference_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        ref_: *mut zend_reference,
    );
}
extern "C" {
    pub fn add_assoc_zval_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        value: *mut zval,
    );
}
extern "C" {
    pub fn add_index_long(arg: *mut zval, index: zend_ulong, n: zend_long);
}
extern "C" {
    pub fn add_index_null(arg: *mut zval, index: zend_ulong);
}
extern "C" {
    pub fn add_index_bool(arg: *mut zval, index: zend_ulong, b: bool);
}
extern "C" {
    pub fn add_index_resource(arg: *mut zval, index: zend_ulong, r: *mut zend_resource);
}
extern "C" {
    pub fn add_index_double(arg: *mut zval, index: zend_ulong, d: f64);
}
extern "C" {
    pub fn add_index_str(arg: *mut zval, index: zend_ulong, str_: *mut zend_string);
}
extern "C" {
    pub fn add_index_string(
        arg: *mut zval,
        index: zend_ulong,
        str_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn add_index_stringl(
        arg: *mut zval,
        index: zend_ulong,
        str_: *const ::std::os::raw::c_char,
        length: usize,
    );
}
extern "C" {
    pub fn add_index_array(arg: *mut zval, index: zend_ulong, arr: *mut zend_array);
}
extern "C" {
    pub fn add_index_object(arg: *mut zval, index: zend_ulong, obj: *mut zend_object);
}
extern "C" {
    pub fn add_index_reference(
        arg: *mut zval,
        index: zend_ulong,
        ref_: *mut zend_reference,
    );
}
extern "C" {
    pub fn add_next_index_long(arg: *mut zval, n: zend_long) -> zend_result;
}
extern "C" {
    pub fn add_next_index_null(arg: *mut zval) -> zend_result;
}
extern "C" {
    pub fn add_next_index_bool(arg: *mut zval, b: bool) -> zend_result;
}
extern "C" {
    pub fn add_next_index_resource(arg: *mut zval, r: *mut zend_resource) -> zend_result;
}
extern "C" {
    pub fn add_next_index_double(arg: *mut zval, d: f64) -> zend_result;
}
extern "C" {
    pub fn add_next_index_str(arg: *mut zval, str_: *mut zend_string) -> zend_result;
}
extern "C" {
    pub fn add_next_index_string(
        arg: *mut zval,
        str_: *const ::std::os::raw::c_char,
    ) -> zend_result;
}
extern "C" {
    pub fn add_next_index_stringl(
        arg: *mut zval,
        str_: *const ::std::os::raw::c_char,
        length: usize,
    ) -> zend_result;
}
extern "C" {
    pub fn add_next_index_array(arg: *mut zval, arr: *mut zend_array) -> zend_result;
}
extern "C" {
    pub fn add_next_index_object(arg: *mut zval, obj: *mut zend_object) -> zend_result;
}
extern "C" {
    pub fn add_next_index_reference(
        arg: *mut zval,
        ref_: *mut zend_reference,
    ) -> zend_result;
}
extern "C" {
    pub fn array_set_zval_key(
        ht: *mut HashTable,
        key: *mut zval,
        value: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn add_property_long_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        l: zend_long,
    );
}
extern "C" {
    pub fn add_property_null_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
    );
}
extern "C" {
    pub fn add_property_bool_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        b: zend_long,
    );
}
extern "C" {
    pub fn add_property_resource_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        r: *mut zend_resource,
    );
}
extern "C" {
    pub fn add_property_double_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        d: f64,
    );
}
extern "C" {
    pub fn add_property_str_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        str_: *mut zend_string,
    );
}
extern "C" {
    pub fn add_property_string_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        str_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn add_property_stringl_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        str_: *const ::std::os::raw::c_char,
        length: usize,
    );
}
extern "C" {
    pub fn add_property_array_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        arr: *mut zend_array,
    );
}
extern "C" {
    pub fn add_property_object_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        obj: *mut zend_object,
    );
}
extern "C" {
    pub fn add_property_reference_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        ref_: *mut zend_reference,
    );
}
extern "C" {
    pub fn add_property_zval_ex(
        arg: *mut zval,
        key: *const ::std::os::raw::c_char,
        key_len: usize,
        value: *mut zval,
    );
}
extern "C" {
    pub fn _call_user_function_impl(
        object: *mut zval,
        function_name: *mut zval,
        retval_ptr: *mut zval,
        param_count: u32,
        params: *mut zval,
        named_params: *mut HashTable,
    ) -> zend_result;
}
extern "C" {
    pub static empty_fcall_info: zend_fcall_info;
}
extern "C" {
    pub static empty_fcall_info_cache: zend_fcall_info_cache;
}
extern "C" {
    /** Build zend_call_info/cache from a zval*

 Caller is responsible to provide a return value (fci->retval), otherwise the we will crash.
 In order to pass parameters the following members need to be set:
 fci->param_count = 0;
 fci->params = NULL;
 The callable_name argument may be NULL.*/
    pub fn zend_fcall_info_init(
        callable: *mut zval,
        check_flags: u32,
        fci: *mut zend_fcall_info,
        fcc: *mut zend_fcall_info_cache,
        callable_name: *mut *mut zend_string,
        error: *mut *mut ::std::os::raw::c_char,
    ) -> zend_result;
}
extern "C" {
    /** Clear arguments connected with zend_fcall_info *fci
 If free_mem is not zero then the params array gets free'd as well*/
    pub fn zend_fcall_info_args_clear(fci: *mut zend_fcall_info, free_mem: bool);
}
extern "C" {
    /** Save current arguments from zend_fcall_info *fci
 params array will be set to NULL*/
    pub fn zend_fcall_info_args_save(
        fci: *mut zend_fcall_info,
        param_count: *mut u32,
        params: *mut *mut zval,
    );
}
extern "C" {
    /// Free arguments connected with zend_fcall_info *fci and set back saved ones.
    pub fn zend_fcall_info_args_restore(
        fci: *mut zend_fcall_info,
        param_count: u32,
        params: *mut zval,
    );
}
extern "C" {
    /** Set or clear the arguments in the zend_call_info struct taking care of
 refcount. If args is NULL and arguments are set then those are cleared.*/
    pub fn zend_fcall_info_args(
        fci: *mut zend_fcall_info,
        args: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_fcall_info_args_ex(
        fci: *mut zend_fcall_info,
        func: *mut zend_function,
        args: *mut zval,
    ) -> zend_result;
}
extern "C" {
    /** Set arguments in the zend_fcall_info struct taking care of refcount.
 If argc is 0 the arguments which are set will be cleared, else pass
 a variable amount of zval** arguments.*/
    pub fn zend_fcall_info_argp(fci: *mut zend_fcall_info, argc: u32, argv: *mut zval);
}
extern "C" {
    /** Set arguments in the zend_fcall_info struct taking care of refcount.
 If argc is 0 the arguments which are set will be cleared, else pass
 a variable amount of zval** arguments.*/
    pub fn zend_fcall_info_argv(
        fci: *mut zend_fcall_info,
        argc: u32,
        argv: *mut va_list,
    );
}
extern "C" {
    /** Set arguments in the zend_fcall_info struct taking care of refcount.
 If argc is 0 the arguments which are set will be cleared, else pass
 a variable amount of zval** arguments.*/
    pub fn zend_fcall_info_argn(fci: *mut zend_fcall_info, argc: u32, ...);
}
extern "C" {
    /** Call a function using information created by zend_fcall_info_init()/args().
 If args is given then those replace the argument info in fci is temporarily.*/
    pub fn zend_fcall_info_call(
        fci: *mut zend_fcall_info,
        fcc: *mut zend_fcall_info_cache,
        retval: *mut zval,
        args: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_get_callable_zval_from_fcc(
        fcc: *const zend_fcall_info_cache,
        callable: *mut zval,
    );
}
extern "C" {
    pub fn zend_call_function(
        fci: *mut zend_fcall_info,
        fci_cache: *mut zend_fcall_info_cache,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_call_known_function(
        fn_: *mut zend_function,
        object: *mut zend_object,
        called_scope: *mut zend_class_entry,
        retval_ptr: *mut zval,
        param_count: u32,
        params: *mut zval,
        named_params: *mut HashTable,
    );
}
extern "C" {
    pub fn zend_call_known_instance_method_with_2_params(
        fn_: *mut zend_function,
        object: *mut zend_object,
        retval_ptr: *mut zval,
        param1: *mut zval,
        param2: *mut zval,
    );
}
extern "C" {
    pub fn zend_call_method_if_exists(
        object: *mut zend_object,
        method_name: *mut zend_string,
        retval: *mut zval,
        param_count: u32,
        params: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_set_hash_symbol(
        symbol: *mut zval,
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        is_ref: bool,
        num_symbol_tables: ::std::os::raw::c_int,
        ...
    ) -> zend_result;
}
extern "C" {
    pub fn zend_delete_global_variable(name: *mut zend_string) -> zend_result;
}
extern "C" {
    pub fn zend_rebuild_symbol_table() -> *mut zend_array;
}
extern "C" {
    pub fn zend_attach_symbol_table(execute_data: *mut zend_execute_data);
}
extern "C" {
    pub fn zend_detach_symbol_table(execute_data: *mut zend_execute_data);
}
extern "C" {
    pub fn zend_set_local_var(
        name: *mut zend_string,
        value: *mut zval,
        force: bool,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_set_local_var_str(
        name: *const ::std::os::raw::c_char,
        len: usize,
        value: *mut zval,
        force: bool,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_get_object_type_case(
        ce: *const zend_class_entry,
        upper_case: bool,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_is_iterable(iterable: *const zval) -> bool;
}
extern "C" {
    pub fn zend_is_countable(countable: *const zval) -> bool;
}
extern "C" {
    pub fn zend_get_default_from_internal_arg_info(
        default_value_zval: *mut zval,
        arg_info: *mut zend_internal_arg_info,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_try_assign_typed_ref_ex(
        ref_: *mut zend_reference,
        zv: *mut zval,
        strict: bool,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_try_assign_typed_ref(
        ref_: *mut zend_reference,
        zv: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_try_assign_typed_ref_null(ref_: *mut zend_reference) -> zend_result;
}
extern "C" {
    pub fn zend_try_assign_typed_ref_bool(
        ref_: *mut zend_reference,
        val: bool,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_try_assign_typed_ref_long(
        ref_: *mut zend_reference,
        lval: zend_long,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_try_assign_typed_ref_double(
        ref_: *mut zend_reference,
        dval: f64,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_try_assign_typed_ref_empty_string(
        ref_: *mut zend_reference,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_try_assign_typed_ref_str(
        ref_: *mut zend_reference,
        str_: *mut zend_string,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_try_assign_typed_ref_string(
        ref_: *mut zend_reference,
        string: *const ::std::os::raw::c_char,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_try_assign_typed_ref_stringl(
        ref_: *mut zend_reference,
        string: *const ::std::os::raw::c_char,
        len: usize,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_try_assign_typed_ref_arr(
        ref_: *mut zend_reference,
        arr: *mut zend_array,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_try_assign_typed_ref_res(
        ref_: *mut zend_reference,
        res: *mut zend_resource,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_try_assign_typed_ref_zval(
        ref_: *mut zend_reference,
        zv: *mut zval,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_try_assign_typed_ref_zval_ex(
        ref_: *mut zend_reference,
        zv: *mut zval,
        strict: bool,
    ) -> zend_result;
}
pub const _zend_expected_type_Z_EXPECTED_LONG: _zend_expected_type = 0;
pub const _zend_expected_type_Z_EXPECTED_LONG_OR_NULL: _zend_expected_type = 1;
pub const _zend_expected_type_Z_EXPECTED_BOOL: _zend_expected_type = 2;
pub const _zend_expected_type_Z_EXPECTED_BOOL_OR_NULL: _zend_expected_type = 3;
pub const _zend_expected_type_Z_EXPECTED_STRING: _zend_expected_type = 4;
pub const _zend_expected_type_Z_EXPECTED_STRING_OR_NULL: _zend_expected_type = 5;
pub const _zend_expected_type_Z_EXPECTED_ARRAY: _zend_expected_type = 6;
pub const _zend_expected_type_Z_EXPECTED_ARRAY_OR_NULL: _zend_expected_type = 7;
pub const _zend_expected_type_Z_EXPECTED_ARRAY_OR_LONG: _zend_expected_type = 8;
pub const _zend_expected_type_Z_EXPECTED_ARRAY_OR_LONG_OR_NULL: _zend_expected_type = 9;
pub const _zend_expected_type_Z_EXPECTED_ITERABLE: _zend_expected_type = 10;
pub const _zend_expected_type_Z_EXPECTED_ITERABLE_OR_NULL: _zend_expected_type = 11;
pub const _zend_expected_type_Z_EXPECTED_FUNC: _zend_expected_type = 12;
pub const _zend_expected_type_Z_EXPECTED_FUNC_OR_NULL: _zend_expected_type = 13;
pub const _zend_expected_type_Z_EXPECTED_RESOURCE: _zend_expected_type = 14;
pub const _zend_expected_type_Z_EXPECTED_RESOURCE_OR_NULL: _zend_expected_type = 15;
pub const _zend_expected_type_Z_EXPECTED_PATH: _zend_expected_type = 16;
pub const _zend_expected_type_Z_EXPECTED_PATH_OR_NULL: _zend_expected_type = 17;
pub const _zend_expected_type_Z_EXPECTED_OBJECT: _zend_expected_type = 18;
pub const _zend_expected_type_Z_EXPECTED_OBJECT_OR_NULL: _zend_expected_type = 19;
pub const _zend_expected_type_Z_EXPECTED_DOUBLE: _zend_expected_type = 20;
pub const _zend_expected_type_Z_EXPECTED_DOUBLE_OR_NULL: _zend_expected_type = 21;
pub const _zend_expected_type_Z_EXPECTED_NUMBER: _zend_expected_type = 22;
pub const _zend_expected_type_Z_EXPECTED_NUMBER_OR_NULL: _zend_expected_type = 23;
pub const _zend_expected_type_Z_EXPECTED_NUMBER_OR_STRING: _zend_expected_type = 24;
pub const _zend_expected_type_Z_EXPECTED_NUMBER_OR_STRING_OR_NULL: _zend_expected_type = 25;
pub const _zend_expected_type_Z_EXPECTED_ARRAY_OR_STRING: _zend_expected_type = 26;
pub const _zend_expected_type_Z_EXPECTED_ARRAY_OR_STRING_OR_NULL: _zend_expected_type = 27;
pub const _zend_expected_type_Z_EXPECTED_STRING_OR_LONG: _zend_expected_type = 28;
pub const _zend_expected_type_Z_EXPECTED_STRING_OR_LONG_OR_NULL: _zend_expected_type = 29;
pub const _zend_expected_type_Z_EXPECTED_OBJECT_OR_CLASS_NAME: _zend_expected_type = 30;
pub const _zend_expected_type_Z_EXPECTED_OBJECT_OR_CLASS_NAME_OR_NULL: _zend_expected_type = 31;
pub const _zend_expected_type_Z_EXPECTED_OBJECT_OR_STRING: _zend_expected_type = 32;
pub const _zend_expected_type_Z_EXPECTED_OBJECT_OR_STRING_OR_NULL: _zend_expected_type = 33;
pub const _zend_expected_type_Z_EXPECTED_LAST: _zend_expected_type = 34;
pub type _zend_expected_type = ::std::os::raw::c_uint;
pub use self::_zend_expected_type as zend_expected_type;
extern "C" {
    pub fn zend_wrong_parameters_none_error();
}
extern "C" {
    pub fn zend_wrong_parameters_count_error(min_num_args: u32, max_num_args: u32);
}
extern "C" {
    pub fn zend_wrong_parameter_error(
        error_code: ::std::os::raw::c_int,
        num: u32,
        name: *mut ::std::os::raw::c_char,
        expected_type: zend_expected_type,
        arg: *mut zval,
    );
}
extern "C" {
    pub fn zend_wrong_parameter_type_error(
        num: u32,
        expected_type: zend_expected_type,
        arg: *mut zval,
    );
}
extern "C" {
    pub fn zend_wrong_parameter_class_error(
        num: u32,
        name: *const ::std::os::raw::c_char,
        arg: *mut zval,
    );
}
extern "C" {
    pub fn zend_wrong_parameter_class_or_null_error(
        num: u32,
        name: *const ::std::os::raw::c_char,
        arg: *mut zval,
    );
}
extern "C" {
    pub fn zend_wrong_parameter_class_or_long_error(
        num: u32,
        name: *const ::std::os::raw::c_char,
        arg: *mut zval,
    );
}
extern "C" {
    pub fn zend_wrong_parameter_class_or_long_or_null_error(
        num: u32,
        name: *const ::std::os::raw::c_char,
        arg: *mut zval,
    );
}
extern "C" {
    pub fn zend_wrong_parameter_class_or_string_error(
        num: u32,
        name: *const ::std::os::raw::c_char,
        arg: *mut zval,
    );
}
extern "C" {
    pub fn zend_wrong_parameter_class_or_string_or_null_error(
        num: u32,
        name: *const ::std::os::raw::c_char,
        arg: *mut zval,
    );
}
extern "C" {
    pub fn zend_wrong_callback_error(num: u32, error: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn zend_wrong_callback_or_null_error(
        num: u32,
        error: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn zend_unexpected_extra_named_error();
}
extern "C" {
    pub fn zend_argument_error_variadic(
        error_ce: *mut zend_class_entry,
        arg_num: u32,
        format: *const ::std::os::raw::c_char,
        va: va_list,
    );
}
extern "C" {
    pub fn zend_argument_error(
        error_ce: *mut zend_class_entry,
        arg_num: u32,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn zend_argument_type_error(
        arg_num: u32,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn zend_argument_value_error(
        arg_num: u32,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn zend_parse_arg_class(
        arg: *mut zval,
        pce: *mut *mut zend_class_entry,
        num: u32,
        check_null: bool,
    ) -> bool;
}
extern "C" {
    pub fn zend_parse_arg_bool_slow(
        arg: *const zval,
        dest: *mut bool,
        arg_num: u32,
    ) -> bool;
}
extern "C" {
    pub fn zend_parse_arg_bool_weak(
        arg: *const zval,
        dest: *mut bool,
        arg_num: u32,
    ) -> bool;
}
extern "C" {
    pub fn zend_parse_arg_long_slow(
        arg: *const zval,
        dest: *mut zend_long,
        arg_num: u32,
    ) -> bool;
}
extern "C" {
    pub fn zend_parse_arg_long_weak(
        arg: *const zval,
        dest: *mut zend_long,
        arg_num: u32,
    ) -> bool;
}
extern "C" {
    pub fn zend_parse_arg_double_slow(
        arg: *const zval,
        dest: *mut f64,
        arg_num: u32,
    ) -> bool;
}
extern "C" {
    pub fn zend_parse_arg_double_weak(
        arg: *const zval,
        dest: *mut f64,
        arg_num: u32,
    ) -> bool;
}
extern "C" {
    pub fn zend_parse_arg_str_slow(
        arg: *mut zval,
        dest: *mut *mut zend_string,
        arg_num: u32,
    ) -> bool;
}
extern "C" {
    pub fn zend_parse_arg_str_weak(
        arg: *mut zval,
        dest: *mut *mut zend_string,
        arg_num: u32,
    ) -> bool;
}
extern "C" {
    pub fn zend_parse_arg_number_slow(
        arg: *mut zval,
        dest: *mut *mut zval,
        arg_num: u32,
    ) -> bool;
}
extern "C" {
    pub fn zend_parse_arg_number_or_str_slow(
        arg: *mut zval,
        dest: *mut *mut zval,
        arg_num: u32,
    ) -> bool;
}
extern "C" {
    pub fn zend_parse_arg_str_or_long_slow(
        arg: *mut zval,
        dest_str: *mut *mut zend_string,
        dest_long: *mut zend_long,
        arg_num: u32,
    ) -> bool;
}
extern "C" {
    pub fn php_strlcpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        siz: usize,
    ) -> usize;
}
extern "C" {
    pub fn php_strlcat(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        siz: usize,
    ) -> usize;
}
extern "C" {
    pub fn php_safe_bcmp(
        a: *const zend_string,
        b: *const zend_string,
    ) -> ::std::os::raw::c_int;
}
pub const _ISupper: _bindgen_ty_18 = 256;
pub const _ISlower: _bindgen_ty_18 = 512;
pub const _ISalpha: _bindgen_ty_18 = 1024;
pub const _ISdigit: _bindgen_ty_18 = 2048;
pub const _ISxdigit: _bindgen_ty_18 = 4096;
pub const _ISspace: _bindgen_ty_18 = 8192;
pub const _ISprint: _bindgen_ty_18 = 16384;
pub const _ISgraph: _bindgen_ty_18 = 32768;
pub const _ISblank: _bindgen_ty_18 = 1;
pub const _IScntrl: _bindgen_ty_18 = 2;
pub const _ISpunct: _bindgen_ty_18 = 4;
pub const _ISalnum: _bindgen_ty_18 = 8;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isctype(
        __c: ::std::os::raw::c_int,
        __mask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalnum_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __tolower_l(
        __c: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper_l(
        __c: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct passwd {
    pub pw_name: *mut ::std::os::raw::c_char,
    pub pw_passwd: *mut ::std::os::raw::c_char,
    pub pw_uid: __uid_t,
    pub pw_gid: __gid_t,
    pub pw_gecos: *mut ::std::os::raw::c_char,
    pub pw_dir: *mut ::std::os::raw::c_char,
    pub pw_shell: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_passwd() {
    const UNINIT: ::std::mem::MaybeUninit<passwd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<passwd>(),
        48usize,
        concat!("Size of: ", stringify!(passwd)),
    );
    assert_eq!(
        ::std::mem::align_of::<passwd>(),
        8usize,
        concat!("Alignment of ", stringify!(passwd)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_name) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(passwd), "::", stringify!(pw_name)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_passwd) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(passwd), "::", stringify!(pw_passwd)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_uid) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(passwd), "::", stringify!(pw_uid)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_gid) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(passwd), "::", stringify!(pw_gid)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_gecos) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(passwd), "::", stringify!(pw_gecos)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_dir) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(passwd), "::", stringify!(pw_dir)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_shell) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(passwd), "::", stringify!(pw_shell)),
    );
}
extern "C" {
    pub fn setpwent();
}
extern "C" {
    pub fn endpwent();
}
extern "C" {
    pub fn getpwent() -> *mut passwd;
}
extern "C" {
    pub fn fgetpwent(__stream: *mut FILE) -> *mut passwd;
}
extern "C" {
    pub fn putpwent(__p: *const passwd, __f: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwuid(__uid: __uid_t) -> *mut passwd;
}
extern "C" {
    pub fn getpwnam(__name: *const ::std::os::raw::c_char) -> *mut passwd;
}
extern "C" {
    pub fn getpwent_r(
        __resultbuf: *mut passwd,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwuid_r(
        __uid: __uid_t,
        __resultbuf: *mut passwd,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwnam_r(
        __name: *const ::std::os::raw::c_char,
        __resultbuf: *mut passwd,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpwent_r(
        __stream: *mut FILE,
        __resultbuf: *mut passwd,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpw(
        __uid: __uid_t,
        __buffer: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ap_php_slprintf(
        buf: *mut ::std::os::raw::c_char,
        len: usize,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ap_php_vslprintf(
        buf: *mut ::std::os::raw::c_char,
        len: usize,
        format: *const ::std::os::raw::c_char,
        ap: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ap_php_snprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ap_php_vsnprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        ap: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ap_php_vasprintf(
        buf: *mut *mut ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ap: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ap_php_asprintf(
        buf: *mut *mut ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_0cvt(
        value: f64,
        ndigit: ::std::os::raw::c_int,
        dec_point: ::std::os::raw::c_char,
        exponent: ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn php_conv_fp(
        format: ::std::os::raw::c_char,
        num: f64,
        add_dp: bool,
        precision: ::std::os::raw::c_int,
        dec_point: ::std::os::raw::c_char,
        is_negative: *mut bool,
        buf: *mut ::std::os::raw::c_char,
        len: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
pub const length_modifier_e_LM_STD: length_modifier_e = 0;
pub const length_modifier_e_LM_INTMAX_T: length_modifier_e = 1;
pub const length_modifier_e_LM_PTRDIFF_T: length_modifier_e = 2;
pub const length_modifier_e_LM_LONG_LONG: length_modifier_e = 3;
pub const length_modifier_e_LM_SIZE_T: length_modifier_e = 4;
pub const length_modifier_e_LM_LONG: length_modifier_e = 5;
pub const length_modifier_e_LM_LONG_DOUBLE: length_modifier_e = 6;
pub type length_modifier_e = ::std::os::raw::c_uint;
extern "C" {
    pub fn ap_php_conv_10(
        num: i64,
        is_unsigned: bool,
        is_negative: *mut bool,
        buf_end: *mut ::std::os::raw::c_char,
        len: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ap_php_conv_p2(
        num: u64,
        nbits: ::std::os::raw::c_int,
        format: ::std::os::raw::c_char,
        buf_end: *mut ::std::os::raw::c_char,
        len: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn php_printf_to_smart_string(
        buf: *mut smart_string,
        format: *const ::std::os::raw::c_char,
        ap: va_list,
    );
}
extern "C" {
    pub fn php_printf_to_smart_str(
        buf: *mut smart_str,
        format: *const ::std::os::raw::c_char,
        ap: va_list,
    );
}
extern "C" {
    pub fn phperror(error: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn php_write(buf: *mut ::std::os::raw::c_void, size: usize) -> usize;
}
extern "C" {
    pub fn php_printf(format: *const ::std::os::raw::c_char, ...) -> usize;
}
extern "C" {
    pub fn php_printf_unchecked(format: *const ::std::os::raw::c_char, ...) -> usize;
}
extern "C" {
    pub fn php_during_module_startup() -> bool;
}
extern "C" {
    pub fn php_during_module_shutdown() -> bool;
}
extern "C" {
    pub fn php_get_module_initialized() -> bool;
}
extern "C" {
    pub fn closelog();
}
extern "C" {
    pub fn openlog(
        __ident: *const ::std::os::raw::c_char,
        __option: ::std::os::raw::c_int,
        __facility: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlogmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syslog(
        __pri: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn vsyslog(
        __pri: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __ap: __gnuc_va_list,
    );
}
extern "C" {
    pub fn php_syslog_str(priority: ::std::os::raw::c_int, message: *const zend_string);
}
extern "C" {
    pub fn php_syslog(
        arg1: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn php_openlog(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn php_closelog();
}
extern "C" {
    pub fn php_log_err_with_severity(
        log_message: *const ::std::os::raw::c_char,
        syslog_type_int: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Debug(format: *mut ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfgparse() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_verror(
        docref: *const ::std::os::raw::c_char,
        params: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
extern "C" {
    pub fn php_error_docref(
        docref: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn php_error_docref1(
        docref: *const ::std::os::raw::c_char,
        param1: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn php_error_docref2(
        docref: *const ::std::os::raw::c_char,
        param1: *const ::std::os::raw::c_char,
        param2: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub static mut php_register_internal_extensions_func: ::std::option::Option<
        unsafe extern "C" fn() -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub fn php_register_internal_extensions() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_register_pre_request_shutdown(
        func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn php_com_initialize();
}
extern "C" {
    pub fn php_get_current_user() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn php_get_internal_encoding() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn php_get_input_encoding() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn php_get_output_encoding() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut php_internal_encoding_changed: ::std::option::Option<
        unsafe extern "C" fn(),
    >;
}
pub const _php_output_handler_status_t_PHP_OUTPUT_HANDLER_FAILURE: _php_output_handler_status_t = 0;
pub const _php_output_handler_status_t_PHP_OUTPUT_HANDLER_SUCCESS: _php_output_handler_status_t = 1;
pub const _php_output_handler_status_t_PHP_OUTPUT_HANDLER_NO_DATA: _php_output_handler_status_t = 2;
pub type _php_output_handler_status_t = ::std::os::raw::c_uint;
pub use self::_php_output_handler_status_t as php_output_handler_status_t;
pub const _php_output_handler_hook_t_PHP_OUTPUT_HANDLER_HOOK_GET_OPAQ: _php_output_handler_hook_t = 0;
pub const _php_output_handler_hook_t_PHP_OUTPUT_HANDLER_HOOK_GET_FLAGS: _php_output_handler_hook_t = 1;
pub const _php_output_handler_hook_t_PHP_OUTPUT_HANDLER_HOOK_GET_LEVEL: _php_output_handler_hook_t = 2;
pub const _php_output_handler_hook_t_PHP_OUTPUT_HANDLER_HOOK_IMMUTABLE: _php_output_handler_hook_t = 3;
pub const _php_output_handler_hook_t_PHP_OUTPUT_HANDLER_HOOK_DISABLE: _php_output_handler_hook_t = 4;
pub const _php_output_handler_hook_t_PHP_OUTPUT_HANDLER_HOOK_LAST: _php_output_handler_hook_t = 5;
pub type _php_output_handler_hook_t = ::std::os::raw::c_uint;
pub use self::_php_output_handler_hook_t as php_output_handler_hook_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_output_buffer {
    pub data: *mut ::std::os::raw::c_char,
    pub size: usize,
    pub used: usize,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
#[test]
fn bindgen_test_layout__php_output_buffer() {
    const UNINIT: ::std::mem::MaybeUninit<_php_output_buffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_output_buffer>(),
        32usize,
        concat!("Size of: ", stringify!(_php_output_buffer)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_output_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_output_buffer)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_buffer),
            "::",
            stringify!(data),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_buffer),
            "::",
            stringify!(size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_buffer),
            "::",
            stringify!(used),
        ),
    );
}
impl _php_output_buffer {
    #[inline]
    pub fn free(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_free(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set__reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        free: u32,
        _reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
            .set(
                0usize,
                1u8,
                {
                    let free: u32 = unsafe { ::std::mem::transmute(free) };
                    free as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                1usize,
                31u8,
                {
                    let _reserved: u32 = unsafe { ::std::mem::transmute(_reserved) };
                    _reserved as u64
                },
            );
        __bindgen_bitfield_unit
    }
}
pub type php_output_buffer = _php_output_buffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_output_context {
    pub op: ::std::os::raw::c_int,
    pub in_: php_output_buffer,
    pub out: php_output_buffer,
}
#[test]
fn bindgen_test_layout__php_output_context() {
    const UNINIT: ::std::mem::MaybeUninit<_php_output_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_output_context>(),
        72usize,
        concat!("Size of: ", stringify!(_php_output_context)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_output_context>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_output_context)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_context),
            "::",
            stringify!(op),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_context),
            "::",
            stringify!(in_),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_context),
            "::",
            stringify!(out),
        ),
    );
}
pub type php_output_context = _php_output_context;
pub type php_output_handler_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        output: *mut ::std::os::raw::c_char,
        output_len: usize,
        handled_output: *mut *mut ::std::os::raw::c_char,
        handled_output_len: *mut usize,
        mode: ::std::os::raw::c_int,
    ),
>;
pub type php_output_handler_context_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        handler_context: *mut *mut ::std::os::raw::c_void,
        output_context: *mut php_output_context,
    ) -> ::std::os::raw::c_int,
>;
pub type php_output_handler_context_dtor_t = ::std::option::Option<
    unsafe extern "C" fn(opaq: *mut ::std::os::raw::c_void),
>;
pub type php_output_handler_conflict_check_t = ::std::option::Option<
    unsafe extern "C" fn(
        handler_name: *const ::std::os::raw::c_char,
        handler_name_len: usize,
    ) -> ::std::os::raw::c_int,
>;
pub type php_output_handler_alias_ctor_t = ::std::option::Option<
    unsafe extern "C" fn(
        handler_name: *const ::std::os::raw::c_char,
        handler_name_len: usize,
        chunk_size: usize,
        flags: ::std::os::raw::c_int,
    ) -> *mut _php_output_handler,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _php_output_handler_user_func_t {
    pub fci: zend_fcall_info,
    pub fcc: zend_fcall_info_cache,
    pub zoh: zval,
}
#[test]
fn bindgen_test_layout__php_output_handler_user_func_t() {
    const UNINIT: ::std::mem::MaybeUninit<_php_output_handler_user_func_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_output_handler_user_func_t>(),
        120usize,
        concat!("Size of: ", stringify!(_php_output_handler_user_func_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_output_handler_user_func_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_output_handler_user_func_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fci) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler_user_func_t),
            "::",
            stringify!(fci),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fcc) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler_user_func_t),
            "::",
            stringify!(fcc),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zoh) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler_user_func_t),
            "::",
            stringify!(zoh),
        ),
    );
}
pub type php_output_handler_user_func_t = _php_output_handler_user_func_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _php_output_handler {
    pub name: *mut zend_string,
    pub flags: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
    pub size: usize,
    pub buffer: php_output_buffer,
    pub opaq: *mut ::std::os::raw::c_void,
    pub dtor: ::std::option::Option<
        unsafe extern "C" fn(opaq: *mut ::std::os::raw::c_void),
    >,
    pub func: _php_output_handler__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _php_output_handler__bindgen_ty_1 {
    pub user: *mut php_output_handler_user_func_t,
    pub internal: php_output_handler_context_func_t,
}
#[test]
fn bindgen_test_layout__php_output_handler__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_php_output_handler__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_output_handler__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_php_output_handler__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_output_handler__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_output_handler__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler__bindgen_ty_1),
            "::",
            stringify!(user),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler__bindgen_ty_1),
            "::",
            stringify!(internal),
        ),
    );
}
#[test]
fn bindgen_test_layout__php_output_handler() {
    const UNINIT: ::std::mem::MaybeUninit<_php_output_handler> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_output_handler>(),
        80usize,
        concat!("Size of: ", stringify!(_php_output_handler)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_output_handler>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_output_handler)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler),
            "::",
            stringify!(name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler),
            "::",
            stringify!(flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler),
            "::",
            stringify!(level),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler),
            "::",
            stringify!(size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler),
            "::",
            stringify!(buffer),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaq) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler),
            "::",
            stringify!(opaq),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dtor) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler),
            "::",
            stringify!(dtor),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_output_handler),
            "::",
            stringify!(func),
        ),
    );
}
pub type php_output_handler = _php_output_handler;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_output_globals {
    pub handlers: zend_stack,
    pub active: *mut php_output_handler,
    pub running: *mut php_output_handler,
    pub output_start_filename: *mut zend_string,
    pub output_start_lineno: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__zend_output_globals() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_output_globals> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_output_globals>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_output_globals)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_output_globals>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_output_globals)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handlers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_output_globals),
            "::",
            stringify!(handlers),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_output_globals),
            "::",
            stringify!(active),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).running) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_output_globals),
            "::",
            stringify!(running),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).output_start_filename) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_output_globals),
            "::",
            stringify!(output_start_filename),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).output_start_lineno) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_output_globals),
            "::",
            stringify!(output_start_lineno),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_output_globals),
            "::",
            stringify!(flags),
        ),
    );
}
pub type zend_output_globals = _zend_output_globals;
extern "C" {
    pub static mut output_globals: zend_output_globals;
}
extern "C" {
    pub static php_output_default_handler_name: [::std::os::raw::c_char; 23usize];
}
extern "C" {
    pub static php_output_devnull_handler_name: [::std::os::raw::c_char; 20usize];
}
extern "C" {
    pub fn php_output_startup();
}
extern "C" {
    pub fn php_output_shutdown();
}
extern "C" {
    pub fn php_output_activate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_output_deactivate();
}
extern "C" {
    pub fn php_output_set_status(status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn php_output_get_status() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_output_set_implicit_flush(flush: ::std::os::raw::c_int);
}
extern "C" {
    pub fn php_output_get_start_filename() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn php_output_get_start_lineno() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_output_write_unbuffered(
        str_: *const ::std::os::raw::c_char,
        len: usize,
    ) -> usize;
}
extern "C" {
    pub fn php_output_write(str_: *const ::std::os::raw::c_char, len: usize) -> usize;
}
extern "C" {
    pub fn php_output_flush() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_output_flush_all();
}
extern "C" {
    pub fn php_output_clean() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_output_clean_all();
}
extern "C" {
    pub fn php_output_end() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_output_end_all();
}
extern "C" {
    pub fn php_output_discard() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_output_discard_all();
}
extern "C" {
    pub fn php_output_get_contents(p: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_output_get_length(p: *mut zval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_output_get_level() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_output_get_active_handler() -> *mut php_output_handler;
}
extern "C" {
    pub fn php_output_start_default() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_output_start_devnull() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_output_start_user(
        output_handler: *mut zval,
        chunk_size: usize,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_output_start_internal(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        output_handler: php_output_handler_func_t,
        chunk_size: usize,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_output_handler_create_user(
        handler: *mut zval,
        chunk_size: usize,
        flags: ::std::os::raw::c_int,
    ) -> *mut php_output_handler;
}
extern "C" {
    pub fn php_output_handler_create_internal(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        handler: php_output_handler_context_func_t,
        chunk_size: usize,
        flags: ::std::os::raw::c_int,
    ) -> *mut php_output_handler;
}
extern "C" {
    pub fn php_output_handler_set_context(
        handler: *mut php_output_handler,
        opaq: *mut ::std::os::raw::c_void,
        dtor: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    );
}
extern "C" {
    pub fn php_output_handler_start(
        handler: *mut php_output_handler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_output_handler_started(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_output_handler_hook(
        type_: php_output_handler_hook_t,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_output_handler_dtor(handler: *mut php_output_handler);
}
extern "C" {
    pub fn php_output_handler_free(handler: *mut *mut php_output_handler);
}
extern "C" {
    pub fn php_output_handler_conflict(
        handler_new: *const ::std::os::raw::c_char,
        handler_new_len: usize,
        handler_set: *const ::std::os::raw::c_char,
        handler_set_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_output_handler_conflict_register(
        handler_name: *const ::std::os::raw::c_char,
        handler_name_len: usize,
        check_func: php_output_handler_conflict_check_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_output_handler_reverse_conflict_register(
        handler_name: *const ::std::os::raw::c_char,
        handler_name_len: usize,
        check_func: php_output_handler_conflict_check_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_output_handler_alias(
        handler_name: *const ::std::os::raw::c_char,
        handler_name_len: usize,
    ) -> php_output_handler_alias_ctor_t;
}
extern "C" {
    pub fn php_output_handler_alias_register(
        handler_name: *const ::std::os::raw::c_char,
        handler_name_len: usize,
        func: php_output_handler_alias_ctor_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_file_le_stream() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_file_le_pstream() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_file_le_stream_filter() -> ::std::os::raw::c_int;
}
pub type php_stream = _php_stream;
pub type php_stream_wrapper = _php_stream_wrapper;
pub type php_stream_context = _php_stream_context;
pub type php_stream_filter = _php_stream_filter;
pub type php_stream_notification_func = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut php_stream_context,
        notifycode: ::std::os::raw::c_int,
        severity: ::std::os::raw::c_int,
        xmsg: *mut ::std::os::raw::c_char,
        xcode: ::std::os::raw::c_int,
        bytes_sofar: usize,
        bytes_max: usize,
        ptr: *mut ::std::os::raw::c_void,
    ),
>;
pub type php_stream_notifier = _php_stream_notifier;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _php_stream_notifier {
    pub func: php_stream_notification_func,
    pub dtor: ::std::option::Option<
        unsafe extern "C" fn(notifier: *mut php_stream_notifier),
    >,
    pub ptr: zval,
    pub mask: ::std::os::raw::c_int,
    pub progress: usize,
    pub progress_max: usize,
}
#[test]
fn bindgen_test_layout__php_stream_notifier() {
    const UNINIT: ::std::mem::MaybeUninit<_php_stream_notifier> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_stream_notifier>(),
        56usize,
        concat!("Size of: ", stringify!(_php_stream_notifier)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_notifier>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_notifier)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_notifier),
            "::",
            stringify!(func),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dtor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_notifier),
            "::",
            stringify!(dtor),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_notifier),
            "::",
            stringify!(ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_notifier),
            "::",
            stringify!(mask),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progress) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_notifier),
            "::",
            stringify!(progress),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progress_max) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_notifier),
            "::",
            stringify!(progress_max),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _php_stream_context {
    pub notifier: *mut php_stream_notifier,
    pub options: zval,
    pub res: *mut zend_resource,
}
#[test]
fn bindgen_test_layout__php_stream_context() {
    const UNINIT: ::std::mem::MaybeUninit<_php_stream_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_stream_context>(),
        32usize,
        concat!("Size of: ", stringify!(_php_stream_context)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_context>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_context)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_context),
            "::",
            stringify!(notifier),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_context),
            "::",
            stringify!(options),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_context),
            "::",
            stringify!(res),
        ),
    );
}
extern "C" {
    pub fn php_stream_context_free(context: *mut php_stream_context);
}
extern "C" {
    pub fn php_stream_context_alloc() -> *mut php_stream_context;
}
extern "C" {
    pub fn php_stream_context_get_option(
        context: *mut php_stream_context,
        wrappername: *const ::std::os::raw::c_char,
        optionname: *const ::std::os::raw::c_char,
    ) -> *mut zval;
}
extern "C" {
    pub fn php_stream_context_set_option(
        context: *mut php_stream_context,
        wrappername: *const ::std::os::raw::c_char,
        optionname: *const ::std::os::raw::c_char,
        optionvalue: *mut zval,
    );
}
extern "C" {
    pub fn php_stream_notification_alloc() -> *mut php_stream_notifier;
}
extern "C" {
    pub fn php_stream_notification_free(notifier: *mut php_stream_notifier);
}
extern "C" {
    pub fn php_stream_notification_notify(
        context: *mut php_stream_context,
        notifycode: ::std::os::raw::c_int,
        severity: ::std::os::raw::c_int,
        xmsg: *mut ::std::os::raw::c_char,
        xcode: ::std::os::raw::c_int,
        bytes_sofar: usize,
        bytes_max: usize,
        ptr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn php_stream_context_set(
        stream: *mut php_stream,
        context: *mut php_stream_context,
    ) -> *mut php_stream_context;
}
pub type php_stream_bucket = _php_stream_bucket;
pub type php_stream_bucket_brigade = _php_stream_bucket_brigade;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_bucket {
    pub next: *mut php_stream_bucket,
    pub prev: *mut php_stream_bucket,
    pub brigade: *mut php_stream_bucket_brigade,
    pub buf: *mut ::std::os::raw::c_char,
    pub buflen: usize,
    pub own_buf: u8,
    pub is_persistent: u8,
    pub refcount: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__php_stream_bucket() {
    const UNINIT: ::std::mem::MaybeUninit<_php_stream_bucket> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_stream_bucket>(),
        48usize,
        concat!("Size of: ", stringify!(_php_stream_bucket)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_bucket>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_bucket)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_bucket),
            "::",
            stringify!(next),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_bucket),
            "::",
            stringify!(prev),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).brigade) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_bucket),
            "::",
            stringify!(brigade),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_bucket),
            "::",
            stringify!(buf),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buflen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_bucket),
            "::",
            stringify!(buflen),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).own_buf) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_bucket),
            "::",
            stringify!(own_buf),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_persistent) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_bucket),
            "::",
            stringify!(is_persistent),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_bucket),
            "::",
            stringify!(refcount),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_bucket_brigade {
    pub head: *mut php_stream_bucket,
    pub tail: *mut php_stream_bucket,
}
#[test]
fn bindgen_test_layout__php_stream_bucket_brigade() {
    const UNINIT: ::std::mem::MaybeUninit<_php_stream_bucket_brigade> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_stream_bucket_brigade>(),
        16usize,
        concat!("Size of: ", stringify!(_php_stream_bucket_brigade)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_bucket_brigade>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_bucket_brigade)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_bucket_brigade),
            "::",
            stringify!(head),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tail) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_bucket_brigade),
            "::",
            stringify!(tail),
        ),
    );
}
pub const php_stream_filter_status_t_PSFS_ERR_FATAL: php_stream_filter_status_t = 0;
pub const php_stream_filter_status_t_PSFS_FEED_ME: php_stream_filter_status_t = 1;
pub const php_stream_filter_status_t_PSFS_PASS_ON: php_stream_filter_status_t = 2;
pub type php_stream_filter_status_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn php_stream_bucket_new(
        stream: *mut php_stream,
        buf: *mut ::std::os::raw::c_char,
        buflen: usize,
        own_buf: u8,
        buf_persistent: u8,
    ) -> *mut php_stream_bucket;
}
extern "C" {
    pub fn php_stream_bucket_split(
        in_: *mut php_stream_bucket,
        left: *mut *mut php_stream_bucket,
        right: *mut *mut php_stream_bucket,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_stream_bucket_delref(bucket: *mut php_stream_bucket);
}
extern "C" {
    pub fn php_stream_bucket_prepend(
        brigade: *mut php_stream_bucket_brigade,
        bucket: *mut php_stream_bucket,
    );
}
extern "C" {
    pub fn php_stream_bucket_append(
        brigade: *mut php_stream_bucket_brigade,
        bucket: *mut php_stream_bucket,
    );
}
extern "C" {
    pub fn php_stream_bucket_unlink(bucket: *mut php_stream_bucket);
}
extern "C" {
    pub fn php_stream_bucket_make_writeable(
        bucket: *mut php_stream_bucket,
    ) -> *mut php_stream_bucket;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_filter_ops {
    pub filter: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut php_stream,
            thisfilter: *mut php_stream_filter,
            buckets_in: *mut php_stream_bucket_brigade,
            buckets_out: *mut php_stream_bucket_brigade,
            bytes_consumed: *mut usize,
            flags: ::std::os::raw::c_int,
        ) -> php_stream_filter_status_t,
    >,
    pub dtor: ::std::option::Option<
        unsafe extern "C" fn(thisfilter: *mut php_stream_filter),
    >,
    pub label: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__php_stream_filter_ops() {
    const UNINIT: ::std::mem::MaybeUninit<_php_stream_filter_ops> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_stream_filter_ops>(),
        24usize,
        concat!("Size of: ", stringify!(_php_stream_filter_ops)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_filter_ops>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_filter_ops)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter_ops),
            "::",
            stringify!(filter),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dtor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter_ops),
            "::",
            stringify!(dtor),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter_ops),
            "::",
            stringify!(label),
        ),
    );
}
pub type php_stream_filter_ops = _php_stream_filter_ops;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_filter_chain {
    pub head: *mut php_stream_filter,
    pub tail: *mut php_stream_filter,
    pub stream: *mut php_stream,
}
#[test]
fn bindgen_test_layout__php_stream_filter_chain() {
    const UNINIT: ::std::mem::MaybeUninit<_php_stream_filter_chain> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_stream_filter_chain>(),
        24usize,
        concat!("Size of: ", stringify!(_php_stream_filter_chain)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_filter_chain>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_filter_chain)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter_chain),
            "::",
            stringify!(head),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tail) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter_chain),
            "::",
            stringify!(tail),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter_chain),
            "::",
            stringify!(stream),
        ),
    );
}
pub type php_stream_filter_chain = _php_stream_filter_chain;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _php_stream_filter {
    pub fops: *const php_stream_filter_ops,
    pub abstract_: zval,
    pub next: *mut php_stream_filter,
    pub prev: *mut php_stream_filter,
    pub is_persistent: ::std::os::raw::c_int,
    pub chain: *mut php_stream_filter_chain,
    pub buffer: php_stream_bucket_brigade,
    pub res: *mut zend_resource,
}
#[test]
fn bindgen_test_layout__php_stream_filter() {
    const UNINIT: ::std::mem::MaybeUninit<_php_stream_filter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_stream_filter>(),
        80usize,
        concat!("Size of: ", stringify!(_php_stream_filter)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_filter>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_filter)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fops) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter),
            "::",
            stringify!(fops),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abstract_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter),
            "::",
            stringify!(abstract_),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter),
            "::",
            stringify!(next),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter),
            "::",
            stringify!(prev),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_persistent) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter),
            "::",
            stringify!(is_persistent),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter),
            "::",
            stringify!(chain),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter),
            "::",
            stringify!(buffer),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter),
            "::",
            stringify!(res),
        ),
    );
}
extern "C" {
    pub fn _php_stream_filter_prepend(
        chain: *mut php_stream_filter_chain,
        filter: *mut php_stream_filter,
    );
}
extern "C" {
    pub fn php_stream_filter_prepend_ex(
        chain: *mut php_stream_filter_chain,
        filter: *mut php_stream_filter,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_filter_append(
        chain: *mut php_stream_filter_chain,
        filter: *mut php_stream_filter,
    );
}
extern "C" {
    pub fn php_stream_filter_append_ex(
        chain: *mut php_stream_filter_chain,
        filter: *mut php_stream_filter,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_filter_flush(
        filter: *mut php_stream_filter,
        finish: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_stream_filter_remove(
        filter: *mut php_stream_filter,
        call_dtor: ::std::os::raw::c_int,
    ) -> *mut php_stream_filter;
}
extern "C" {
    pub fn php_stream_filter_free(filter: *mut php_stream_filter);
}
extern "C" {
    pub fn _php_stream_filter_alloc(
        fops: *const php_stream_filter_ops,
        abstract_: *mut ::std::os::raw::c_void,
        persistent: u8,
    ) -> *mut php_stream_filter;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_filter_factory {
    pub create_filter: ::std::option::Option<
        unsafe extern "C" fn(
            filtername: *const ::std::os::raw::c_char,
            filterparams: *mut zval,
            persistent: u8,
        ) -> *mut php_stream_filter,
    >,
}
#[test]
fn bindgen_test_layout__php_stream_filter_factory() {
    const UNINIT: ::std::mem::MaybeUninit<_php_stream_filter_factory> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_stream_filter_factory>(),
        8usize,
        concat!("Size of: ", stringify!(_php_stream_filter_factory)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_filter_factory>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_filter_factory)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_filter) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_filter_factory),
            "::",
            stringify!(create_filter),
        ),
    );
}
pub type php_stream_filter_factory = _php_stream_filter_factory;
extern "C" {
    pub fn php_stream_filter_register_factory(
        filterpattern: *const ::std::os::raw::c_char,
        factory: *const php_stream_filter_factory,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_stream_filter_unregister_factory(
        filterpattern: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_stream_filter_register_factory_volatile(
        filterpattern: *mut zend_string,
        factory: *const php_stream_filter_factory,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_stream_filter_create(
        filtername: *const ::std::os::raw::c_char,
        filterparams: *mut zval,
        persistent: u8,
    ) -> *mut php_stream_filter;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_statbuf {
    pub sb: zend_stat_t,
}
#[test]
fn bindgen_test_layout__php_stream_statbuf() {
    const UNINIT: ::std::mem::MaybeUninit<_php_stream_statbuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_stream_statbuf>(),
        128usize,
        concat!("Size of: ", stringify!(_php_stream_statbuf)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_statbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_statbuf)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_statbuf),
            "::",
            stringify!(sb),
        ),
    );
}
pub type php_stream_statbuf = _php_stream_statbuf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_dirent {
    pub d_name: [::std::os::raw::c_char; 256usize],
    pub d_type: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__php_stream_dirent() {
    const UNINIT: ::std::mem::MaybeUninit<_php_stream_dirent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_stream_dirent>(),
        257usize,
        concat!("Size of: ", stringify!(_php_stream_dirent)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_dirent>(),
        1usize,
        concat!("Alignment of ", stringify!(_php_stream_dirent)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_dirent),
            "::",
            stringify!(d_name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_type) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_dirent),
            "::",
            stringify!(d_type),
        ),
    );
}
pub type php_stream_dirent = _php_stream_dirent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_ops {
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut php_stream,
            buf: *const ::std::os::raw::c_char,
            count: usize,
        ) -> isize,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut php_stream,
            buf: *mut ::std::os::raw::c_char,
            count: usize,
        ) -> isize,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut php_stream,
            close_handle: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(stream: *mut php_stream) -> ::std::os::raw::c_int,
    >,
    pub label: *const ::std::os::raw::c_char,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut php_stream,
            offset: zend_off_t,
            whence: ::std::os::raw::c_int,
            newoffset: *mut zend_off_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub cast: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut php_stream,
            castas: ::std::os::raw::c_int,
            ret: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub stat: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut php_stream,
            ssb: *mut php_stream_statbuf,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_option: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut php_stream,
            option: ::std::os::raw::c_int,
            value: ::std::os::raw::c_int,
            ptrparam: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__php_stream_ops() {
    const UNINIT: ::std::mem::MaybeUninit<_php_stream_ops> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_stream_ops>(),
        72usize,
        concat!("Size of: ", stringify!(_php_stream_ops)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_ops>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_ops)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_ops),
            "::",
            stringify!(write),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_php_stream_ops), "::", stringify!(read)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_ops),
            "::",
            stringify!(close),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flush) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_ops),
            "::",
            stringify!(flush),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_ops),
            "::",
            stringify!(label),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(_php_stream_ops), "::", stringify!(seek)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cast) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(_php_stream_ops), "::", stringify!(cast)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stat) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(_php_stream_ops), "::", stringify!(stat)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_option) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_ops),
            "::",
            stringify!(set_option),
        ),
    );
}
pub type php_stream_ops = _php_stream_ops;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_wrapper_ops {
    pub stream_opener: ::std::option::Option<
        unsafe extern "C" fn(
            wrapper: *mut php_stream_wrapper,
            filename: *const ::std::os::raw::c_char,
            mode: *const ::std::os::raw::c_char,
            options: ::std::os::raw::c_int,
            opened_path: *mut *mut zend_string,
            context: *mut php_stream_context,
        ) -> *mut php_stream,
    >,
    pub stream_closer: ::std::option::Option<
        unsafe extern "C" fn(
            wrapper: *mut php_stream_wrapper,
            stream: *mut php_stream,
        ) -> ::std::os::raw::c_int,
    >,
    pub stream_stat: ::std::option::Option<
        unsafe extern "C" fn(
            wrapper: *mut php_stream_wrapper,
            stream: *mut php_stream,
            ssb: *mut php_stream_statbuf,
        ) -> ::std::os::raw::c_int,
    >,
    pub url_stat: ::std::option::Option<
        unsafe extern "C" fn(
            wrapper: *mut php_stream_wrapper,
            url: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            ssb: *mut php_stream_statbuf,
            context: *mut php_stream_context,
        ) -> ::std::os::raw::c_int,
    >,
    pub dir_opener: ::std::option::Option<
        unsafe extern "C" fn(
            wrapper: *mut php_stream_wrapper,
            filename: *const ::std::os::raw::c_char,
            mode: *const ::std::os::raw::c_char,
            options: ::std::os::raw::c_int,
            opened_path: *mut *mut zend_string,
            context: *mut php_stream_context,
        ) -> *mut php_stream,
    >,
    pub label: *const ::std::os::raw::c_char,
    pub unlink: ::std::option::Option<
        unsafe extern "C" fn(
            wrapper: *mut php_stream_wrapper,
            url: *const ::std::os::raw::c_char,
            options: ::std::os::raw::c_int,
            context: *mut php_stream_context,
        ) -> ::std::os::raw::c_int,
    >,
    pub rename: ::std::option::Option<
        unsafe extern "C" fn(
            wrapper: *mut php_stream_wrapper,
            url_from: *const ::std::os::raw::c_char,
            url_to: *const ::std::os::raw::c_char,
            options: ::std::os::raw::c_int,
            context: *mut php_stream_context,
        ) -> ::std::os::raw::c_int,
    >,
    pub stream_mkdir: ::std::option::Option<
        unsafe extern "C" fn(
            wrapper: *mut php_stream_wrapper,
            url: *const ::std::os::raw::c_char,
            mode: ::std::os::raw::c_int,
            options: ::std::os::raw::c_int,
            context: *mut php_stream_context,
        ) -> ::std::os::raw::c_int,
    >,
    pub stream_rmdir: ::std::option::Option<
        unsafe extern "C" fn(
            wrapper: *mut php_stream_wrapper,
            url: *const ::std::os::raw::c_char,
            options: ::std::os::raw::c_int,
            context: *mut php_stream_context,
        ) -> ::std::os::raw::c_int,
    >,
    pub stream_metadata: ::std::option::Option<
        unsafe extern "C" fn(
            wrapper: *mut php_stream_wrapper,
            url: *const ::std::os::raw::c_char,
            options: ::std::os::raw::c_int,
            value: *mut ::std::os::raw::c_void,
            context: *mut php_stream_context,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__php_stream_wrapper_ops() {
    const UNINIT: ::std::mem::MaybeUninit<_php_stream_wrapper_ops> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_stream_wrapper_ops>(),
        88usize,
        concat!("Size of: ", stringify!(_php_stream_wrapper_ops)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_wrapper_ops>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_wrapper_ops)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_opener) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(stream_opener),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_closer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(stream_closer),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_stat) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(stream_stat),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).url_stat) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(url_stat),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir_opener) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(dir_opener),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(label),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unlink) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(unlink),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rename) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(rename),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_mkdir) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(stream_mkdir),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_rmdir) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(stream_rmdir),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_metadata) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper_ops),
            "::",
            stringify!(stream_metadata),
        ),
    );
}
pub type php_stream_wrapper_ops = _php_stream_wrapper_ops;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_wrapper {
    pub wops: *const php_stream_wrapper_ops,
    pub abstract_: *mut ::std::os::raw::c_void,
    pub is_url: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__php_stream_wrapper() {
    const UNINIT: ::std::mem::MaybeUninit<_php_stream_wrapper> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_stream_wrapper>(),
        24usize,
        concat!("Size of: ", stringify!(_php_stream_wrapper)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_wrapper>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_wrapper)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wops) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper),
            "::",
            stringify!(wops),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abstract_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper),
            "::",
            stringify!(abstract_),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_url) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_wrapper),
            "::",
            stringify!(is_url),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _php_stream {
    pub ops: *const php_stream_ops,
    pub abstract_: *mut ::std::os::raw::c_void,
    pub readfilters: php_stream_filter_chain,
    pub writefilters: php_stream_filter_chain,
    pub wrapper: *mut php_stream_wrapper,
    pub wrapperthis: *mut ::std::os::raw::c_void,
    pub wrapperdata: zval,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub mode: [::std::os::raw::c_char; 16usize],
    pub flags: u32,
    pub res: *mut zend_resource,
    pub stdiocast: *mut FILE,
    pub orig_path: *mut ::std::os::raw::c_char,
    pub ctx: *mut zend_resource,
    pub position: zend_off_t,
    pub readbuf: *mut ::std::os::raw::c_uchar,
    pub readbuflen: usize,
    pub readpos: zend_off_t,
    pub writepos: zend_off_t,
    pub chunk_size: usize,
    pub enclosing_stream: *mut _php_stream,
}
#[test]
fn bindgen_test_layout__php_stream() {
    const UNINIT: ::std::mem::MaybeUninit<_php_stream> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_stream>(),
        208usize,
        concat!("Size of: ", stringify!(_php_stream)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ops) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_php_stream), "::", stringify!(ops)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abstract_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(abstract_),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readfilters) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(readfilters),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writefilters) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(writefilters),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrapper) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(_php_stream), "::", stringify!(wrapper)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrapperthis) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(wrapperthis),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrapperdata) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(wrapperdata),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        98usize,
        concat!("Offset of field: ", stringify!(_php_stream), "::", stringify!(mode)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        116usize,
        concat!("Offset of field: ", stringify!(_php_stream), "::", stringify!(flags)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res) as usize - ptr as usize },
        120usize,
        concat!("Offset of field: ", stringify!(_php_stream), "::", stringify!(res)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stdiocast) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(stdiocast),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orig_path) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(orig_path),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        144usize,
        concat!("Offset of field: ", stringify!(_php_stream), "::", stringify!(ctx)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        152usize,
        concat!("Offset of field: ", stringify!(_php_stream), "::", stringify!(position)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readbuf) as usize - ptr as usize },
        160usize,
        concat!("Offset of field: ", stringify!(_php_stream), "::", stringify!(readbuf)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readbuflen) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(readbuflen),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readpos) as usize - ptr as usize },
        176usize,
        concat!("Offset of field: ", stringify!(_php_stream), "::", stringify!(readpos)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writepos) as usize - ptr as usize },
        184usize,
        concat!("Offset of field: ", stringify!(_php_stream), "::", stringify!(writepos)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_size) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(chunk_size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enclosing_stream) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream),
            "::",
            stringify!(enclosing_stream),
        ),
    );
}
impl _php_stream {
    #[inline]
    pub fn is_persistent(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_is_persistent(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_free(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_in_free(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn eof(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_eof(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __exposed(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___exposed(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fclose_stdiocast(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_fclose_stdiocast(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn has_buffered_data(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_has_buffered_data(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fclose_stdiocast_flush_in_progress(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_fclose_stdiocast_flush_in_progress(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_persistent: u16,
        in_free: u16,
        eof: u16,
        __exposed: u16,
        fclose_stdiocast: u16,
        has_buffered_data: u16,
        fclose_stdiocast_flush_in_progress: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit
            .set(
                0usize,
                1u8,
                {
                    let is_persistent: u16 = unsafe {
                        ::std::mem::transmute(is_persistent)
                    };
                    is_persistent as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                1usize,
                2u8,
                {
                    let in_free: u16 = unsafe { ::std::mem::transmute(in_free) };
                    in_free as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                3usize,
                1u8,
                {
                    let eof: u16 = unsafe { ::std::mem::transmute(eof) };
                    eof as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                4usize,
                1u8,
                {
                    let __exposed: u16 = unsafe { ::std::mem::transmute(__exposed) };
                    __exposed as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                5usize,
                2u8,
                {
                    let fclose_stdiocast: u16 = unsafe {
                        ::std::mem::transmute(fclose_stdiocast)
                    };
                    fclose_stdiocast as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                7usize,
                1u8,
                {
                    let has_buffered_data: u16 = unsafe {
                        ::std::mem::transmute(has_buffered_data)
                    };
                    has_buffered_data as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                8usize,
                1u8,
                {
                    let fclose_stdiocast_flush_in_progress: u16 = unsafe {
                        ::std::mem::transmute(fclose_stdiocast_flush_in_progress)
                    };
                    fclose_stdiocast_flush_in_progress as u64
                },
            );
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn _php_stream_alloc(
        ops: *const php_stream_ops,
        abstract_: *mut ::std::os::raw::c_void,
        persistent_id: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut php_stream;
}
extern "C" {
    pub fn php_stream_encloses(
        enclosing: *mut php_stream,
        enclosed: *mut php_stream,
    ) -> *mut php_stream;
}
extern "C" {
    pub fn _php_stream_free_enclosed(
        stream_enclosed: *mut php_stream,
        close_options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_stream_from_persistent_id(
        persistent_id: *const ::std::os::raw::c_char,
        stream: *mut *mut php_stream,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_free(
        stream: *mut php_stream,
        close_options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_seek(
        stream: *mut php_stream,
        offset: zend_off_t,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_tell(stream: *mut php_stream) -> zend_off_t;
}
extern "C" {
    pub fn _php_stream_read(
        stream: *mut php_stream,
        buf: *mut ::std::os::raw::c_char,
        count: usize,
    ) -> isize;
}
extern "C" {
    pub fn php_stream_read_to_str(
        stream: *mut php_stream,
        len: usize,
    ) -> *mut zend_string;
}
extern "C" {
    pub fn _php_stream_write(
        stream: *mut php_stream,
        buf: *const ::std::os::raw::c_char,
        count: usize,
    ) -> isize;
}
extern "C" {
    pub fn _php_stream_fill_read_buffer(
        stream: *mut php_stream,
        size: usize,
    ) -> zend_result;
}
extern "C" {
    pub fn _php_stream_printf(
        stream: *mut php_stream,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _php_stream_eof(stream: *mut php_stream) -> bool;
}
extern "C" {
    pub fn _php_stream_getc(stream: *mut php_stream) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_putc(
        stream: *mut php_stream,
        c: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_flush(
        stream: *mut php_stream,
        closing: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_sync(
        stream: *mut php_stream,
        data_only: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_get_line(
        stream: *mut php_stream,
        buf: *mut ::std::os::raw::c_char,
        maxlen: usize,
        returned_len: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn php_stream_get_record(
        stream: *mut php_stream,
        maxlen: usize,
        delim: *const ::std::os::raw::c_char,
        delim_len: usize,
    ) -> *mut zend_string;
}
extern "C" {
    pub fn _php_stream_puts(
        stream: *mut php_stream,
        buf: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn _php_stream_stat(
        stream: *mut php_stream,
        ssb: *mut php_stream_statbuf,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_stat_path(
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        ssb: *mut php_stream_statbuf,
        context: *mut php_stream_context,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_mkdir(
        path: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
        context: *mut php_stream_context,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_rmdir(
        path: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
        context: *mut php_stream_context,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_opendir(
        path: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
        context: *mut php_stream_context,
    ) -> *mut php_stream;
}
extern "C" {
    pub fn _php_stream_readdir(
        dirstream: *mut php_stream,
        ent: *mut php_stream_dirent,
    ) -> *mut php_stream_dirent;
}
extern "C" {
    pub fn php_stream_dirent_alphasort(
        a: *mut *const zend_string,
        b: *mut *const zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_stream_dirent_alphasortr(
        a: *mut *const zend_string,
        b: *mut *const zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_scandir(
        dirname: *const ::std::os::raw::c_char,
        namelist: *mut *mut *mut zend_string,
        flags: ::std::os::raw::c_int,
        context: *mut php_stream_context,
        compare: ::std::option::Option<
            unsafe extern "C" fn(
                a: *mut *const zend_string,
                b: *mut *const zend_string,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_set_option(
        stream: *mut php_stream,
        option: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
        ptrparam: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_truncate_set_size(
        stream: *mut php_stream,
        newsize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_copy_to_stream(
        src: *mut php_stream,
        dest: *mut php_stream,
        maxlen: usize,
    ) -> usize;
}
extern "C" {
    pub fn _php_stream_copy_to_stream_ex(
        src: *mut php_stream,
        dest: *mut php_stream,
        maxlen: usize,
        len: *mut usize,
    ) -> zend_result;
}
extern "C" {
    pub fn _php_stream_copy_to_mem(
        src: *mut php_stream,
        maxlen: usize,
        persistent: ::std::os::raw::c_int,
    ) -> *mut zend_string;
}
extern "C" {
    pub fn _php_stream_passthru(src: *mut php_stream) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    const UNINIT: ::std::mem::MaybeUninit<iovec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec)),
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_base) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(iovec), "::", stringify!(iov_base)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_len) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(iovec), "::", stringify!(iov_len)),
    );
}
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = ::std::os::raw::c_uint;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr)),
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sockaddr), "::", stringify!(sa_family)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(sockaddr), "::", stringify!(sa_data)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_storage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage)),
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss_padding) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss_align) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align),
        ),
    );
}
pub const MSG_OOB: _bindgen_ty_19 = 1;
pub const MSG_PEEK: _bindgen_ty_19 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_19 = 4;
pub const MSG_TRYHARD: _bindgen_ty_19 = 4;
pub const MSG_CTRUNC: _bindgen_ty_19 = 8;
pub const MSG_PROXY: _bindgen_ty_19 = 16;
pub const MSG_TRUNC: _bindgen_ty_19 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_19 = 64;
pub const MSG_EOR: _bindgen_ty_19 = 128;
pub const MSG_WAITALL: _bindgen_ty_19 = 256;
pub const MSG_FIN: _bindgen_ty_19 = 512;
pub const MSG_SYN: _bindgen_ty_19 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_19 = 2048;
pub const MSG_RST: _bindgen_ty_19 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_19 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_19 = 16384;
pub const MSG_MORE: _bindgen_ty_19 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_19 = 65536;
pub const MSG_BATCH: _bindgen_ty_19 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_19 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_19 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_19 = 1073741824;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    const UNINIT: ::std::mem::MaybeUninit<msghdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr)),
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_name) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(msghdr), "::", stringify!(msg_name)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_namelen) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(msghdr), "::", stringify!(msg_namelen)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_iov) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(msghdr), "::", stringify!(msg_iov)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_iovlen) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(msghdr), "::", stringify!(msg_iovlen)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_control) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(msghdr), "::", stringify!(msg_control)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_controllen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_flags) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(msghdr), "::", stringify!(msg_flags)),
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    const UNINIT: ::std::mem::MaybeUninit<cmsghdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr)),
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_len) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(cmsghdr), "::", stringify!(cmsg_len)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_level) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(cmsghdr), "::", stringify!(cmsg_level)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_type) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(cmsghdr), "::", stringify!(cmsg_type)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cmsg_data) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(cmsghdr), "::", stringify!(__cmsg_data)),
    );
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_20 = 1;
pub const SCM_CREDENTIALS: _bindgen_ty_20 = 2;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucred {
    pub pid: pid_t,
    pub uid: uid_t,
    pub gid: gid_t,
}
#[test]
fn bindgen_test_layout_ucred() {
    const UNINIT: ::std::mem::MaybeUninit<ucred> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ucred>(),
        12usize,
        concat!("Size of: ", stringify!(ucred)),
    );
    assert_eq!(
        ::std::mem::align_of::<ucred>(),
        4usize,
        concat!("Alignment of ", stringify!(ucred)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ucred), "::", stringify!(pid)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uid) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(ucred), "::", stringify!(uid)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ucred), "::", stringify!(gid)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    const UNINIT: ::std::mem::MaybeUninit<linger> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger)),
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_onoff) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(linger), "::", stringify!(l_onoff)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_linger) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(linger), "::", stringify!(l_linger)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    const UNINIT: ::std::mem::MaybeUninit<osockaddr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr)),
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(osockaddr), "::", stringify!(sa_family)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(osockaddr), "::", stringify!(sa_data)),
    );
}
pub const SHUT_RD: _bindgen_ty_21 = 0;
pub const SHUT_WR: _bindgen_ty_21 = 1;
pub const SHUT_RDWR: _bindgen_ty_21 = 2;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __SOCKADDR_ARG {
    pub __sockaddr__: *mut sockaddr,
    pub __sockaddr_at__: *mut sockaddr_at,
    pub __sockaddr_ax25__: *mut sockaddr_ax25,
    pub __sockaddr_dl__: *mut sockaddr_dl,
    pub __sockaddr_eon__: *mut sockaddr_eon,
    pub __sockaddr_in__: *mut sockaddr_in,
    pub __sockaddr_in6__: *mut sockaddr_in6,
    pub __sockaddr_inarp__: *mut sockaddr_inarp,
    pub __sockaddr_ipx__: *mut sockaddr_ipx,
    pub __sockaddr_iso__: *mut sockaddr_iso,
    pub __sockaddr_ns__: *mut sockaddr_ns,
    pub __sockaddr_un__: *mut sockaddr_un,
    pub __sockaddr_x25__: *mut sockaddr_x25,
}
#[test]
fn bindgen_test_layout___SOCKADDR_ARG() {
    const UNINIT: ::std::mem::MaybeUninit<__SOCKADDR_ARG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__SOCKADDR_ARG>(),
        8usize,
        concat!("Size of: ", stringify!(__SOCKADDR_ARG)),
    );
    assert_eq!(
        ::std::mem::align_of::<__SOCKADDR_ARG>(),
        8usize,
        concat!("Alignment of ", stringify!(__SOCKADDR_ARG)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr__),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr_at__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_at__),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__sockaddr_ax25__) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_ax25__),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr_dl__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_dl__),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr_eon__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_eon__),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr_in__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_in__),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr_in6__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_in6__),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__sockaddr_inarp__) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_inarp__),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr_ipx__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_ipx__),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr_iso__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_iso__),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr_ns__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_ns__),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr_un__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_un__),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr_x25__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_x25__),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __CONST_SOCKADDR_ARG {
    pub __sockaddr__: *const sockaddr,
    pub __sockaddr_at__: *const sockaddr_at,
    pub __sockaddr_ax25__: *const sockaddr_ax25,
    pub __sockaddr_dl__: *const sockaddr_dl,
    pub __sockaddr_eon__: *const sockaddr_eon,
    pub __sockaddr_in__: *const sockaddr_in,
    pub __sockaddr_in6__: *const sockaddr_in6,
    pub __sockaddr_inarp__: *const sockaddr_inarp,
    pub __sockaddr_ipx__: *const sockaddr_ipx,
    pub __sockaddr_iso__: *const sockaddr_iso,
    pub __sockaddr_ns__: *const sockaddr_ns,
    pub __sockaddr_un__: *const sockaddr_un,
    pub __sockaddr_x25__: *const sockaddr_x25,
}
#[test]
fn bindgen_test_layout___CONST_SOCKADDR_ARG() {
    const UNINIT: ::std::mem::MaybeUninit<__CONST_SOCKADDR_ARG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__CONST_SOCKADDR_ARG>(),
        8usize,
        concat!("Size of: ", stringify!(__CONST_SOCKADDR_ARG)),
    );
    assert_eq!(
        ::std::mem::align_of::<__CONST_SOCKADDR_ARG>(),
        8usize,
        concat!("Alignment of ", stringify!(__CONST_SOCKADDR_ARG)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr__),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr_at__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_at__),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__sockaddr_ax25__) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_ax25__),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr_dl__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_dl__),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr_eon__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_eon__),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr_in__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_in__),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr_in6__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_in6__),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__sockaddr_inarp__) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_inarp__),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr_ipx__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_ipx__),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr_iso__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_iso__),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr_ns__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_ns__),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr_un__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_un__),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sockaddr_x25__) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__CONST_SOCKADDR_ARG),
            "::",
            stringify!(__sockaddr_x25__),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmsghdr {
    pub msg_hdr: msghdr,
    pub msg_len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_mmsghdr() {
    const UNINIT: ::std::mem::MaybeUninit<mmsghdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmsghdr>(),
        64usize,
        concat!("Size of: ", stringify!(mmsghdr)),
    );
    assert_eq!(
        ::std::mem::align_of::<mmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(mmsghdr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_hdr) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mmsghdr), "::", stringify!(msg_hdr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_len) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(mmsghdr), "::", stringify!(msg_len)),
    );
}
extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: __CONST_SOCKADDR_ARG,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: __SOCKADDR_ARG,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: __CONST_SOCKADDR_ARG,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: __SOCKADDR_ARG,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: __CONST_SOCKADDR_ARG,
        __addr_len: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: __SOCKADDR_ARG,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendmmsg(
        __fd: ::std::os::raw::c_int,
        __vmessages: *mut mmsghdr,
        __vlen: ::std::os::raw::c_uint,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recvmmsg(
        __fd: ::std::os::raw::c_int,
        __vmessages: *mut mmsghdr,
        __vlen: ::std::os::raw::c_uint,
        __flags: ::std::os::raw::c_int,
        __tmo: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(
        __fd: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: __SOCKADDR_ARG,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept4(
        __fd: ::std::os::raw::c_int,
        __addr: __SOCKADDR_ARG,
        __addr_len: *mut socklen_t,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type php_stream_transport_factory_func = ::std::option::Option<
    unsafe extern "C" fn(
        proto: *const ::std::os::raw::c_char,
        protolen: usize,
        resourcename: *const ::std::os::raw::c_char,
        resourcenamelen: usize,
        persistent_id: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        timeout: *mut timeval,
        context: *mut php_stream_context,
    ) -> *mut php_stream,
>;
pub type php_stream_transport_factory = php_stream_transport_factory_func;
extern "C" {
    pub fn php_stream_xport_register(
        protocol: *const ::std::os::raw::c_char,
        factory: php_stream_transport_factory,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_stream_xport_unregister(
        protocol: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_xport_create(
        name: *const ::std::os::raw::c_char,
        namelen: usize,
        options: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        persistent_id: *const ::std::os::raw::c_char,
        timeout: *mut timeval,
        context: *mut php_stream_context,
        error_string: *mut *mut zend_string,
        error_code: *mut ::std::os::raw::c_int,
    ) -> *mut php_stream;
}
extern "C" {
    pub fn php_stream_xport_bind(
        stream: *mut php_stream,
        name: *const ::std::os::raw::c_char,
        namelen: usize,
        error_text: *mut *mut zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_stream_xport_connect(
        stream: *mut php_stream,
        name: *const ::std::os::raw::c_char,
        namelen: usize,
        asynchronous: ::std::os::raw::c_int,
        timeout: *mut timeval,
        error_text: *mut *mut zend_string,
        error_code: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_stream_xport_listen(
        stream: *mut php_stream,
        backlog: ::std::os::raw::c_int,
        error_text: *mut *mut zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_stream_xport_accept(
        stream: *mut php_stream,
        client: *mut *mut php_stream,
        textaddr: *mut *mut zend_string,
        addr: *mut *mut ::std::os::raw::c_void,
        addrlen: *mut socklen_t,
        timeout: *mut timeval,
        error_text: *mut *mut zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_stream_xport_get_name(
        stream: *mut php_stream,
        want_peer: ::std::os::raw::c_int,
        textaddr: *mut *mut zend_string,
        addr: *mut *mut ::std::os::raw::c_void,
        addrlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
pub const php_stream_xport_send_recv_flags_STREAM_OOB: php_stream_xport_send_recv_flags = 1;
pub const php_stream_xport_send_recv_flags_STREAM_PEEK: php_stream_xport_send_recv_flags = 2;
pub type php_stream_xport_send_recv_flags = ::std::os::raw::c_uint;
extern "C" {
    pub fn php_stream_xport_recvfrom(
        stream: *mut php_stream,
        buf: *mut ::std::os::raw::c_char,
        buflen: usize,
        flags: ::std::os::raw::c_int,
        addr: *mut *mut ::std::os::raw::c_void,
        addrlen: *mut socklen_t,
        textaddr: *mut *mut zend_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_stream_xport_sendto(
        stream: *mut php_stream,
        buf: *const ::std::os::raw::c_char,
        buflen: usize,
        flags: ::std::os::raw::c_int,
        addr: *mut ::std::os::raw::c_void,
        addrlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
pub const stream_shutdown_t_STREAM_SHUT_RD: stream_shutdown_t = 0;
pub const stream_shutdown_t_STREAM_SHUT_WR: stream_shutdown_t = 1;
pub const stream_shutdown_t_STREAM_SHUT_RDWR: stream_shutdown_t = 2;
pub type stream_shutdown_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn php_stream_xport_shutdown(
        stream: *mut php_stream,
        how: stream_shutdown_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_xport_param {
    pub op: _php_stream_xport_param__bindgen_ty_1,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub inputs: _php_stream_xport_param__bindgen_ty_2,
    pub outputs: _php_stream_xport_param__bindgen_ty_3,
}
pub const _php_stream_xport_param_STREAM_XPORT_OP_BIND: _php_stream_xport_param__bindgen_ty_1 = 0;
pub const _php_stream_xport_param_STREAM_XPORT_OP_CONNECT: _php_stream_xport_param__bindgen_ty_1 = 1;
pub const _php_stream_xport_param_STREAM_XPORT_OP_LISTEN: _php_stream_xport_param__bindgen_ty_1 = 2;
pub const _php_stream_xport_param_STREAM_XPORT_OP_ACCEPT: _php_stream_xport_param__bindgen_ty_1 = 3;
pub const _php_stream_xport_param_STREAM_XPORT_OP_CONNECT_ASYNC: _php_stream_xport_param__bindgen_ty_1 = 4;
pub const _php_stream_xport_param_STREAM_XPORT_OP_GET_NAME: _php_stream_xport_param__bindgen_ty_1 = 5;
pub const _php_stream_xport_param_STREAM_XPORT_OP_GET_PEER_NAME: _php_stream_xport_param__bindgen_ty_1 = 6;
pub const _php_stream_xport_param_STREAM_XPORT_OP_RECV: _php_stream_xport_param__bindgen_ty_1 = 7;
pub const _php_stream_xport_param_STREAM_XPORT_OP_SEND: _php_stream_xport_param__bindgen_ty_1 = 8;
pub const _php_stream_xport_param_STREAM_XPORT_OP_SHUTDOWN: _php_stream_xport_param__bindgen_ty_1 = 9;
pub type _php_stream_xport_param__bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_xport_param__bindgen_ty_2 {
    pub name: *mut ::std::os::raw::c_char,
    pub namelen: usize,
    pub timeout: *mut timeval,
    pub addr: *mut sockaddr,
    pub buf: *mut ::std::os::raw::c_char,
    pub buflen: usize,
    pub addrlen: socklen_t,
    pub backlog: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__php_stream_xport_param__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<_php_stream_xport_param__bindgen_ty_2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_stream_xport_param__bindgen_ty_2>(),
        64usize,
        concat!("Size of: ", stringify!(_php_stream_xport_param__bindgen_ty_2)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_xport_param__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_xport_param__bindgen_ty_2)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_2),
            "::",
            stringify!(name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).namelen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_2),
            "::",
            stringify!(namelen),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_2),
            "::",
            stringify!(timeout),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_2),
            "::",
            stringify!(addr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_2),
            "::",
            stringify!(buf),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buflen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_2),
            "::",
            stringify!(buflen),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrlen) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_2),
            "::",
            stringify!(addrlen),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backlog) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_2),
            "::",
            stringify!(backlog),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_2),
            "::",
            stringify!(flags),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_xport_param__bindgen_ty_3 {
    pub client: *mut php_stream,
    pub addr: *mut sockaddr,
    pub addrlen: socklen_t,
    pub textaddr: *mut zend_string,
    pub error_text: *mut zend_string,
    pub returncode: ::std::os::raw::c_int,
    pub error_code: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__php_stream_xport_param__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<_php_stream_xport_param__bindgen_ty_3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_stream_xport_param__bindgen_ty_3>(),
        48usize,
        concat!("Size of: ", stringify!(_php_stream_xport_param__bindgen_ty_3)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_xport_param__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_xport_param__bindgen_ty_3)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).client) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_3),
            "::",
            stringify!(client),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_3),
            "::",
            stringify!(addr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrlen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_3),
            "::",
            stringify!(addrlen),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).textaddr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_3),
            "::",
            stringify!(textaddr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_text) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_3),
            "::",
            stringify!(error_text),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).returncode) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_3),
            "::",
            stringify!(returncode),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_code) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param__bindgen_ty_3),
            "::",
            stringify!(error_code),
        ),
    );
}
#[test]
fn bindgen_test_layout__php_stream_xport_param() {
    const UNINIT: ::std::mem::MaybeUninit<_php_stream_xport_param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_stream_xport_param>(),
        120usize,
        concat!("Size of: ", stringify!(_php_stream_xport_param)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_xport_param>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_xport_param)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param),
            "::",
            stringify!(op),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param),
            "::",
            stringify!(inputs),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outputs) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_param),
            "::",
            stringify!(outputs),
        ),
    );
}
impl _php_stream_xport_param {
    #[inline]
    pub fn want_addr(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_want_addr(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn want_textaddr(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_want_textaddr(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn want_errortext(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_want_errortext(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn how(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_how(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        want_addr: ::std::os::raw::c_uint,
        want_textaddr: ::std::os::raw::c_uint,
        want_errortext: ::std::os::raw::c_uint,
        how: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit
            .set(
                0usize,
                1u8,
                {
                    let want_addr: u32 = unsafe { ::std::mem::transmute(want_addr) };
                    want_addr as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                1usize,
                1u8,
                {
                    let want_textaddr: u32 = unsafe {
                        ::std::mem::transmute(want_textaddr)
                    };
                    want_textaddr as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                2usize,
                1u8,
                {
                    let want_errortext: u32 = unsafe {
                        ::std::mem::transmute(want_errortext)
                    };
                    want_errortext as u64
                },
            );
        __bindgen_bitfield_unit
            .set(
                3usize,
                2u8,
                {
                    let how: u32 = unsafe { ::std::mem::transmute(how) };
                    how as u64
                },
            );
        __bindgen_bitfield_unit
    }
}
pub type php_stream_xport_param = _php_stream_xport_param;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_SSLv2_CLIENT: php_stream_xport_crypt_method_t = 3;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_SSLv3_CLIENT: php_stream_xport_crypt_method_t = 5;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_SSLv23_CLIENT: php_stream_xport_crypt_method_t = 57;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLSv1_0_CLIENT: php_stream_xport_crypt_method_t = 9;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT: php_stream_xport_crypt_method_t = 17;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT: php_stream_xport_crypt_method_t = 33;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLSv1_3_CLIENT: php_stream_xport_crypt_method_t = 65;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLS_CLIENT: php_stream_xport_crypt_method_t = 121;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLS_ANY_CLIENT: php_stream_xport_crypt_method_t = 121;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_ANY_CLIENT: php_stream_xport_crypt_method_t = 127;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_SSLv2_SERVER: php_stream_xport_crypt_method_t = 2;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_SSLv3_SERVER: php_stream_xport_crypt_method_t = 4;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_SSLv23_SERVER: php_stream_xport_crypt_method_t = 120;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLSv1_0_SERVER: php_stream_xport_crypt_method_t = 8;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLSv1_1_SERVER: php_stream_xport_crypt_method_t = 16;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLSv1_2_SERVER: php_stream_xport_crypt_method_t = 32;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLSv1_3_SERVER: php_stream_xport_crypt_method_t = 64;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLS_SERVER: php_stream_xport_crypt_method_t = 120;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_TLS_ANY_SERVER: php_stream_xport_crypt_method_t = 120;
pub const php_stream_xport_crypt_method_t_STREAM_CRYPTO_METHOD_ANY_SERVER: php_stream_xport_crypt_method_t = 126;
pub type php_stream_xport_crypt_method_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn php_stream_xport_crypto_setup(
        stream: *mut php_stream,
        crypto_method: php_stream_xport_crypt_method_t,
        session_stream: *mut php_stream,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_stream_xport_crypto_enable(
        stream: *mut php_stream,
        activate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_xport_crypto_param {
    pub inputs: _php_stream_xport_crypto_param__bindgen_ty_1,
    pub outputs: _php_stream_xport_crypto_param__bindgen_ty_2,
    pub op: _php_stream_xport_crypto_param__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_xport_crypto_param__bindgen_ty_1 {
    pub session: *mut php_stream,
    pub activate: ::std::os::raw::c_int,
    pub method: php_stream_xport_crypt_method_t,
}
#[test]
fn bindgen_test_layout__php_stream_xport_crypto_param__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        _php_stream_xport_crypto_param__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_stream_xport_crypto_param__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(_php_stream_xport_crypto_param__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_xport_crypto_param__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_php_stream_xport_crypto_param__bindgen_ty_1),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_crypto_param__bindgen_ty_1),
            "::",
            stringify!(session),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).activate) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_crypto_param__bindgen_ty_1),
            "::",
            stringify!(activate),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_crypto_param__bindgen_ty_1),
            "::",
            stringify!(method),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_stream_xport_crypto_param__bindgen_ty_2 {
    pub returncode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__php_stream_xport_crypto_param__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        _php_stream_xport_crypto_param__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_stream_xport_crypto_param__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(_php_stream_xport_crypto_param__bindgen_ty_2)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_xport_crypto_param__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_php_stream_xport_crypto_param__bindgen_ty_2),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).returncode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_crypto_param__bindgen_ty_2),
            "::",
            stringify!(returncode),
        ),
    );
}
pub const _php_stream_xport_crypto_param_STREAM_XPORT_CRYPTO_OP_SETUP: _php_stream_xport_crypto_param__bindgen_ty_3 = 0;
pub const _php_stream_xport_crypto_param_STREAM_XPORT_CRYPTO_OP_ENABLE: _php_stream_xport_crypto_param__bindgen_ty_3 = 1;
pub type _php_stream_xport_crypto_param__bindgen_ty_3 = ::std::os::raw::c_uint;
#[test]
fn bindgen_test_layout__php_stream_xport_crypto_param() {
    const UNINIT: ::std::mem::MaybeUninit<_php_stream_xport_crypto_param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_stream_xport_crypto_param>(),
        24usize,
        concat!("Size of: ", stringify!(_php_stream_xport_crypto_param)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_stream_xport_crypto_param>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_stream_xport_crypto_param)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_crypto_param),
            "::",
            stringify!(inputs),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outputs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_crypto_param),
            "::",
            stringify!(outputs),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_stream_xport_crypto_param),
            "::",
            stringify!(op),
        ),
    );
}
pub type php_stream_xport_crypto_param = _php_stream_xport_crypto_param;
extern "C" {
    pub fn php_stream_xport_get_hash() -> *mut HashTable;
}
extern "C" {
    pub fn php_stream_generic_socket_factory(
        proto: *const ::std::os::raw::c_char,
        protolen: usize,
        resourcename: *const ::std::os::raw::c_char,
        resourcenamelen: usize,
        persistent_id: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        timeout: *mut timeval,
        context: *mut php_stream_context,
    ) -> *mut php_stream;
}
extern "C" {
    pub static mut php_stream_stdio_ops: php_stream_ops;
}
extern "C" {
    pub static mut php_plain_files_wrapper: php_stream_wrapper;
}
extern "C" {
    pub fn _php_stream_fopen(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
        opened_path: *mut *mut zend_string,
        options: ::std::os::raw::c_int,
    ) -> *mut php_stream;
}
extern "C" {
    pub fn _php_stream_fopen_with_path(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        opened_path: *mut *mut zend_string,
        options: ::std::os::raw::c_int,
    ) -> *mut php_stream;
}
extern "C" {
    pub fn _php_stream_fopen_from_file(
        file: *mut FILE,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut php_stream;
}
extern "C" {
    pub fn _php_stream_fopen_from_fd(
        fd: ::std::os::raw::c_int,
        mode: *const ::std::os::raw::c_char,
        persistent_id: *const ::std::os::raw::c_char,
        zero_position: bool,
    ) -> *mut php_stream;
}
extern "C" {
    pub fn _php_stream_fopen_from_pipe(
        file: *mut FILE,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut php_stream;
}
extern "C" {
    pub fn _php_stream_fopen_tmpfile(dummy: ::std::os::raw::c_int) -> *mut php_stream;
}
extern "C" {
    pub fn _php_stream_fopen_temporary_file(
        dir: *const ::std::os::raw::c_char,
        pfx: *const ::std::os::raw::c_char,
        opened_path: *mut *mut zend_string,
    ) -> *mut php_stream;
}
extern "C" {
    pub fn _php_stream_open_wrapper_as_file(
        path: *mut ::std::os::raw::c_char,
        mode: *mut ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
        opened_path: *mut *mut zend_string,
    ) -> *mut FILE;
}
extern "C" {
    pub fn php_stream_parse_fopen_modes(
        mode: *const ::std::os::raw::c_char,
        open_flags: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static php_glob_stream_wrapper: php_stream_wrapper;
}
extern "C" {
    pub static php_glob_stream_ops: php_stream_ops;
}
extern "C" {
    pub fn _php_glob_stream_get_path(
        stream: *mut php_stream,
        plen: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _php_glob_stream_get_pattern(
        stream: *mut php_stream,
        plen: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _php_glob_stream_get_count(
        stream: *mut php_stream,
        pflags: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static php_stream_userspace_ops: php_stream_ops;
}
extern "C" {
    pub static php_stream_userspace_dir_ops: php_stream_ops;
}
pub const php_stream_mmap_operation_t_PHP_STREAM_MMAP_SUPPORTED: php_stream_mmap_operation_t = 0;
pub const php_stream_mmap_operation_t_PHP_STREAM_MMAP_MAP_RANGE: php_stream_mmap_operation_t = 1;
pub const php_stream_mmap_operation_t_PHP_STREAM_MMAP_UNMAP: php_stream_mmap_operation_t = 2;
pub type php_stream_mmap_operation_t = ::std::os::raw::c_uint;
pub const php_stream_mmap_access_t_PHP_STREAM_MAP_MODE_READONLY: php_stream_mmap_access_t = 0;
pub const php_stream_mmap_access_t_PHP_STREAM_MAP_MODE_READWRITE: php_stream_mmap_access_t = 1;
pub const php_stream_mmap_access_t_PHP_STREAM_MAP_MODE_SHARED_READONLY: php_stream_mmap_access_t = 2;
pub const php_stream_mmap_access_t_PHP_STREAM_MAP_MODE_SHARED_READWRITE: php_stream_mmap_access_t = 3;
pub type php_stream_mmap_access_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct php_stream_mmap_range {
    pub offset: usize,
    pub length: usize,
    pub mode: php_stream_mmap_access_t,
    pub mapped: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_php_stream_mmap_range() {
    const UNINIT: ::std::mem::MaybeUninit<php_stream_mmap_range> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<php_stream_mmap_range>(),
        32usize,
        concat!("Size of: ", stringify!(php_stream_mmap_range)),
    );
    assert_eq!(
        ::std::mem::align_of::<php_stream_mmap_range>(),
        8usize,
        concat!("Alignment of ", stringify!(php_stream_mmap_range)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(php_stream_mmap_range),
            "::",
            stringify!(offset),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(php_stream_mmap_range),
            "::",
            stringify!(length),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(php_stream_mmap_range),
            "::",
            stringify!(mode),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapped) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(php_stream_mmap_range),
            "::",
            stringify!(mapped),
        ),
    );
}
extern "C" {
    pub fn _php_stream_mmap_range(
        stream: *mut php_stream,
        offset: usize,
        length: usize,
        mode: php_stream_mmap_access_t,
        mapped_len: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _php_stream_mmap_unmap(stream: *mut php_stream) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_mmap_unmap_ex(
        stream: *mut php_stream,
        readden: zend_off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_cast(
        stream: *mut php_stream,
        castas: ::std::os::raw::c_int,
        ret: *mut *mut ::std::os::raw::c_void,
        show_err: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_init_stream_wrappers(
        module_number: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_shutdown_stream_wrappers(module_number: ::std::os::raw::c_int);
}
extern "C" {
    pub fn php_shutdown_stream_hashes();
}
extern "C" {
    pub fn zm_deactivate_streams(
        type_: ::std::os::raw::c_int,
        module_number: ::std::os::raw::c_int,
    ) -> zend_result;
}
extern "C" {
    pub fn php_register_url_stream_wrapper(
        protocol: *const ::std::os::raw::c_char,
        wrapper: *const php_stream_wrapper,
    ) -> zend_result;
}
extern "C" {
    pub fn php_unregister_url_stream_wrapper(
        protocol: *const ::std::os::raw::c_char,
    ) -> zend_result;
}
extern "C" {
    pub fn php_register_url_stream_wrapper_volatile(
        protocol: *mut zend_string,
        wrapper: *mut php_stream_wrapper,
    ) -> zend_result;
}
extern "C" {
    pub fn php_unregister_url_stream_wrapper_volatile(
        protocol: *mut zend_string,
    ) -> zend_result;
}
extern "C" {
    pub fn _php_stream_open_wrapper_ex(
        path: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
        opened_path: *mut *mut zend_string,
        context: *mut php_stream_context,
    ) -> *mut php_stream;
}
extern "C" {
    pub fn php_stream_locate_url_wrapper(
        path: *const ::std::os::raw::c_char,
        path_for_open: *mut *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
    ) -> *mut php_stream_wrapper;
}
extern "C" {
    pub fn php_stream_locate_eol(
        stream: *mut php_stream,
        buf: *mut zend_string,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn php_stream_wrapper_log_error(
        wrapper: *const php_stream_wrapper,
        options: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn _php_stream_make_seekable(
        origstream: *mut php_stream,
        newstream: *mut *mut php_stream,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_get_url_stream_wrappers_hash() -> *mut HashTable;
}
extern "C" {
    pub fn php_stream_get_url_stream_wrappers_hash_global() -> *mut HashTable;
}
extern "C" {
    pub fn _php_get_stream_filters_hash() -> *mut HashTable;
}
extern "C" {
    pub fn php_get_stream_filters_hash_global() -> *mut HashTable;
}
extern "C" {
    pub static mut php_stream_user_wrapper_ops: *const php_stream_wrapper_ops;
}
extern "C" {
    pub fn _php_stream_memory_create(mode: ::std::os::raw::c_int) -> *mut php_stream;
}
extern "C" {
    pub fn _php_stream_memory_open(
        mode: ::std::os::raw::c_int,
        buf: *mut zend_string,
    ) -> *mut php_stream;
}
extern "C" {
    pub fn _php_stream_memory_get_buffer(stream: *mut php_stream) -> *mut zend_string;
}
extern "C" {
    pub fn _php_stream_temp_create(
        mode: ::std::os::raw::c_int,
        max_memory_usage: usize,
    ) -> *mut php_stream;
}
extern "C" {
    pub fn _php_stream_temp_create_ex(
        mode: ::std::os::raw::c_int,
        max_memory_usage: usize,
        tmpdir: *const ::std::os::raw::c_char,
    ) -> *mut php_stream;
}
extern "C" {
    pub fn _php_stream_temp_open(
        mode: ::std::os::raw::c_int,
        max_memory_usage: usize,
        buf: *const ::std::os::raw::c_char,
        length: usize,
    ) -> *mut php_stream;
}
extern "C" {
    pub fn php_stream_mode_from_str(
        mode: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _php_stream_mode_to_str(
        mode: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub static php_stream_memory_ops: php_stream_ops;
}
extern "C" {
    pub static php_stream_temp_ops: php_stream_ops;
}
extern "C" {
    pub static php_stream_rfc2397_ops: php_stream_ops;
}
extern "C" {
    pub static php_stream_rfc2397_wrapper: php_stream_wrapper;
}
pub type php_core_globals = _php_core_globals;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _php_core_globals {
    pub output_buffering: zend_long,
    pub implicit_flush: bool,
    pub enable_dl: bool,
    pub display_errors: u8,
    pub display_startup_errors: bool,
    pub log_errors: bool,
    pub ignore_repeated_errors: bool,
    pub ignore_repeated_source: bool,
    pub report_memleaks: bool,
    pub output_handler: *mut ::std::os::raw::c_char,
    pub unserialize_callback_func: *mut ::std::os::raw::c_char,
    pub serialize_precision: zend_long,
    pub memory_limit: zend_long,
    pub max_input_time: zend_long,
    pub error_log: *mut ::std::os::raw::c_char,
    pub doc_root: *mut ::std::os::raw::c_char,
    pub user_dir: *mut ::std::os::raw::c_char,
    pub include_path: *mut ::std::os::raw::c_char,
    pub open_basedir: *mut ::std::os::raw::c_char,
    pub open_basedir_modified: bool,
    pub extension_dir: *mut ::std::os::raw::c_char,
    pub php_binary: *mut ::std::os::raw::c_char,
    pub sys_temp_dir: *mut ::std::os::raw::c_char,
    pub upload_tmp_dir: *mut ::std::os::raw::c_char,
    pub upload_max_filesize: zend_long,
    pub error_append_string: *mut ::std::os::raw::c_char,
    pub error_prepend_string: *mut ::std::os::raw::c_char,
    pub auto_prepend_file: *mut ::std::os::raw::c_char,
    pub auto_append_file: *mut ::std::os::raw::c_char,
    pub input_encoding: *mut ::std::os::raw::c_char,
    pub internal_encoding: *mut ::std::os::raw::c_char,
    pub output_encoding: *mut ::std::os::raw::c_char,
    pub arg_separator: arg_separators,
    pub variables_order: *mut ::std::os::raw::c_char,
    pub rfc1867_protected_variables: HashTable,
    pub connection_status: ::std::os::raw::c_short,
    pub ignore_user_abort: bool,
    pub header_is_being_sent: ::std::os::raw::c_uchar,
    pub tick_functions: zend_llist,
    pub http_globals: [zval; 6usize],
    pub expose_php: bool,
    pub register_argc_argv: bool,
    pub auto_globals_jit: bool,
    pub html_errors: bool,
    pub xmlrpc_errors: bool,
    pub docref_root: *mut ::std::os::raw::c_char,
    pub docref_ext: *mut ::std::os::raw::c_char,
    pub xmlrpc_error_number: zend_long,
    pub activated_auto_globals: [bool; 8usize],
    pub modules_activated: bool,
    pub file_uploads: bool,
    pub during_request_startup: bool,
    pub allow_url_fopen: bool,
    pub enable_post_data_reading: bool,
    pub report_zend_debug: bool,
    pub last_error_type: ::std::os::raw::c_int,
    pub last_error_lineno: ::std::os::raw::c_int,
    pub last_error_message: *mut zend_string,
    pub last_error_file: *mut zend_string,
    pub php_sys_temp_dir: *mut ::std::os::raw::c_char,
    pub disable_classes: *mut ::std::os::raw::c_char,
    pub max_input_nesting_level: zend_long,
    pub max_input_vars: zend_long,
    pub user_ini_filename: *mut ::std::os::raw::c_char,
    pub user_ini_cache_ttl: zend_long,
    pub request_order: *mut ::std::os::raw::c_char,
    pub mail_log: *mut ::std::os::raw::c_char,
    pub mail_x_header: bool,
    pub mail_mixed_lf_and_crlf: bool,
    pub in_error_log: bool,
    pub allow_url_include: bool,
    pub in_user_include: bool,
    pub have_called_openlog: bool,
    pub syslog_facility: zend_long,
    pub syslog_ident: *mut ::std::os::raw::c_char,
    pub syslog_filter: zend_long,
    pub error_log_mode: zend_long,
}
#[test]
fn bindgen_test_layout__php_core_globals() {
    const UNINIT: ::std::mem::MaybeUninit<_php_core_globals> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_php_core_globals>(),
        616usize,
        concat!("Size of: ", stringify!(_php_core_globals)),
    );
    assert_eq!(
        ::std::mem::align_of::<_php_core_globals>(),
        8usize,
        concat!("Alignment of ", stringify!(_php_core_globals)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_buffering) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(output_buffering),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).implicit_flush) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(implicit_flush),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_dl) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(enable_dl),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_errors) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(display_errors),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).display_startup_errors) as usize - ptr as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(display_startup_errors),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_errors) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(log_errors),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ignore_repeated_errors) as usize - ptr as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(ignore_repeated_errors),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ignore_repeated_source) as usize - ptr as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(ignore_repeated_source),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).report_memleaks) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(report_memleaks),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_handler) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(output_handler),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).unserialize_callback_func) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(unserialize_callback_func),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).serialize_precision) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(serialize_precision),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory_limit) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(memory_limit),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_input_time) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(max_input_time),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_log) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(error_log),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).doc_root) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(doc_root),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_dir) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(user_dir),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).include_path) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(include_path),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open_basedir) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(open_basedir),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).open_basedir_modified) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(open_basedir_modified),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extension_dir) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(extension_dir),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).php_binary) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(php_binary),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sys_temp_dir) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(sys_temp_dir),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upload_tmp_dir) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(upload_tmp_dir),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).upload_max_filesize) as usize - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(upload_max_filesize),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).error_append_string) as usize - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(error_append_string),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).error_prepend_string) as usize - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(error_prepend_string),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).auto_prepend_file) as usize - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(auto_prepend_file),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auto_append_file) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(auto_append_file),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_encoding) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(input_encoding),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).internal_encoding) as usize - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(internal_encoding),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_encoding) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(output_encoding),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_separator) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(arg_separator),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variables_order) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(variables_order),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rfc1867_protected_variables) as usize
                - ptr as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(rfc1867_protected_variables),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).connection_status) as usize - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(connection_status),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ignore_user_abort) as usize - ptr as usize
        },
        282usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(ignore_user_abort),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).header_is_being_sent) as usize - ptr as usize
        },
        283usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(header_is_being_sent),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tick_functions) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(tick_functions),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).http_globals) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(http_globals),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expose_php) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(expose_php),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).register_argc_argv) as usize - ptr as usize
        },
        441usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(register_argc_argv),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auto_globals_jit) as usize - ptr as usize },
        442usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(auto_globals_jit),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).html_errors) as usize - ptr as usize },
        443usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(html_errors),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xmlrpc_errors) as usize - ptr as usize },
        444usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(xmlrpc_errors),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).docref_root) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(docref_root),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).docref_ext) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(docref_ext),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).xmlrpc_error_number) as usize - ptr as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(xmlrpc_error_number),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).activated_auto_globals) as usize - ptr as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(activated_auto_globals),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).modules_activated) as usize - ptr as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(modules_activated),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_uploads) as usize - ptr as usize },
        481usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(file_uploads),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).during_request_startup) as usize - ptr as usize
        },
        482usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(during_request_startup),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allow_url_fopen) as usize - ptr as usize },
        483usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(allow_url_fopen),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).enable_post_data_reading) as usize - ptr as usize
        },
        484usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(enable_post_data_reading),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).report_zend_debug) as usize - ptr as usize
        },
        485usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(report_zend_debug),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_error_type) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(last_error_type),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).last_error_lineno) as usize - ptr as usize
        },
        492usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(last_error_lineno),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).last_error_message) as usize - ptr as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(last_error_message),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_error_file) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(last_error_file),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).php_sys_temp_dir) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(php_sys_temp_dir),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disable_classes) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(disable_classes),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_input_nesting_level) as usize - ptr as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(max_input_nesting_level),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_input_vars) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(max_input_vars),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_ini_filename) as usize - ptr as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(user_ini_filename),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).user_ini_cache_ttl) as usize - ptr as usize
        },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(user_ini_cache_ttl),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_order) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(request_order),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mail_log) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(mail_log),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mail_x_header) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(mail_x_header),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mail_mixed_lf_and_crlf) as usize - ptr as usize
        },
        577usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(mail_mixed_lf_and_crlf),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_error_log) as usize - ptr as usize },
        578usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(in_error_log),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).allow_url_include) as usize - ptr as usize
        },
        579usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(allow_url_include),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_user_include) as usize - ptr as usize },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(in_user_include),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).have_called_openlog) as usize - ptr as usize
        },
        581usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(have_called_openlog),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).syslog_facility) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(syslog_facility),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).syslog_ident) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(syslog_ident),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).syslog_filter) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(syslog_filter),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_log_mode) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(_php_core_globals),
            "::",
            stringify!(error_log_mode),
        ),
    );
}
extern "C" {
    pub static mut core_globals: _php_core_globals;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _php_tick_function_entry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arg_separators {
    pub output: *mut ::std::os::raw::c_char,
    pub input: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__arg_separators() {
    const UNINIT: ::std::mem::MaybeUninit<_arg_separators> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_arg_separators>(),
        16usize,
        concat!("Size of: ", stringify!(_arg_separators)),
    );
    assert_eq!(
        ::std::mem::align_of::<_arg_separators>(),
        8usize,
        concat!("Alignment of ", stringify!(_arg_separators)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_arg_separators),
            "::",
            stringify!(output),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_arg_separators),
            "::",
            stringify!(input),
        ),
    );
}
pub type arg_separators = _arg_separators;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_ini_entry_def {
    pub name: *const ::std::os::raw::c_char,
    pub on_modify: ::std::option::Option<
        unsafe extern "C" fn(
            entry: *mut zend_ini_entry,
            new_value: *mut zend_string,
            mh_arg1: *mut ::std::os::raw::c_void,
            mh_arg2: *mut ::std::os::raw::c_void,
            mh_arg3: *mut ::std::os::raw::c_void,
            stage: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub mh_arg1: *mut ::std::os::raw::c_void,
    pub mh_arg2: *mut ::std::os::raw::c_void,
    pub mh_arg3: *mut ::std::os::raw::c_void,
    pub value: *const ::std::os::raw::c_char,
    pub displayer: ::std::option::Option<
        unsafe extern "C" fn(
            ini_entry: *mut zend_ini_entry,
            type_: ::std::os::raw::c_int,
        ),
    >,
    pub value_length: u32,
    pub name_length: u16,
    pub modifiable: u8,
}
#[test]
fn bindgen_test_layout__zend_ini_entry_def() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_ini_entry_def> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_ini_entry_def>(),
        64usize,
        concat!("Size of: ", stringify!(_zend_ini_entry_def)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ini_entry_def>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ini_entry_def)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry_def),
            "::",
            stringify!(name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).on_modify) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry_def),
            "::",
            stringify!(on_modify),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mh_arg1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry_def),
            "::",
            stringify!(mh_arg1),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mh_arg2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry_def),
            "::",
            stringify!(mh_arg2),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mh_arg3) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry_def),
            "::",
            stringify!(mh_arg3),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry_def),
            "::",
            stringify!(value),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayer) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry_def),
            "::",
            stringify!(displayer),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_length) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry_def),
            "::",
            stringify!(value_length),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_length) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry_def),
            "::",
            stringify!(name_length),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modifiable) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry_def),
            "::",
            stringify!(modifiable),
        ),
    );
}
pub type zend_ini_entry_def = _zend_ini_entry_def;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_ini_entry {
    pub name: *mut zend_string,
    pub on_modify: ::std::option::Option<
        unsafe extern "C" fn(
            entry: *mut zend_ini_entry,
            new_value: *mut zend_string,
            mh_arg1: *mut ::std::os::raw::c_void,
            mh_arg2: *mut ::std::os::raw::c_void,
            mh_arg3: *mut ::std::os::raw::c_void,
            stage: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub mh_arg1: *mut ::std::os::raw::c_void,
    pub mh_arg2: *mut ::std::os::raw::c_void,
    pub mh_arg3: *mut ::std::os::raw::c_void,
    pub value: *mut zend_string,
    pub orig_value: *mut zend_string,
    pub displayer: ::std::option::Option<
        unsafe extern "C" fn(
            ini_entry: *mut zend_ini_entry,
            type_: ::std::os::raw::c_int,
        ),
    >,
    pub module_number: ::std::os::raw::c_int,
    pub modifiable: u8,
    pub orig_modifiable: u8,
    pub modified: u8,
}
#[test]
fn bindgen_test_layout__zend_ini_entry() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_ini_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_ini_entry>(),
        72usize,
        concat!("Size of: ", stringify!(_zend_ini_entry)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ini_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ini_entry)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_ini_entry), "::", stringify!(name)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).on_modify) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(on_modify),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mh_arg1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(mh_arg1),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mh_arg2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(mh_arg2),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mh_arg3) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(mh_arg3),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(value),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orig_value) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(orig_value),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayer) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(displayer),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_number) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(module_number),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modifiable) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(modifiable),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orig_modifiable) as usize - ptr as usize },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(orig_modifiable),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modified) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(modified),
        ),
    );
}
extern "C" {
    pub fn zend_ini_startup();
}
extern "C" {
    pub fn zend_ini_shutdown();
}
extern "C" {
    pub fn zend_ini_global_shutdown();
}
extern "C" {
    pub fn zend_ini_deactivate();
}
extern "C" {
    pub fn zend_ini_dtor(ini_directives: *mut HashTable);
}
extern "C" {
    pub fn zend_copy_ini_directives();
}
extern "C" {
    pub fn zend_ini_sort_entries();
}
extern "C" {
    pub fn zend_register_ini_entries(
        ini_entry: *const zend_ini_entry_def,
        module_number: ::std::os::raw::c_int,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_register_ini_entries_ex(
        ini_entry: *const zend_ini_entry_def,
        module_number: ::std::os::raw::c_int,
        module_type: ::std::os::raw::c_int,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_unregister_ini_entries(module_number: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zend_unregister_ini_entries_ex(
        module_number: ::std::os::raw::c_int,
        module_type: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zend_ini_refresh_caches(stage: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zend_alter_ini_entry(
        name: *mut zend_string,
        new_value: *mut zend_string,
        modify_type: ::std::os::raw::c_int,
        stage: ::std::os::raw::c_int,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_alter_ini_entry_ex(
        name: *mut zend_string,
        new_value: *mut zend_string,
        modify_type: ::std::os::raw::c_int,
        stage: ::std::os::raw::c_int,
        force_change: bool,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_alter_ini_entry_chars(
        name: *mut zend_string,
        value: *const ::std::os::raw::c_char,
        value_length: usize,
        modify_type: ::std::os::raw::c_int,
        stage: ::std::os::raw::c_int,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_alter_ini_entry_chars_ex(
        name: *mut zend_string,
        value: *const ::std::os::raw::c_char,
        value_length: usize,
        modify_type: ::std::os::raw::c_int,
        stage: ::std::os::raw::c_int,
        force_change: ::std::os::raw::c_int,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_restore_ini_entry(
        name: *mut zend_string,
        stage: ::std::os::raw::c_int,
    ) -> zend_result;
}
extern "C" {
    pub fn display_ini_entries(module: *mut zend_module_entry);
}
extern "C" {
    pub fn zend_ini_long(
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        orig: ::std::os::raw::c_int,
    ) -> zend_long;
}
extern "C" {
    pub fn zend_ini_double(
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        orig: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn zend_ini_string(
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        orig: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_ini_string_ex(
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        orig: ::std::os::raw::c_int,
        exists: *mut bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zend_ini_str(
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        orig: bool,
    ) -> *mut zend_string;
}
extern "C" {
    pub fn zend_ini_str_ex(
        name: *const ::std::os::raw::c_char,
        name_length: usize,
        orig: bool,
        exists: *mut bool,
    ) -> *mut zend_string;
}
extern "C" {
    pub fn zend_ini_get_value(name: *mut zend_string) -> *mut zend_string;
}
extern "C" {
    pub fn zend_ini_parse_bool(str_: *mut zend_string) -> bool;
}
extern "C" {
    /** Parses an ini quantity

 The value parameter must be a string in the form

     sign? digits ws* multiplier?

 with

     sign: [+-]
     digit: [0-9]
     digits: digit+
     ws: [ \t\n\r\v\f]
     multiplier: [KMG]

 Leading and trailing whitespaces are ignored.

 If the string is empty or consists only of only whitespaces, 0 is returned.

 Digits is parsed as decimal unless the first digit is '0', in which case
 digits is parsed as octal.

 The multiplier is case-insensitive. K, M, and G multiply the quantity by
 2**10, 2**20, and 2**30, respectively.

 For backwards compatibility, ill-formatted values are handled as follows:
 - No leading digits: value is treated as '0'
 - Invalid multiplier: multiplier is ignored
 - Invalid characters between digits and multiplier: invalid characters are
   ignored
 - Integer overflow: The result of the overflow is returned

 In any of these cases an error string is stored in *errstr (caller must
 release it), otherwise *errstr is set to NULL.*/
    pub fn zend_ini_parse_quantity(
        value: *mut zend_string,
        errstr: *mut *mut zend_string,
    ) -> zend_long;
}
extern "C" {
    /// Unsigned variant of zend_ini_parse_quantity
    pub fn zend_ini_parse_uquantity(
        value: *mut zend_string,
        errstr: *mut *mut zend_string,
    ) -> zend_ulong;
}
extern "C" {
    pub fn zend_ini_parse_quantity_warn(
        value: *mut zend_string,
        setting: *mut zend_string,
    ) -> zend_long;
}
extern "C" {
    pub fn zend_ini_parse_uquantity_warn(
        value: *mut zend_string,
        setting: *mut zend_string,
    ) -> zend_ulong;
}
extern "C" {
    pub fn zend_ini_register_displayer(
        name: *const ::std::os::raw::c_char,
        name_length: u32,
        displayer: ::std::option::Option<
            unsafe extern "C" fn(
                ini_entry: *mut zend_ini_entry,
                type_: ::std::os::raw::c_int,
            ),
        >,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_ini_boolean_displayer_cb(
        ini_entry: *mut zend_ini_entry,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zend_ini_color_displayer_cb(
        ini_entry: *mut zend_ini_entry,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn display_link_numbers(
        ini_entry: *mut zend_ini_entry,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OnUpdateBool(
        entry: *mut zend_ini_entry,
        new_value: *mut zend_string,
        mh_arg1: *mut ::std::os::raw::c_void,
        mh_arg2: *mut ::std::os::raw::c_void,
        mh_arg3: *mut ::std::os::raw::c_void,
        stage: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OnUpdateLong(
        entry: *mut zend_ini_entry,
        new_value: *mut zend_string,
        mh_arg1: *mut ::std::os::raw::c_void,
        mh_arg2: *mut ::std::os::raw::c_void,
        mh_arg3: *mut ::std::os::raw::c_void,
        stage: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OnUpdateLongGEZero(
        entry: *mut zend_ini_entry,
        new_value: *mut zend_string,
        mh_arg1: *mut ::std::os::raw::c_void,
        mh_arg2: *mut ::std::os::raw::c_void,
        mh_arg3: *mut ::std::os::raw::c_void,
        stage: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OnUpdateReal(
        entry: *mut zend_ini_entry,
        new_value: *mut zend_string,
        mh_arg1: *mut ::std::os::raw::c_void,
        mh_arg2: *mut ::std::os::raw::c_void,
        mh_arg3: *mut ::std::os::raw::c_void,
        stage: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OnUpdateString(
        entry: *mut zend_ini_entry,
        new_value: *mut zend_string,
        mh_arg1: *mut ::std::os::raw::c_void,
        mh_arg2: *mut ::std::os::raw::c_void,
        mh_arg3: *mut ::std::os::raw::c_void,
        stage: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OnUpdateStringUnempty(
        entry: *mut zend_ini_entry,
        new_value: *mut zend_string,
        mh_arg1: *mut ::std::os::raw::c_void,
        mh_arg2: *mut ::std::os::raw::c_void,
        mh_arg3: *mut ::std::os::raw::c_void,
        stage: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OnUpdateStr(
        entry: *mut zend_ini_entry,
        new_value: *mut zend_string,
        mh_arg1: *mut ::std::os::raw::c_void,
        mh_arg2: *mut ::std::os::raw::c_void,
        mh_arg3: *mut ::std::os::raw::c_void,
        stage: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OnUpdateStrNotEmpty(
        entry: *mut zend_ini_entry,
        new_value: *mut zend_string,
        mh_arg1: *mut ::std::os::raw::c_void,
        mh_arg2: *mut ::std::os::raw::c_void,
        mh_arg3: *mut ::std::os::raw::c_void,
        stage: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type zend_ini_parser_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut zval,
        arg2: *mut zval,
        arg3: *mut zval,
        callback_type: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn zend_parse_ini_file(
        fh: *mut zend_file_handle,
        unbuffered_errors: bool,
        scanner_mode: ::std::os::raw::c_int,
        ini_parser_cb: zend_ini_parser_cb_t,
        arg: *mut ::std::os::raw::c_void,
    ) -> zend_result;
}
extern "C" {
    pub fn zend_parse_ini_string(
        str_: *const ::std::os::raw::c_char,
        unbuffered_errors: bool,
        scanner_mode: ::std::os::raw::c_int,
        ini_parser_cb: zend_ini_parser_cb_t,
        arg: *mut ::std::os::raw::c_void,
    ) -> zend_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_ini_parser_param {
    pub ini_parser_cb: zend_ini_parser_cb_t,
    pub arg: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__zend_ini_parser_param() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_ini_parser_param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_ini_parser_param>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_ini_parser_param)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ini_parser_param>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ini_parser_param)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ini_parser_cb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_parser_param),
            "::",
            stringify!(ini_parser_cb),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_parser_param),
            "::",
            stringify!(arg),
        ),
    );
}
pub type zend_ini_parser_param = _zend_ini_parser_param;
extern "C" {
    pub fn config_zval_dtor(zvalue: *mut zval);
}
extern "C" {
    pub fn php_init_config() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_shutdown_config() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_ini_register_extensions();
}
extern "C" {
    pub fn cfg_get_entry_ex(name: *mut zend_string) -> *mut zval;
}
extern "C" {
    pub fn cfg_get_entry(
        name: *const ::std::os::raw::c_char,
        name_length: usize,
    ) -> *mut zval;
}
extern "C" {
    pub fn cfg_get_long(
        varname: *const ::std::os::raw::c_char,
        result: *mut zend_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfg_get_double(
        varname: *const ::std::os::raw::c_char,
        result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfg_get_string(
        varname: *const ::std::os::raw::c_char,
        result: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_parse_user_ini_file(
        dirname: *const ::std::os::raw::c_char,
        ini_filename: *const ::std::os::raw::c_char,
        target_hash: *mut HashTable,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_ini_activate_config(
        source_hash: *mut HashTable,
        modify_type: ::std::os::raw::c_int,
        stage: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn php_ini_has_per_dir_config() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_ini_has_per_host_config() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_ini_activate_per_dir_config(
        path: *mut ::std::os::raw::c_char,
        path_len: usize,
    );
}
extern "C" {
    pub fn php_ini_activate_per_host_config(
        host: *const ::std::os::raw::c_char,
        host_len: usize,
    );
}
extern "C" {
    pub fn php_ini_get_configuration_hash() -> *mut HashTable;
}
extern "C" {
    pub fn php_fopen_primary_script(
        file_handle: *mut zend_file_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn expand_filepath(
        filepath: *const ::std::os::raw::c_char,
        real_path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn expand_filepath_ex(
        filepath: *const ::std::os::raw::c_char,
        real_path: *mut ::std::os::raw::c_char,
        relative_to: *const ::std::os::raw::c_char,
        relative_to_len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn expand_filepath_with_mode(
        filepath: *const ::std::os::raw::c_char,
        real_path: *mut ::std::os::raw::c_char,
        relative_to: *const ::std::os::raw::c_char,
        relative_to_len: usize,
        use_realpath: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn php_check_open_basedir(
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_check_open_basedir_ex(
        path: *const ::std::os::raw::c_char,
        warn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_check_specific_open_basedir(
        basedir: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_check_safe_mode_include_dir(
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_resolve_path(
        filename: *const ::std::os::raw::c_char,
        filename_len: usize,
        path: *const ::std::os::raw::c_char,
    ) -> *mut zend_string;
}
extern "C" {
    pub fn php_fopen_with_path(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        opened_path: *mut *mut zend_string,
    ) -> *mut FILE;
}
extern "C" {
    pub fn php_strip_url_passwd(
        path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn OnUpdateBaseDir(
        entry: *mut zend_ini_entry,
        new_value: *mut zend_string,
        mh_arg1: *mut ::std::os::raw::c_void,
        mh_arg2: *mut ::std::os::raw::c_void,
        mh_arg3: *mut ::std::os::raw::c_void,
        stage: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utimbuf {
    pub actime: __time_t,
    pub modtime: __time_t,
}
#[test]
fn bindgen_test_layout_utimbuf() {
    const UNINIT: ::std::mem::MaybeUninit<utimbuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<utimbuf>(),
        16usize,
        concat!("Size of: ", stringify!(utimbuf)),
    );
    assert_eq!(
        ::std::mem::align_of::<utimbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(utimbuf)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actime) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(utimbuf), "::", stringify!(actime)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modtime) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(utimbuf), "::", stringify!(modtime)),
    );
}
extern "C" {
    pub fn utime(
        __file: *const ::std::os::raw::c_char,
        __file_times: *const utimbuf,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent {
    pub d_ino: __ino_t,
    pub d_off: __off_t,
    pub d_reclen: ::std::os::raw::c_ushort,
    pub d_type: ::std::os::raw::c_uchar,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dirent() {
    const UNINIT: ::std::mem::MaybeUninit<dirent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dirent>(),
        280usize,
        concat!("Size of: ", stringify!(dirent)),
    );
    assert_eq!(
        ::std::mem::align_of::<dirent>(),
        8usize,
        concat!("Alignment of ", stringify!(dirent)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_ino) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(dirent), "::", stringify!(d_ino)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_off) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(dirent), "::", stringify!(d_off)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_reclen) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(dirent), "::", stringify!(d_reclen)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_type) as usize - ptr as usize },
        18usize,
        concat!("Offset of field: ", stringify!(dirent), "::", stringify!(d_type)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_name) as usize - ptr as usize },
        19usize,
        concat!("Offset of field: ", stringify!(dirent), "::", stringify!(d_name)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent64 {
    pub d_ino: __ino64_t,
    pub d_off: __off64_t,
    pub d_reclen: ::std::os::raw::c_ushort,
    pub d_type: ::std::os::raw::c_uchar,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dirent64() {
    const UNINIT: ::std::mem::MaybeUninit<dirent64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dirent64>(),
        280usize,
        concat!("Size of: ", stringify!(dirent64)),
    );
    assert_eq!(
        ::std::mem::align_of::<dirent64>(),
        8usize,
        concat!("Alignment of ", stringify!(dirent64)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_ino) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(dirent64), "::", stringify!(d_ino)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_off) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(dirent64), "::", stringify!(d_off)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_reclen) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(dirent64), "::", stringify!(d_reclen)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_type) as usize - ptr as usize },
        18usize,
        concat!("Offset of field: ", stringify!(dirent64), "::", stringify!(d_type)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_name) as usize - ptr as usize },
        19usize,
        concat!("Offset of field: ", stringify!(dirent64), "::", stringify!(d_name)),
    );
}
pub const DT_UNKNOWN: _bindgen_ty_22 = 0;
pub const DT_FIFO: _bindgen_ty_22 = 1;
pub const DT_CHR: _bindgen_ty_22 = 2;
pub const DT_DIR: _bindgen_ty_22 = 4;
pub const DT_BLK: _bindgen_ty_22 = 6;
pub const DT_REG: _bindgen_ty_22 = 8;
pub const DT_LNK: _bindgen_ty_22 = 10;
pub const DT_SOCK: _bindgen_ty_22 = 12;
pub const DT_WHT: _bindgen_ty_22 = 14;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __dirstream {
    _unused: [u8; 0],
}
pub type DIR = __dirstream;
extern "C" {
    pub fn opendir(__name: *const ::std::os::raw::c_char) -> *mut DIR;
}
extern "C" {
    pub fn fdopendir(__fd: ::std::os::raw::c_int) -> *mut DIR;
}
extern "C" {
    pub fn closedir(__dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readdir(__dirp: *mut DIR) -> *mut dirent;
}
extern "C" {
    pub fn readdir64(__dirp: *mut DIR) -> *mut dirent64;
}
extern "C" {
    pub fn readdir_r(
        __dirp: *mut DIR,
        __entry: *mut dirent,
        __result: *mut *mut dirent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readdir64_r(
        __dirp: *mut DIR,
        __entry: *mut dirent64,
        __result: *mut *mut dirent64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewinddir(__dirp: *mut DIR);
}
extern "C" {
    pub fn seekdir(__dirp: *mut DIR, __pos: ::std::os::raw::c_long);
}
extern "C" {
    pub fn telldir(__dirp: *mut DIR) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn dirfd(__dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scandir(
        __dir: *const ::std::os::raw::c_char,
        __namelist: *mut *mut *mut dirent,
        __selector: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const dirent) -> ::std::os::raw::c_int,
        >,
        __cmp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const dirent,
                arg2: *mut *const dirent,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scandir64(
        __dir: *const ::std::os::raw::c_char,
        __namelist: *mut *mut *mut dirent64,
        __selector: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const dirent64) -> ::std::os::raw::c_int,
        >,
        __cmp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const dirent64,
                arg2: *mut *const dirent64,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scandirat(
        __dfd: ::std::os::raw::c_int,
        __dir: *const ::std::os::raw::c_char,
        __namelist: *mut *mut *mut dirent,
        __selector: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const dirent) -> ::std::os::raw::c_int,
        >,
        __cmp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const dirent,
                arg2: *mut *const dirent,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scandirat64(
        __dfd: ::std::os::raw::c_int,
        __dir: *const ::std::os::raw::c_char,
        __namelist: *mut *mut *mut dirent64,
        __selector: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const dirent64) -> ::std::os::raw::c_int,
        >,
        __cmp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const dirent64,
                arg2: *mut *const dirent64,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alphasort(
        __e1: *mut *const dirent,
        __e2: *mut *const dirent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alphasort64(
        __e1: *mut *const dirent64,
        __e2: *mut *const dirent64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdirentries(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
        __basep: *mut __off_t,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdirentries64(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
        __basep: *mut __off64_t,
    ) -> __ssize_t;
}
extern "C" {
    pub fn versionsort(
        __e1: *mut *const dirent,
        __e2: *mut *const dirent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn versionsort64(
        __e1: *mut *const dirent64,
        __e2: *mut *const dirent64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdents64(
        __fd: ::std::os::raw::c_int,
        __buffer: *mut ::std::os::raw::c_void,
        __length: usize,
    ) -> __ssize_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cwd_state {
    pub cwd: *mut ::std::os::raw::c_char,
    pub cwd_length: usize,
}
#[test]
fn bindgen_test_layout__cwd_state() {
    const UNINIT: ::std::mem::MaybeUninit<_cwd_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_cwd_state>(),
        16usize,
        concat!("Size of: ", stringify!(_cwd_state)),
    );
    assert_eq!(
        ::std::mem::align_of::<_cwd_state>(),
        8usize,
        concat!("Alignment of ", stringify!(_cwd_state)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cwd) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_cwd_state), "::", stringify!(cwd)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cwd_length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cwd_state),
            "::",
            stringify!(cwd_length),
        ),
    );
}
pub type cwd_state = _cwd_state;
pub type verify_path_func = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const cwd_state) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn virtual_cwd_startup();
}
extern "C" {
    pub fn virtual_cwd_shutdown();
}
extern "C" {
    pub fn virtual_cwd_activate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn virtual_cwd_deactivate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn virtual_getcwd_ex(length: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn virtual_getcwd(
        buf: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn virtual_chdir(path: *const ::std::os::raw::c_char) -> zend_result;
}
extern "C" {
    pub fn virtual_chdir_file(
        path: *const ::std::os::raw::c_char,
        p_chdir: ::std::option::Option<
            unsafe extern "C" fn(
                path: *const ::std::os::raw::c_char,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn virtual_filepath(
        path: *const ::std::os::raw::c_char,
        filepath: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn virtual_filepath_ex(
        path: *const ::std::os::raw::c_char,
        filepath: *mut *mut ::std::os::raw::c_char,
        verify_path: verify_path_func,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn virtual_realpath(
        path: *const ::std::os::raw::c_char,
        real_path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn virtual_fopen(
        path: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn virtual_open(
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn virtual_creat(
        path: *const ::std::os::raw::c_char,
        mode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn virtual_rename(
        oldname: *const ::std::os::raw::c_char,
        newname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn virtual_stat(
        path: *const ::std::os::raw::c_char,
        buf: *mut zend_stat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn virtual_lstat(
        path: *const ::std::os::raw::c_char,
        buf: *mut zend_stat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn virtual_unlink(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn virtual_mkdir(
        pathname: *const ::std::os::raw::c_char,
        mode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn virtual_rmdir(
        pathname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn virtual_opendir(pathname: *const ::std::os::raw::c_char) -> *mut DIR;
}
extern "C" {
    pub fn virtual_popen(
        command: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn virtual_access(
        pathname: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn virtual_utime(
        filename: *const ::std::os::raw::c_char,
        buf: *mut utimbuf,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn virtual_chmod(
        filename: *const ::std::os::raw::c_char,
        mode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn virtual_chown(
        filename: *const ::std::os::raw::c_char,
        owner: uid_t,
        group: gid_t,
        link: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn virtual_file_ex(
        state: *mut cwd_state,
        path: *const ::std::os::raw::c_char,
        verify_path: verify_path_func,
        use_realpath: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tsrm_realpath(
        path: *const ::std::os::raw::c_char,
        real_path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _realpath_cache_bucket {
    pub key: zend_ulong,
    pub path: *mut ::std::os::raw::c_char,
    pub realpath: *mut ::std::os::raw::c_char,
    pub next: *mut _realpath_cache_bucket,
    pub expires: time_t,
    pub path_len: u16,
    pub realpath_len: u16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout__realpath_cache_bucket() {
    const UNINIT: ::std::mem::MaybeUninit<_realpath_cache_bucket> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_realpath_cache_bucket>(),
        48usize,
        concat!("Size of: ", stringify!(_realpath_cache_bucket)),
    );
    assert_eq!(
        ::std::mem::align_of::<_realpath_cache_bucket>(),
        8usize,
        concat!("Alignment of ", stringify!(_realpath_cache_bucket)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_realpath_cache_bucket),
            "::",
            stringify!(key),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_realpath_cache_bucket),
            "::",
            stringify!(path),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).realpath) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_realpath_cache_bucket),
            "::",
            stringify!(realpath),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_realpath_cache_bucket),
            "::",
            stringify!(next),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expires) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_realpath_cache_bucket),
            "::",
            stringify!(expires),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_len) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_realpath_cache_bucket),
            "::",
            stringify!(path_len),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).realpath_len) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_realpath_cache_bucket),
            "::",
            stringify!(realpath_len),
        ),
    );
}
impl _realpath_cache_bucket {
    #[inline]
    pub fn is_dir(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_dir(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(is_dir: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit
            .set(
                0usize,
                1u8,
                {
                    let is_dir: u8 = unsafe { ::std::mem::transmute(is_dir) };
                    is_dir as u64
                },
            );
        __bindgen_bitfield_unit
    }
}
pub type realpath_cache_bucket = _realpath_cache_bucket;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _virtual_cwd_globals {
    pub cwd: cwd_state,
    pub realpath_cache_size: zend_long,
    pub realpath_cache_size_limit: zend_long,
    pub realpath_cache_ttl: zend_long,
    pub realpath_cache: [*mut realpath_cache_bucket; 1024usize],
}
#[test]
fn bindgen_test_layout__virtual_cwd_globals() {
    const UNINIT: ::std::mem::MaybeUninit<_virtual_cwd_globals> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_virtual_cwd_globals>(),
        8232usize,
        concat!("Size of: ", stringify!(_virtual_cwd_globals)),
    );
    assert_eq!(
        ::std::mem::align_of::<_virtual_cwd_globals>(),
        8usize,
        concat!("Alignment of ", stringify!(_virtual_cwd_globals)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cwd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_virtual_cwd_globals),
            "::",
            stringify!(cwd),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).realpath_cache_size) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_virtual_cwd_globals),
            "::",
            stringify!(realpath_cache_size),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).realpath_cache_size_limit) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_virtual_cwd_globals),
            "::",
            stringify!(realpath_cache_size_limit),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).realpath_cache_ttl) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_virtual_cwd_globals),
            "::",
            stringify!(realpath_cache_ttl),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).realpath_cache) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_virtual_cwd_globals),
            "::",
            stringify!(realpath_cache),
        ),
    );
}
pub type virtual_cwd_globals = _virtual_cwd_globals;
extern "C" {
    pub static mut cwd_globals: virtual_cwd_globals;
}
extern "C" {
    pub fn realpath_cache_clean();
}
extern "C" {
    pub fn realpath_cache_del(path: *const ::std::os::raw::c_char, path_len: usize);
}
extern "C" {
    pub fn realpath_cache_lookup(
        path: *const ::std::os::raw::c_char,
        path_len: usize,
        t: time_t,
    ) -> *mut realpath_cache_bucket;
}
extern "C" {
    pub fn realpath_cache_size() -> zend_long;
}
extern "C" {
    pub fn realpath_cache_max_buckets() -> zend_long;
}
extern "C" {
    pub fn realpath_cache_get_buckets() -> *mut *mut realpath_cache_bucket;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_constant {
    pub value: zval,
    pub name: *mut zend_string,
}
#[test]
fn bindgen_test_layout__zend_constant() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_constant> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_constant>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_constant)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_constant>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_constant)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_constant), "::", stringify!(value)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_zend_constant), "::", stringify!(name)),
    );
}
pub type zend_constant = _zend_constant;
extern "C" {
    pub fn clean_module_constants(module_number: ::std::os::raw::c_int);
}
extern "C" {
    pub fn free_zend_constant(zv: *mut zval);
}
extern "C" {
    pub fn zend_startup_constants();
}
extern "C" {
    pub fn zend_shutdown_constants();
}
extern "C" {
    pub fn zend_register_standard_constants();
}
extern "C" {
    pub fn zend_verify_const_access(
        c: *mut zend_class_constant,
        ce: *mut zend_class_entry,
    ) -> bool;
}
extern "C" {
    pub fn zend_get_constant(name: *mut zend_string) -> *mut zval;
}
extern "C" {
    pub fn zend_get_constant_str(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_get_constant_ex(
        name: *mut zend_string,
        scope: *mut zend_class_entry,
        flags: u32,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_get_class_constant_ex(
        class_name: *mut zend_string,
        constant_name: *mut zend_string,
        scope: *mut zend_class_entry,
        flags: u32,
    ) -> *mut zval;
}
extern "C" {
    pub fn zend_register_bool_constant(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        bval: bool,
        flags: ::std::os::raw::c_int,
        module_number: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zend_register_null_constant(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        flags: ::std::os::raw::c_int,
        module_number: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zend_register_long_constant(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        lval: zend_long,
        flags: ::std::os::raw::c_int,
        module_number: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zend_register_double_constant(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        dval: f64,
        flags: ::std::os::raw::c_int,
        module_number: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zend_register_string_constant(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        strval: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        module_number: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zend_register_stringl_constant(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        strval: *const ::std::os::raw::c_char,
        strlen: usize,
        flags: ::std::os::raw::c_int,
        module_number: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zend_register_constant(c: *mut zend_constant) -> zend_result;
}
extern "C" {
    pub fn _zend_get_special_const(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
    ) -> *mut zend_constant;
}
pub type zend_bool = bool;
pub type zend_intptr_t = isize;
pub type zend_uintptr_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapi_header_struct {
    pub header: *mut ::std::os::raw::c_char,
    pub header_len: usize,
}
#[test]
fn bindgen_test_layout_sapi_header_struct() {
    const UNINIT: ::std::mem::MaybeUninit<sapi_header_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sapi_header_struct>(),
        16usize,
        concat!("Size of: ", stringify!(sapi_header_struct)),
    );
    assert_eq!(
        ::std::mem::align_of::<sapi_header_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(sapi_header_struct)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_header_struct),
            "::",
            stringify!(header),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_header_struct),
            "::",
            stringify!(header_len),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapi_headers_struct {
    pub headers: zend_llist,
    pub http_response_code: ::std::os::raw::c_int,
    pub send_default_content_type: ::std::os::raw::c_uchar,
    pub mimetype: *mut ::std::os::raw::c_char,
    pub http_status_line: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_sapi_headers_struct() {
    const UNINIT: ::std::mem::MaybeUninit<sapi_headers_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sapi_headers_struct>(),
        80usize,
        concat!("Size of: ", stringify!(sapi_headers_struct)),
    );
    assert_eq!(
        ::std::mem::align_of::<sapi_headers_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(sapi_headers_struct)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_headers_struct),
            "::",
            stringify!(headers),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).http_response_code) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_headers_struct),
            "::",
            stringify!(http_response_code),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).send_default_content_type) as usize
                - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_headers_struct),
            "::",
            stringify!(send_default_content_type),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mimetype) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_headers_struct),
            "::",
            stringify!(mimetype),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).http_status_line) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_headers_struct),
            "::",
            stringify!(http_status_line),
        ),
    );
}
pub type sapi_post_entry = _sapi_post_entry;
pub type sapi_module_struct = _sapi_module_struct;
extern "C" {
    pub static mut sapi_module: sapi_module_struct;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapi_request_info {
    pub request_method: *const ::std::os::raw::c_char,
    pub query_string: *mut ::std::os::raw::c_char,
    pub cookie_data: *mut ::std::os::raw::c_char,
    pub content_length: zend_long,
    pub path_translated: *mut ::std::os::raw::c_char,
    pub request_uri: *mut ::std::os::raw::c_char,
    pub request_body: *mut _php_stream,
    pub content_type: *const ::std::os::raw::c_char,
    pub headers_only: bool,
    pub no_headers: bool,
    pub headers_read: bool,
    pub post_entry: *mut sapi_post_entry,
    pub content_type_dup: *mut ::std::os::raw::c_char,
    pub auth_user: *mut ::std::os::raw::c_char,
    pub auth_password: *mut ::std::os::raw::c_char,
    pub auth_digest: *mut ::std::os::raw::c_char,
    pub argv0: *mut ::std::os::raw::c_char,
    pub current_user: *mut ::std::os::raw::c_char,
    pub current_user_length: ::std::os::raw::c_int,
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
    pub proto_num: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sapi_request_info() {
    const UNINIT: ::std::mem::MaybeUninit<sapi_request_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sapi_request_info>(),
        152usize,
        concat!("Size of: ", stringify!(sapi_request_info)),
    );
    assert_eq!(
        ::std::mem::align_of::<sapi_request_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sapi_request_info)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_method) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(request_method),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query_string) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(query_string),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cookie_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(cookie_data),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_length) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(content_length),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_translated) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(path_translated),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_uri) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(request_uri),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_body) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(request_body),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_type) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(content_type),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headers_only) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(headers_only),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_headers) as usize - ptr as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(no_headers),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headers_read) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(headers_read),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_entry) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(post_entry),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_type_dup) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(content_type_dup),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auth_user) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(auth_user),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auth_password) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(auth_password),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auth_digest) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(auth_digest),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argv0) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(argv0),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_user) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(current_user),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).current_user_length) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(current_user_length),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argc) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(argc),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argv) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(argv),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proto_num) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_request_info),
            "::",
            stringify!(proto_num),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _sapi_globals_struct {
    pub server_context: *mut ::std::os::raw::c_void,
    pub request_info: sapi_request_info,
    pub sapi_headers: sapi_headers_struct,
    pub read_post_bytes: i64,
    pub post_read: ::std::os::raw::c_uchar,
    pub headers_sent: ::std::os::raw::c_uchar,
    pub global_stat: zend_stat_t,
    pub default_mimetype: *mut ::std::os::raw::c_char,
    pub default_charset: *mut ::std::os::raw::c_char,
    pub rfc1867_uploaded_files: *mut HashTable,
    pub post_max_size: zend_long,
    pub options: ::std::os::raw::c_int,
    pub sapi_started: bool,
    pub global_request_time: f64,
    pub known_post_content_types: HashTable,
    pub callback_func: zval,
    pub fci_cache: zend_fcall_info_cache,
}
#[test]
fn bindgen_test_layout__sapi_globals_struct() {
    const UNINIT: ::std::mem::MaybeUninit<_sapi_globals_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_sapi_globals_struct>(),
        544usize,
        concat!("Size of: ", stringify!(_sapi_globals_struct)),
    );
    assert_eq!(
        ::std::mem::align_of::<_sapi_globals_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(_sapi_globals_struct)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).server_context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(server_context),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(request_info),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sapi_headers) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(sapi_headers),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_post_bytes) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(read_post_bytes),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_read) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(post_read),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headers_sent) as usize - ptr as usize },
        249usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(headers_sent),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).global_stat) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(global_stat),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_mimetype) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(default_mimetype),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_charset) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(default_charset),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rfc1867_uploaded_files) as usize - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(rfc1867_uploaded_files),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_max_size) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(post_max_size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(options),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sapi_started) as usize - ptr as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(sapi_started),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).global_request_time) as usize - ptr as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(global_request_time),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).known_post_content_types) as usize - ptr as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(known_post_content_types),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback_func) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(callback_func),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fci_cache) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_globals_struct),
            "::",
            stringify!(fci_cache),
        ),
    );
}
pub type sapi_globals_struct = _sapi_globals_struct;
extern "C" {
    pub static mut sapi_globals: sapi_globals_struct;
}
extern "C" {
    pub fn sapi_startup(sf: *mut sapi_module_struct);
}
extern "C" {
    pub fn sapi_shutdown();
}
extern "C" {
    pub fn sapi_activate();
}
extern "C" {
    pub fn sapi_deactivate_module();
}
extern "C" {
    pub fn sapi_deactivate_destroy();
}
extern "C" {
    pub fn sapi_deactivate();
}
extern "C" {
    pub fn sapi_initialize_empty_request();
}
extern "C" {
    pub fn sapi_add_request_header(
        var: *const ::std::os::raw::c_char,
        var_len: ::std::os::raw::c_uint,
        val: *mut ::std::os::raw::c_char,
        val_len: ::std::os::raw::c_uint,
        arg: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapi_header_line {
    pub line: *const ::std::os::raw::c_char,
    pub line_len: usize,
    pub response_code: zend_long,
}
#[test]
fn bindgen_test_layout_sapi_header_line() {
    const UNINIT: ::std::mem::MaybeUninit<sapi_header_line> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sapi_header_line>(),
        24usize,
        concat!("Size of: ", stringify!(sapi_header_line)),
    );
    assert_eq!(
        ::std::mem::align_of::<sapi_header_line>(),
        8usize,
        concat!("Alignment of ", stringify!(sapi_header_line)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_header_line),
            "::",
            stringify!(line),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_header_line),
            "::",
            stringify!(line_len),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response_code) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sapi_header_line),
            "::",
            stringify!(response_code),
        ),
    );
}
pub const sapi_header_op_enum_SAPI_HEADER_REPLACE: sapi_header_op_enum = 0;
pub const sapi_header_op_enum_SAPI_HEADER_ADD: sapi_header_op_enum = 1;
pub const sapi_header_op_enum_SAPI_HEADER_DELETE: sapi_header_op_enum = 2;
pub const sapi_header_op_enum_SAPI_HEADER_DELETE_ALL: sapi_header_op_enum = 3;
pub const sapi_header_op_enum_SAPI_HEADER_SET_STATUS: sapi_header_op_enum = 4;
pub type sapi_header_op_enum = ::std::os::raw::c_uint;
extern "C" {
    pub fn sapi_header_op(
        op: sapi_header_op_enum,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapi_add_header_ex(
        header_line: *const ::std::os::raw::c_char,
        header_line_len: usize,
        duplicate: bool,
        replace: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapi_send_headers() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapi_free_header(sapi_header: *mut sapi_header_struct);
}
extern "C" {
    pub fn sapi_handle_post(arg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn sapi_read_post_block(
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> usize;
}
extern "C" {
    pub fn sapi_register_post_entries(
        post_entry: *const sapi_post_entry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapi_register_post_entry(
        post_entry: *const sapi_post_entry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapi_unregister_post_entry(post_entry: *const sapi_post_entry);
}
extern "C" {
    pub fn sapi_register_default_post_reader(
        default_post_reader: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapi_register_treat_data(
        treat_data: ::std::option::Option<
            unsafe extern "C" fn(
                arg: ::std::os::raw::c_int,
                str_: *mut ::std::os::raw::c_char,
                destArray: *mut zval,
            ),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapi_register_input_filter(
        input_filter: ::std::option::Option<
            unsafe extern "C" fn(
                arg: ::std::os::raw::c_int,
                var: *const ::std::os::raw::c_char,
                val: *mut *mut ::std::os::raw::c_char,
                val_len: usize,
                new_val_len: *mut usize,
            ) -> ::std::os::raw::c_uint,
        >,
        input_filter_init: ::std::option::Option<
            unsafe extern "C" fn() -> ::std::os::raw::c_uint,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapi_flush() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapi_get_stat() -> *mut zend_stat_t;
}
extern "C" {
    pub fn sapi_getenv(
        name: *const ::std::os::raw::c_char,
        name_len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sapi_get_default_content_type() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sapi_get_default_content_type_header(default_header: *mut sapi_header_struct);
}
extern "C" {
    pub fn sapi_apply_default_charset(
        mimetype: *mut *mut ::std::os::raw::c_char,
        len: usize,
    ) -> usize;
}
extern "C" {
    pub fn sapi_activate_headers_only();
}
extern "C" {
    pub fn sapi_get_fd(fd: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapi_force_http_10() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapi_get_target_uid(arg1: *mut uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapi_get_target_gid(arg1: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapi_get_request_time() -> f64;
}
extern "C" {
    pub fn sapi_terminate_process();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _sapi_module_struct {
    pub name: *mut ::std::os::raw::c_char,
    pub pretty_name: *mut ::std::os::raw::c_char,
    pub startup: ::std::option::Option<
        unsafe extern "C" fn(
            sapi_module: *mut _sapi_module_struct,
        ) -> ::std::os::raw::c_int,
    >,
    pub shutdown: ::std::option::Option<
        unsafe extern "C" fn(
            sapi_module: *mut _sapi_module_struct,
        ) -> ::std::os::raw::c_int,
    >,
    pub activate: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub deactivate: ::std::option::Option<
        unsafe extern "C" fn() -> ::std::os::raw::c_int,
    >,
    pub ub_write: ::std::option::Option<
        unsafe extern "C" fn(
            str_: *const ::std::os::raw::c_char,
            str_length: usize,
        ) -> usize,
    >,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(server_context: *mut ::std::os::raw::c_void),
    >,
    pub get_stat: ::std::option::Option<unsafe extern "C" fn() -> *mut zend_stat_t>,
    pub getenv: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            name_len: usize,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub sapi_error: ::std::option::Option<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_int,
            error_msg: *const ::std::os::raw::c_char,
            ...
        ),
    >,
    pub header_handler: ::std::option::Option<
        unsafe extern "C" fn(
            sapi_header: *mut sapi_header_struct,
            op: sapi_header_op_enum,
            sapi_headers: *mut sapi_headers_struct,
        ) -> ::std::os::raw::c_int,
    >,
    pub send_headers: ::std::option::Option<
        unsafe extern "C" fn(
            sapi_headers: *mut sapi_headers_struct,
        ) -> ::std::os::raw::c_int,
    >,
    pub send_header: ::std::option::Option<
        unsafe extern "C" fn(
            sapi_header: *mut sapi_header_struct,
            server_context: *mut ::std::os::raw::c_void,
        ),
    >,
    pub read_post: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut ::std::os::raw::c_char,
            count_bytes: usize,
        ) -> usize,
    >,
    pub read_cookies: ::std::option::Option<
        unsafe extern "C" fn() -> *mut ::std::os::raw::c_char,
    >,
    pub register_server_variables: ::std::option::Option<
        unsafe extern "C" fn(track_vars_array: *mut zval),
    >,
    pub log_message: ::std::option::Option<
        unsafe extern "C" fn(
            message: *const ::std::os::raw::c_char,
            syslog_type_int: ::std::os::raw::c_int,
        ),
    >,
    pub get_request_time: ::std::option::Option<
        unsafe extern "C" fn(request_time: *mut f64) -> zend_result,
    >,
    pub terminate_process: ::std::option::Option<unsafe extern "C" fn()>,
    pub php_ini_path_override: *mut ::std::os::raw::c_char,
    pub default_post_reader: ::std::option::Option<unsafe extern "C" fn()>,
    pub treat_data: ::std::option::Option<
        unsafe extern "C" fn(
            arg: ::std::os::raw::c_int,
            str_: *mut ::std::os::raw::c_char,
            destArray: *mut zval,
        ),
    >,
    pub executable_location: *mut ::std::os::raw::c_char,
    pub php_ini_ignore: ::std::os::raw::c_int,
    pub php_ini_ignore_cwd: ::std::os::raw::c_int,
    pub get_fd: ::std::option::Option<
        unsafe extern "C" fn(fd: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub force_http_10: ::std::option::Option<
        unsafe extern "C" fn() -> ::std::os::raw::c_int,
    >,
    pub get_target_uid: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut uid_t) -> ::std::os::raw::c_int,
    >,
    pub get_target_gid: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut gid_t) -> ::std::os::raw::c_int,
    >,
    pub input_filter: ::std::option::Option<
        unsafe extern "C" fn(
            arg: ::std::os::raw::c_int,
            var: *const ::std::os::raw::c_char,
            val: *mut *mut ::std::os::raw::c_char,
            val_len: usize,
            new_val_len: *mut usize,
        ) -> ::std::os::raw::c_uint,
    >,
    pub ini_defaults: ::std::option::Option<
        unsafe extern "C" fn(configuration_hash: *mut HashTable),
    >,
    pub phpinfo_as_text: ::std::os::raw::c_int,
    pub ini_entries: *const ::std::os::raw::c_char,
    pub additional_functions: *const zend_function_entry,
    pub input_filter_init: ::std::option::Option<
        unsafe extern "C" fn() -> ::std::os::raw::c_uint,
    >,
}
#[test]
fn bindgen_test_layout__sapi_module_struct() {
    const UNINIT: ::std::mem::MaybeUninit<_sapi_module_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_sapi_module_struct>(),
        280usize,
        concat!("Size of: ", stringify!(_sapi_module_struct)),
    );
    assert_eq!(
        ::std::mem::align_of::<_sapi_module_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(_sapi_module_struct)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pretty_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(pretty_name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startup) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(startup),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shutdown) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(shutdown),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).activate) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(activate),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deactivate) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(deactivate),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ub_write) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(ub_write),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flush) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(flush),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_stat) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(get_stat),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getenv) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(getenv),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sapi_error) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(sapi_error),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_handler) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(header_handler),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_headers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(send_headers),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_header) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(send_header),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_post) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(read_post),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_cookies) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(read_cookies),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).register_server_variables) as usize
                - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(register_server_variables),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_message) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(log_message),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_request_time) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(get_request_time),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).terminate_process) as usize - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(terminate_process),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).php_ini_path_override) as usize - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(php_ini_path_override),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).default_post_reader) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(default_post_reader),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).treat_data) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(treat_data),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).executable_location) as usize - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(executable_location),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).php_ini_ignore) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(php_ini_ignore),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).php_ini_ignore_cwd) as usize - ptr as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(php_ini_ignore_cwd),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_fd) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(get_fd),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).force_http_10) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(force_http_10),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_target_uid) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(get_target_uid),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_target_gid) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(get_target_gid),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_filter) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(input_filter),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ini_defaults) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(ini_defaults),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phpinfo_as_text) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(phpinfo_as_text),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ini_entries) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(ini_entries),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).additional_functions) as usize - ptr as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(additional_functions),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).input_filter_init) as usize - ptr as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_module_struct),
            "::",
            stringify!(input_filter_init),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _sapi_post_entry {
    pub content_type: *mut ::std::os::raw::c_char,
    pub content_type_len: u32,
    pub post_reader: ::std::option::Option<unsafe extern "C" fn()>,
    pub post_handler: ::std::option::Option<
        unsafe extern "C" fn(
            content_type_dup: *mut ::std::os::raw::c_char,
            arg: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout__sapi_post_entry() {
    const UNINIT: ::std::mem::MaybeUninit<_sapi_post_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_sapi_post_entry>(),
        32usize,
        concat!("Size of: ", stringify!(_sapi_post_entry)),
    );
    assert_eq!(
        ::std::mem::align_of::<_sapi_post_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_sapi_post_entry)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_post_entry),
            "::",
            stringify!(content_type),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_type_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_post_entry),
            "::",
            stringify!(content_type_len),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_reader) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_post_entry),
            "::",
            stringify!(post_reader),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_handler) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_sapi_post_entry),
            "::",
            stringify!(post_handler),
        ),
    );
}
extern "C" {
    pub fn sapi_read_standard_form_data();
}
extern "C" {
    pub fn php_default_post_reader();
}
extern "C" {
    pub fn php_default_treat_data(
        arg: ::std::os::raw::c_int,
        str_: *mut ::std::os::raw::c_char,
        destArray: *mut zval,
    );
}
extern "C" {
    pub fn php_default_input_filter(
        arg: ::std::os::raw::c_int,
        var: *const ::std::os::raw::c_char,
        val: *mut *mut ::std::os::raw::c_char,
        val_len: usize,
        new_val_len: *mut usize,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn php_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn php_version_id() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn php_request_startup() -> zend_result;
}
extern "C" {
    pub fn php_request_shutdown(dummy: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn php_module_startup(
        sf: *mut sapi_module_struct,
        additional_module: *mut zend_module_entry,
    ) -> zend_result;
}
extern "C" {
    pub fn php_module_shutdown();
}
extern "C" {
    pub fn php_module_shutdown_wrapper(
        sapi_globals: *mut sapi_module_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_register_extensions(
        ptr: *const *mut zend_module_entry,
        count: ::std::os::raw::c_int,
    ) -> zend_result;
}
extern "C" {
    pub fn php_execute_script(primary_file: *mut zend_file_handle) -> bool;
}
extern "C" {
    pub fn php_execute_simple_script(
        primary_file: *mut zend_file_handle,
        ret: *mut zval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_lint_script(file: *mut zend_file_handle) -> zend_result;
}
extern "C" {
    pub fn php_handle_aborted_connection();
}
extern "C" {
    pub fn php_handle_auth_data(
        auth: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_html_puts(str_: *const ::std::os::raw::c_char, siz: usize);
}
extern "C" {
    pub fn php_stream_open_for_zend_ex(
        handle: *mut zend_file_handle,
        mode: ::std::os::raw::c_int,
    ) -> zend_result;
}
extern "C" {
    pub fn php_init_environ() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_shutdown_environ() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_startup_auto_globals();
}
extern "C" {
    pub static mut php_import_environment_variables: ::std::option::Option<
        unsafe extern "C" fn(array_ptr: *mut zval),
    >;
}
extern "C" {
    pub fn php_register_variable(
        var: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        track_vars_array: *mut zval,
    );
}
extern "C" {
    pub fn php_register_variable_safe(
        var: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        val_len: usize,
        track_vars_array: *mut zval,
    );
}
extern "C" {
    pub fn php_register_variable_ex(
        var: *const ::std::os::raw::c_char,
        val: *mut zval,
        track_vars_array: *mut zval,
    );
}
extern "C" {
    pub fn php_register_known_variable(
        var: *const ::std::os::raw::c_char,
        var_len: usize,
        value: *mut zval,
        track_vars_array: *mut zval,
    );
}
extern "C" {
    pub fn php_build_argv(s: *const ::std::os::raw::c_char, track_vars_array: *mut zval);
}
extern "C" {
    pub fn php_hash_environment() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_embed_init(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_embed_shutdown();
}
extern "C" {
    pub static mut php_embed_module: sapi_module_struct;
}
extern "C" {
    pub fn sigan_zend_string_init(
        str_: *const ::std::os::raw::c_char,
        len: usize,
        persistent: bool,
    ) -> *mut zend_string;
}
extern "C" {
    pub fn sigan_zend_string_init_fast(
        str_: *const ::std::os::raw::c_char,
        len: usize,
    ) -> *mut zend_string;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __uint128_t = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_at {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_ax25 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_dl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_eon {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in6 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_inarp {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_ipx {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_iso {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_ns {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_un {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_x25 {
    pub _address: u8,
}
