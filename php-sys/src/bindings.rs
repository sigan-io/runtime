/* automatically generated by rust-bindgen 0.69.4 */

pub type zend_long = i64;
pub type zend_ulong = u64;
pub const ZEND_RESULT_CODE_SUCCESS: ZEND_RESULT_CODE = 0;
pub const ZEND_RESULT_CODE_FAILURE: ZEND_RESULT_CODE = -1;
pub type ZEND_RESULT_CODE = ::std::os::raw::c_int;
pub use self::ZEND_RESULT_CODE as zend_result;
pub type zend_object_handlers = _zend_object_handlers;
pub type zend_class_entry = _zend_class_entry;
pub type zend_function = _zend_function;
pub type zend_execute_data = _zend_execute_data;
pub type zval = _zval_struct;
pub type zend_refcounted = _zend_refcounted;
pub type zend_string = _zend_string;
pub type zend_array = _zend_array;
pub type zend_object = _zend_object;
pub type zend_resource = _zend_resource;
pub type zend_reference = _zend_reference;
pub type zend_ast_ref = _zend_ast_ref;
pub type dtor_func_t = ::std::option::Option<unsafe extern "C" fn(pDest: *mut zval)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zend_type {
    pub ptr: *mut ::std::os::raw::c_void,
    pub type_mask: u32,
}
#[test]
fn bindgen_test_layout_zend_type() {
    const UNINIT: ::std::mem::MaybeUninit<zend_type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<zend_type>(),
        16usize,
        concat!("Size of: ", stringify!(zend_type)),
    );
    assert_eq!(
        ::std::mem::align_of::<zend_type>(),
        8usize,
        concat!("Alignment of ", stringify!(zend_type)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(zend_type), "::", stringify!(ptr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_mask) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(zend_type), "::", stringify!(type_mask)),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_value {
    pub lval: zend_long,
    pub dval: f64,
    pub counted: *mut zend_refcounted,
    pub str_: *mut zend_string,
    pub arr: *mut zend_array,
    pub obj: *mut zend_object,
    pub res: *mut zend_resource,
    pub ref_: *mut zend_reference,
    pub ast: *mut zend_ast_ref,
    pub zv: *mut zval,
    pub ptr: *mut ::std::os::raw::c_void,
    pub ce: *mut zend_class_entry,
    pub func: *mut zend_function,
    pub ww: _zend_value__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_value__bindgen_ty_1 {
    pub w1: u32,
    pub w2: u32,
}
#[test]
fn bindgen_test_layout__zend_value__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_value__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_value__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_value__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_value__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_value__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value__bindgen_ty_1),
            "::",
            stringify!(w1),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value__bindgen_ty_1),
            "::",
            stringify!(w2),
        ),
    );
}
#[test]
fn bindgen_test_layout__zend_value() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_value> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_value>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_value)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_value>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_value)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lval) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(lval)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dval) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(dval)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counted) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(counted)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(str_)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arr) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(arr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(obj)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(res)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(ref_)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ast) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(ast)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zv) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(zv)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(ptr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ce) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(ce)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(func)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ww) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_value), "::", stringify!(ww)),
    );
}
pub type zend_value = _zend_value;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zval_struct {
    pub value: zend_value,
    pub u1: _zval_struct__bindgen_ty_1,
    pub u2: _zval_struct__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zval_struct__bindgen_ty_1 {
    pub type_info: u32,
    pub v: _zval_struct__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zval_struct__bindgen_ty_1__bindgen_ty_1 {
    pub type_: u8,
    pub type_flags: u8,
    pub u: _zval_struct__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zval_struct__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub extra: u16,
}
#[test]
fn bindgen_test_layout__zval_struct__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        _zval_struct__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zval_struct__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
        ),
    );
    assert_eq!(
        ::std::mem::align_of::<_zval_struct__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(extra),
        ),
    );
}
#[test]
fn bindgen_test_layout__zval_struct__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_zval_struct__bindgen_ty_1__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zval_struct__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zval_struct__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_flags) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(u),
        ),
    );
}
#[test]
fn bindgen_test_layout__zval_struct__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_zval_struct__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zval_struct__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_zval_struct__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zval_struct__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_zval_struct__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1),
            "::",
            stringify!(type_info),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1),
            "::",
            stringify!(v),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zval_struct__bindgen_ty_2 {
    pub next: u32,
    pub cache_slot: u32,
    pub opline_num: u32,
    pub lineno: u32,
    pub num_args: u32,
    pub fe_pos: u32,
    pub fe_iter_idx: u32,
    pub guard: u32,
    pub constant_flags: u32,
    pub extra: u32,
}
#[test]
fn bindgen_test_layout__zval_struct__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<_zval_struct__bindgen_ty_2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zval_struct__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(_zval_struct__bindgen_ty_2)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zval_struct__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(_zval_struct__bindgen_ty_2)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(next),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_slot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(cache_slot),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opline_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(opline_num),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(lineno),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_args) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(num_args),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fe_pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(fe_pos),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fe_iter_idx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(fe_iter_idx),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guard) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(guard),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constant_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(constant_flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(extra),
        ),
    );
}
#[test]
fn bindgen_test_layout__zval_struct() {
    const UNINIT: ::std::mem::MaybeUninit<_zval_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zval_struct>(),
        16usize,
        concat!("Size of: ", stringify!(_zval_struct)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zval_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(_zval_struct)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zval_struct), "::", stringify!(value)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u1) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zval_struct), "::", stringify!(u1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u2) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(_zval_struct), "::", stringify!(u2)),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_refcounted_h {
    pub refcount: u32,
    pub u: _zend_refcounted_h__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_refcounted_h__bindgen_ty_1 {
    pub type_info: u32,
}
#[test]
fn bindgen_test_layout__zend_refcounted_h__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_refcounted_h__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_refcounted_h__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_zend_refcounted_h__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_refcounted_h__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_refcounted_h__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_refcounted_h__bindgen_ty_1),
            "::",
            stringify!(type_info),
        ),
    );
}
#[test]
fn bindgen_test_layout__zend_refcounted_h() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_refcounted_h> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_refcounted_h>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_refcounted_h)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_refcounted_h>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_refcounted_h)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_refcounted_h),
            "::",
            stringify!(refcount),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(_zend_refcounted_h), "::", stringify!(u)),
    );
}
pub type zend_refcounted_h = _zend_refcounted_h;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_refcounted {
    pub gc: zend_refcounted_h,
}
#[test]
fn bindgen_test_layout__zend_refcounted() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_refcounted> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_refcounted>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_refcounted)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_refcounted>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_refcounted)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_refcounted), "::", stringify!(gc)),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_string {
    pub gc: zend_refcounted_h,
    pub h: zend_ulong,
    pub len: usize,
    pub val: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout__zend_string() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_string> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_string>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_string)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_string>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_string)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_string), "::", stringify!(gc)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_string), "::", stringify!(h)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_zend_string), "::", stringify!(len)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_zend_string), "::", stringify!(val)),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _Bucket {
    pub val: zval,
    pub h: zend_ulong,
    pub key: *mut zend_string,
}
#[test]
fn bindgen_test_layout__Bucket() {
    const UNINIT: ::std::mem::MaybeUninit<_Bucket> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_Bucket>(),
        32usize,
        concat!("Size of: ", stringify!(_Bucket)),
    );
    assert_eq!(
        ::std::mem::align_of::<_Bucket>(),
        8usize,
        concat!("Alignment of ", stringify!(_Bucket)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_Bucket), "::", stringify!(val)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_Bucket), "::", stringify!(h)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_Bucket), "::", stringify!(key)),
    );
}
pub type Bucket = _Bucket;
pub type HashTable = _zend_array;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_array {
    pub gc: zend_refcounted_h,
    pub u: _zend_array__bindgen_ty_1,
    pub nTableMask: u32,
    pub __bindgen_anon_1: _zend_array__bindgen_ty_2,
    pub nNumUsed: u32,
    pub nNumOfElements: u32,
    pub nTableSize: u32,
    pub nInternalPointer: u32,
    pub nNextFreeElement: zend_long,
    pub pDestructor: dtor_func_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_array__bindgen_ty_1 {
    pub v: _zend_array__bindgen_ty_1__bindgen_ty_1,
    pub flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_array__bindgen_ty_1__bindgen_ty_1 {
    pub flags: u8,
    pub _unused: u8,
    pub nIteratorsCount: u8,
    pub _unused2: u8,
}
#[test]
fn bindgen_test_layout__zend_array__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_array__bindgen_ty_1__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_array__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_array__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_unused),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nIteratorsCount) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(nIteratorsCount),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_unused2),
        ),
    );
}
#[test]
fn bindgen_test_layout__zend_array__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_array__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_array__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_zend_array__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_array__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_array__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1),
            "::",
            stringify!(v),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1),
            "::",
            stringify!(flags),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_array__bindgen_ty_2 {
    pub arHash: *mut u32,
    pub arData: *mut Bucket,
    pub arPacked: *mut zval,
}
#[test]
fn bindgen_test_layout__zend_array__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_array__bindgen_ty_2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_array__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_array__bindgen_ty_2)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_array__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_array__bindgen_ty_2)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arHash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_2),
            "::",
            stringify!(arHash),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_2),
            "::",
            stringify!(arData),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arPacked) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_2),
            "::",
            stringify!(arPacked),
        ),
    );
}
#[test]
fn bindgen_test_layout__zend_array() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_array> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_array>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_array)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_array>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_array)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_array), "::", stringify!(gc)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_array), "::", stringify!(u)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nTableMask) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nTableMask),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nNumUsed) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_zend_array), "::", stringify!(nNumUsed)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nNumOfElements) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nNumOfElements),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nTableSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nTableSize),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nInternalPointer) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nInternalPointer),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nNextFreeElement) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nNextFreeElement),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDestructor) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(pDestructor),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_object {
    pub gc: zend_refcounted_h,
    pub handle: u32,
    pub ce: *mut zend_class_entry,
    pub handlers: *const zend_object_handlers,
    pub properties: *mut HashTable,
    pub properties_table: [zval; 1usize],
}
#[test]
fn bindgen_test_layout__zend_object() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_object> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_object>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_object)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_object>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_object)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_object), "::", stringify!(gc)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_object), "::", stringify!(handle)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ce) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_zend_object), "::", stringify!(ce)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handlers) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object),
            "::",
            stringify!(handlers),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).properties) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object),
            "::",
            stringify!(properties),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).properties_table) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object),
            "::",
            stringify!(properties_table),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_resource {
    pub gc: zend_refcounted_h,
    pub handle: zend_long,
    pub type_: ::std::os::raw::c_int,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__zend_resource() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_resource> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_resource>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_resource)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_resource>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_resource)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_resource), "::", stringify!(gc)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_resource),
            "::",
            stringify!(handle),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_zend_resource), "::", stringify!(type_)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_zend_resource), "::", stringify!(ptr)),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union zend_property_info_source_list {
    pub ptr: *mut _zend_property_info,
    pub list: usize,
}
#[test]
fn bindgen_test_layout_zend_property_info_source_list() {
    const UNINIT: ::std::mem::MaybeUninit<zend_property_info_source_list> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<zend_property_info_source_list>(),
        8usize,
        concat!("Size of: ", stringify!(zend_property_info_source_list)),
    );
    assert_eq!(
        ::std::mem::align_of::<zend_property_info_source_list>(),
        8usize,
        concat!("Alignment of ", stringify!(zend_property_info_source_list)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zend_property_info_source_list),
            "::",
            stringify!(ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zend_property_info_source_list),
            "::",
            stringify!(list),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_reference {
    pub gc: zend_refcounted_h,
    pub val: zval,
    pub sources: zend_property_info_source_list,
}
#[test]
fn bindgen_test_layout__zend_reference() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_reference> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_reference>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_reference)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_reference>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_reference)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_reference), "::", stringify!(gc)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_reference), "::", stringify!(val)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sources) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_reference),
            "::",
            stringify!(sources),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_ast_ref {
    pub gc: zend_refcounted_h,
}
#[test]
fn bindgen_test_layout__zend_ast_ref() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_ast_ref> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_ast_ref>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_ast_ref)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ast_ref>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_ast_ref)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_ast_ref), "::", stringify!(gc)),
    );
}
pub type zend_object_iterator = _zend_object_iterator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_object_iterator_funcs {
    pub dtor: ::std::option::Option<
        unsafe extern "C" fn(iter: *mut zend_object_iterator),
    >,
    pub valid: ::std::option::Option<
        unsafe extern "C" fn(iter: *mut zend_object_iterator) -> ::std::os::raw::c_int,
    >,
    pub get_current_data: ::std::option::Option<
        unsafe extern "C" fn(iter: *mut zend_object_iterator) -> *mut zval,
    >,
    pub get_current_key: ::std::option::Option<
        unsafe extern "C" fn(iter: *mut zend_object_iterator, key: *mut zval),
    >,
    pub move_forward: ::std::option::Option<
        unsafe extern "C" fn(iter: *mut zend_object_iterator),
    >,
    pub rewind: ::std::option::Option<
        unsafe extern "C" fn(iter: *mut zend_object_iterator),
    >,
    pub invalidate_current: ::std::option::Option<
        unsafe extern "C" fn(iter: *mut zend_object_iterator),
    >,
    pub get_gc: ::std::option::Option<
        unsafe extern "C" fn(
            iter: *mut zend_object_iterator,
            table: *mut *mut zval,
            n: *mut ::std::os::raw::c_int,
        ) -> *mut HashTable,
    >,
}
#[test]
fn bindgen_test_layout__zend_object_iterator_funcs() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_object_iterator_funcs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_object_iterator_funcs>(),
        64usize,
        concat!("Size of: ", stringify!(_zend_object_iterator_funcs)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_object_iterator_funcs>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_object_iterator_funcs)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dtor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(dtor),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(valid),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_current_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(get_current_data),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_current_key) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(get_current_key),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).move_forward) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(move_forward),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rewind) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(rewind),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).invalidate_current) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(invalidate_current),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_gc) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(get_gc),
        ),
    );
}
pub type zend_object_iterator_funcs = _zend_object_iterator_funcs;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_object_iterator {
    pub std: zend_object,
    pub data: zval,
    pub funcs: *const zend_object_iterator_funcs,
    pub index: zend_ulong,
}
#[test]
fn bindgen_test_layout__zend_object_iterator() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_object_iterator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_object_iterator>(),
        88usize,
        concat!("Size of: ", stringify!(_zend_object_iterator)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_object_iterator>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_object_iterator)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).std) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator),
            "::",
            stringify!(std),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator),
            "::",
            stringify!(data),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).funcs) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator),
            "::",
            stringify!(funcs),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator),
            "::",
            stringify!(index),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_iterator_funcs {
    pub zf_new_iterator: *mut zend_function,
    pub zf_valid: *mut zend_function,
    pub zf_current: *mut zend_function,
    pub zf_key: *mut zend_function,
    pub zf_next: *mut zend_function,
    pub zf_rewind: *mut zend_function,
}
#[test]
fn bindgen_test_layout__zend_class_iterator_funcs() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_class_iterator_funcs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_iterator_funcs>(),
        48usize,
        concat!("Size of: ", stringify!(_zend_class_iterator_funcs)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_iterator_funcs>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_iterator_funcs)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zf_new_iterator) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_new_iterator),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zf_valid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_valid),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zf_current) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_current),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zf_key) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_key),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zf_next) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_next),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zf_rewind) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_rewind),
        ),
    );
}
pub type zend_class_iterator_funcs = _zend_class_iterator_funcs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_arrayaccess_funcs {
    pub zf_offsetget: *mut zend_function,
    pub zf_offsetexists: *mut zend_function,
    pub zf_offsetset: *mut zend_function,
    pub zf_offsetunset: *mut zend_function,
}
#[test]
fn bindgen_test_layout__zend_class_arrayaccess_funcs() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_class_arrayaccess_funcs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_arrayaccess_funcs>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_class_arrayaccess_funcs)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_arrayaccess_funcs>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_arrayaccess_funcs)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zf_offsetget) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_arrayaccess_funcs),
            "::",
            stringify!(zf_offsetget),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zf_offsetexists) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_arrayaccess_funcs),
            "::",
            stringify!(zf_offsetexists),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zf_offsetset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_arrayaccess_funcs),
            "::",
            stringify!(zf_offsetset),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zf_offsetunset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_arrayaccess_funcs),
            "::",
            stringify!(zf_offsetunset),
        ),
    );
}
pub type zend_class_arrayaccess_funcs = _zend_class_arrayaccess_funcs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_serialize_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_unserialize_data {
    _unused: [u8; 0],
}
pub type zend_serialize_data = _zend_serialize_data;
pub type zend_unserialize_data = _zend_unserialize_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_name {
    pub name: *mut zend_string,
    pub lc_name: *mut zend_string,
}
#[test]
fn bindgen_test_layout__zend_class_name() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_class_name> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_name>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_class_name)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_name>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_name)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_name),
            "::",
            stringify!(name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lc_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_name),
            "::",
            stringify!(lc_name),
        ),
    );
}
pub type zend_class_name = _zend_class_name;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_trait_method_reference {
    pub method_name: *mut zend_string,
    pub class_name: *mut zend_string,
}
#[test]
fn bindgen_test_layout__zend_trait_method_reference() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_trait_method_reference> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_trait_method_reference>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_trait_method_reference)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_trait_method_reference>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_trait_method_reference)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_method_reference),
            "::",
            stringify!(method_name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_method_reference),
            "::",
            stringify!(class_name),
        ),
    );
}
pub type zend_trait_method_reference = _zend_trait_method_reference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_trait_precedence {
    pub trait_method: zend_trait_method_reference,
    pub num_excludes: u32,
    pub exclude_class_names: [*mut zend_string; 1usize],
}
#[test]
fn bindgen_test_layout__zend_trait_precedence() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_trait_precedence> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_trait_precedence>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_trait_precedence)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_trait_precedence>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_trait_precedence)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trait_method) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_precedence),
            "::",
            stringify!(trait_method),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_excludes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_precedence),
            "::",
            stringify!(num_excludes),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).exclude_class_names) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_precedence),
            "::",
            stringify!(exclude_class_names),
        ),
    );
}
pub type zend_trait_precedence = _zend_trait_precedence;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_trait_alias {
    pub trait_method: zend_trait_method_reference,
    /// name for method to be added
    pub alias: *mut zend_string,
    /// modifiers to be set on trait method
    pub modifiers: u32,
}
#[test]
fn bindgen_test_layout__zend_trait_alias() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_trait_alias> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_trait_alias>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_trait_alias)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_trait_alias>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_trait_alias)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trait_method) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_alias),
            "::",
            stringify!(trait_method),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alias) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_alias),
            "::",
            stringify!(alias),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modifiers) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_alias),
            "::",
            stringify!(modifiers),
        ),
    );
}
pub type zend_trait_alias = _zend_trait_alias;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_mutable_data {
    pub default_properties_table: *mut zval,
    pub constants_table: *mut HashTable,
    pub ce_flags: u32,
    pub backed_enum_table: *mut HashTable,
}
#[test]
fn bindgen_test_layout__zend_class_mutable_data() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_class_mutable_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_mutable_data>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_class_mutable_data)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_mutable_data>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_mutable_data)),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).default_properties_table) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_mutable_data),
            "::",
            stringify!(default_properties_table),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constants_table) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_mutable_data),
            "::",
            stringify!(constants_table),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ce_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_mutable_data),
            "::",
            stringify!(ce_flags),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).backed_enum_table) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_mutable_data),
            "::",
            stringify!(backed_enum_table),
        ),
    );
}
pub type zend_class_mutable_data = _zend_class_mutable_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_dependency {
    pub name: *mut zend_string,
    pub ce: *mut zend_class_entry,
}
#[test]
fn bindgen_test_layout__zend_class_dependency() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_class_dependency> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_dependency>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_class_dependency)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_dependency>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_dependency)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_dependency),
            "::",
            stringify!(name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ce) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_dependency),
            "::",
            stringify!(ce),
        ),
    );
}
pub type zend_class_dependency = _zend_class_dependency;
pub type zend_inheritance_cache_entry = _zend_inheritance_cache_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_error_info {
    pub type_: ::std::os::raw::c_int,
    pub lineno: u32,
    pub filename: *mut zend_string,
    pub message: *mut zend_string,
}
#[test]
fn bindgen_test_layout__zend_error_info() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_error_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_error_info>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_error_info)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_error_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_error_info)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_error_info),
            "::",
            stringify!(type_),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineno) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_error_info),
            "::",
            stringify!(lineno),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_error_info),
            "::",
            stringify!(filename),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_error_info),
            "::",
            stringify!(message),
        ),
    );
}
pub type zend_error_info = _zend_error_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_inheritance_cache_entry {
    pub next: *mut zend_inheritance_cache_entry,
    pub ce: *mut zend_class_entry,
    pub parent: *mut zend_class_entry,
    pub dependencies: *mut zend_class_dependency,
    pub dependencies_count: u32,
    pub num_warnings: u32,
    pub warnings: *mut *mut zend_error_info,
    pub traits_and_interfaces: [*mut zend_class_entry; 1usize],
}
#[test]
fn bindgen_test_layout__zend_inheritance_cache_entry() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_inheritance_cache_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_inheritance_cache_entry>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_inheritance_cache_entry)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_inheritance_cache_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_inheritance_cache_entry)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_inheritance_cache_entry),
            "::",
            stringify!(next),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ce) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_inheritance_cache_entry),
            "::",
            stringify!(ce),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_inheritance_cache_entry),
            "::",
            stringify!(parent),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_inheritance_cache_entry),
            "::",
            stringify!(dependencies),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dependencies_count) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_inheritance_cache_entry),
            "::",
            stringify!(dependencies_count),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_warnings) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_inheritance_cache_entry),
            "::",
            stringify!(num_warnings),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).warnings) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_inheritance_cache_entry),
            "::",
            stringify!(warnings),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).traits_and_interfaces) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_inheritance_cache_entry),
            "::",
            stringify!(traits_and_interfaces),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_class_entry {
    pub type_: ::std::os::raw::c_char,
    pub name: *mut zend_string,
    pub __bindgen_anon_1: _zend_class_entry__bindgen_ty_1,
    pub refcount: ::std::os::raw::c_int,
    pub ce_flags: u32,
    pub default_properties_count: ::std::os::raw::c_int,
    pub default_static_members_count: ::std::os::raw::c_int,
    pub default_properties_table: *mut zval,
    pub default_static_members_table: *mut zval,
    pub static_members_table__ptr: *mut zval,
    pub function_table: HashTable,
    pub properties_info: HashTable,
    pub constants_table: HashTable,
    pub mutable_data__ptr: *mut zend_class_mutable_data,
    pub inheritance_cache: *mut zend_inheritance_cache_entry,
    pub properties_info_table: *mut *mut _zend_property_info,
    pub constructor: *mut zend_function,
    pub destructor: *mut zend_function,
    pub clone: *mut zend_function,
    pub __get: *mut zend_function,
    pub __set: *mut zend_function,
    pub __unset: *mut zend_function,
    pub __isset: *mut zend_function,
    pub __call: *mut zend_function,
    pub __callstatic: *mut zend_function,
    pub __tostring: *mut zend_function,
    pub __debugInfo: *mut zend_function,
    pub __serialize: *mut zend_function,
    pub __unserialize: *mut zend_function,
    pub default_object_handlers: *const zend_object_handlers,
    pub iterator_funcs_ptr: *mut zend_class_iterator_funcs,
    pub arrayaccess_funcs_ptr: *mut zend_class_arrayaccess_funcs,
    pub __bindgen_anon_2: _zend_class_entry__bindgen_ty_2,
    pub get_iterator: ::std::option::Option<
        unsafe extern "C" fn(
            ce: *mut zend_class_entry,
            object: *mut zval,
            by_ref: ::std::os::raw::c_int,
        ) -> *mut zend_object_iterator,
    >,
    pub get_static_method: ::std::option::Option<
        unsafe extern "C" fn(
            ce: *mut zend_class_entry,
            method: *mut zend_string,
        ) -> *mut zend_function,
    >,
    pub serialize: ::std::option::Option<
        unsafe extern "C" fn(
            object: *mut zval,
            buffer: *mut *mut ::std::os::raw::c_uchar,
            buf_len: *mut usize,
            data: *mut zend_serialize_data,
        ) -> ::std::os::raw::c_int,
    >,
    pub unserialize: ::std::option::Option<
        unsafe extern "C" fn(
            object: *mut zval,
            ce: *mut zend_class_entry,
            buf: *const ::std::os::raw::c_uchar,
            buf_len: usize,
            data: *mut zend_unserialize_data,
        ) -> ::std::os::raw::c_int,
    >,
    pub num_interfaces: u32,
    pub num_traits: u32,
    pub __bindgen_anon_3: _zend_class_entry__bindgen_ty_3,
    pub trait_names: *mut zend_class_name,
    pub trait_aliases: *mut *mut zend_trait_alias,
    pub trait_precedences: *mut *mut zend_trait_precedence,
    pub attributes: *mut HashTable,
    pub enum_backing_type: u32,
    pub backed_enum_table: *mut HashTable,
    pub info: _zend_class_entry__bindgen_ty_4,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_class_entry__bindgen_ty_1 {
    pub parent: *mut zend_class_entry,
    pub parent_name: *mut zend_string,
}
#[test]
fn bindgen_test_layout__zend_class_entry__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_class_entry__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_class_entry__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_entry__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_1),
            "::",
            stringify!(parent),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_1),
            "::",
            stringify!(parent_name),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_class_entry__bindgen_ty_2 {
    pub create_object: ::std::option::Option<
        unsafe extern "C" fn(class_type: *mut zend_class_entry) -> *mut zend_object,
    >,
    pub interface_gets_implemented: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *mut zend_class_entry,
            class_type: *mut zend_class_entry,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__zend_class_entry__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_class_entry__bindgen_ty_2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_class_entry__bindgen_ty_2)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_entry__bindgen_ty_2)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_2),
            "::",
            stringify!(create_object),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).interface_gets_implemented) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_2),
            "::",
            stringify!(interface_gets_implemented),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_class_entry__bindgen_ty_3 {
    pub interfaces: *mut *mut zend_class_entry,
    pub interface_names: *mut zend_class_name,
}
#[test]
fn bindgen_test_layout__zend_class_entry__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_class_entry__bindgen_ty_3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_class_entry__bindgen_ty_3)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_entry__bindgen_ty_3)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interfaces) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_3),
            "::",
            stringify!(interfaces),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_names) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_3),
            "::",
            stringify!(interface_names),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_class_entry__bindgen_ty_4 {
    pub user: _zend_class_entry__bindgen_ty_4__bindgen_ty_1,
    pub internal: _zend_class_entry__bindgen_ty_4__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_entry__bindgen_ty_4__bindgen_ty_1 {
    pub filename: *mut zend_string,
    pub line_start: u32,
    pub line_end: u32,
    pub doc_comment: *mut zend_string,
}
#[test]
fn bindgen_test_layout__zend_class_entry__bindgen_ty_4__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        _zend_class_entry__bindgen_ty_4__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry__bindgen_ty_4__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_class_entry__bindgen_ty_4__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry__bindgen_ty_4__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_zend_class_entry__bindgen_ty_4__bindgen_ty_1),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(filename),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(line_start),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_end) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(line_end),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).doc_comment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(doc_comment),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_entry__bindgen_ty_4__bindgen_ty_2 {
    pub builtin_functions: *const _zend_function_entry,
    pub module: *mut _zend_module_entry,
}
#[test]
fn bindgen_test_layout__zend_class_entry__bindgen_ty_4__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        _zend_class_entry__bindgen_ty_4__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry__bindgen_ty_4__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_class_entry__bindgen_ty_4__bindgen_ty_2)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry__bindgen_ty_4__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_zend_class_entry__bindgen_ty_4__bindgen_ty_2),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).builtin_functions) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_4__bindgen_ty_2),
            "::",
            stringify!(builtin_functions),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_4__bindgen_ty_2),
            "::",
            stringify!(module),
        ),
    );
}
#[test]
fn bindgen_test_layout__zend_class_entry__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_class_entry__bindgen_ty_4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry__bindgen_ty_4>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_class_entry__bindgen_ty_4)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_entry__bindgen_ty_4)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_4),
            "::",
            stringify!(user),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_4),
            "::",
            stringify!(internal),
        ),
    );
}
#[test]
fn bindgen_test_layout__zend_class_entry() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_class_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry>(),
        512usize,
        concat!("Size of: ", stringify!(_zend_class_entry)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_entry)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(type_),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(refcount),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ce_flags) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(ce_flags),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).default_properties_count) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(default_properties_count),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).default_static_members_count) as usize
                - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(default_static_members_count),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).default_properties_table) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(default_properties_table),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).default_static_members_table) as usize
                - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(default_static_members_table),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).static_members_table__ptr) as usize
                - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(static_members_table__ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function_table) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(function_table),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).properties_info) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(properties_info),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constants_table) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(constants_table),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mutable_data__ptr) as usize - ptr as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(mutable_data__ptr),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).inheritance_cache) as usize - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(inheritance_cache),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).properties_info_table) as usize - ptr as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(properties_info_table),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constructor) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(constructor),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destructor) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(destructor),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clone) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(clone),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__get) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__get),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__set) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__set),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__unset) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__unset),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__isset) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__isset),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__call) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__call),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__callstatic) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__callstatic),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__tostring) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__tostring),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__debugInfo) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__debugInfo),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__serialize) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__serialize),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__unserialize) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__unserialize),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).default_object_handlers) as usize - ptr as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(default_object_handlers),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iterator_funcs_ptr) as usize - ptr as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(iterator_funcs_ptr),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).arrayaccess_funcs_ptr) as usize - ptr as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(arrayaccess_funcs_ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_iterator) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(get_iterator),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_static_method) as usize - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(get_static_method),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serialize) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(serialize),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unserialize) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(unserialize),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_interfaces) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(num_interfaces),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_traits) as usize - ptr as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(num_traits),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trait_names) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(trait_names),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trait_aliases) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(trait_aliases),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).trait_precedences) as usize - ptr as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(trait_precedences),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(attributes),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).enum_backing_type) as usize - ptr as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(enum_backing_type),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).backed_enum_table) as usize - ptr as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(backed_enum_table),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(info),
        ),
    );
}
pub type zend_object_read_property_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zend_object,
        member: *mut zend_string,
        type_: ::std::os::raw::c_int,
        cache_slot: *mut *mut ::std::os::raw::c_void,
        rv: *mut zval,
    ) -> *mut zval,
>;
pub type zend_object_read_dimension_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zend_object,
        offset: *mut zval,
        type_: ::std::os::raw::c_int,
        rv: *mut zval,
    ) -> *mut zval,
>;
pub type zend_object_write_property_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zend_object,
        member: *mut zend_string,
        value: *mut zval,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    ) -> *mut zval,
>;
pub type zend_object_write_dimension_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zend_object, offset: *mut zval, value: *mut zval),
>;
pub type zend_object_get_property_ptr_ptr_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zend_object,
        member: *mut zend_string,
        type_: ::std::os::raw::c_int,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    ) -> *mut zval,
>;
pub type zend_object_has_property_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zend_object,
        member: *mut zend_string,
        has_set_exists: ::std::os::raw::c_int,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type zend_object_has_dimension_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zend_object,
        member: *mut zval,
        check_empty: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type zend_object_unset_property_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zend_object,
        member: *mut zend_string,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    ),
>;
pub type zend_object_unset_dimension_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zend_object, offset: *mut zval),
>;
pub type zend_object_get_properties_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zend_object) -> *mut HashTable,
>;
pub type zend_object_get_debug_info_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zend_object,
        is_temp: *mut ::std::os::raw::c_int,
    ) -> *mut HashTable,
>;
pub const _zend_prop_purpose_ZEND_PROP_PURPOSE_DEBUG: _zend_prop_purpose = 0;
pub const _zend_prop_purpose_ZEND_PROP_PURPOSE_ARRAY_CAST: _zend_prop_purpose = 1;
pub const _zend_prop_purpose_ZEND_PROP_PURPOSE_SERIALIZE: _zend_prop_purpose = 2;
pub const _zend_prop_purpose_ZEND_PROP_PURPOSE_VAR_EXPORT: _zend_prop_purpose = 3;
pub const _zend_prop_purpose_ZEND_PROP_PURPOSE_JSON: _zend_prop_purpose = 4;
pub const _zend_prop_purpose__ZEND_PROP_PURPOSE_NON_EXHAUSTIVE_ENUM: _zend_prop_purpose = 5;
pub type _zend_prop_purpose = ::std::os::raw::c_uint;
pub use self::_zend_prop_purpose as zend_prop_purpose;
pub type zend_object_get_properties_for_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zend_object,
        purpose: zend_prop_purpose,
    ) -> *mut zend_array,
>;
pub type zend_object_get_method_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut *mut zend_object,
        method: *mut zend_string,
        key: *const zval,
    ) -> *mut zend_function,
>;
pub type zend_object_get_constructor_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zend_object) -> *mut zend_function,
>;
pub type zend_object_free_obj_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zend_object),
>;
pub type zend_object_dtor_obj_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zend_object),
>;
pub type zend_object_clone_obj_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zend_object) -> *mut zend_object,
>;
pub type zend_object_get_class_name_t = ::std::option::Option<
    unsafe extern "C" fn(object: *const zend_object) -> *mut zend_string,
>;
pub type zend_object_compare_t = ::std::option::Option<
    unsafe extern "C" fn(object1: *mut zval, object2: *mut zval) -> ::std::os::raw::c_int,
>;
pub type zend_object_cast_t = ::std::option::Option<
    unsafe extern "C" fn(
        readobj: *mut zend_object,
        retval: *mut zval,
        type_: ::std::os::raw::c_int,
    ) -> zend_result,
>;
pub type zend_object_count_elements_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zend_object, count: *mut zend_long) -> zend_result,
>;
pub type zend_object_get_closure_t = ::std::option::Option<
    unsafe extern "C" fn(
        obj: *mut zend_object,
        ce_ptr: *mut *mut zend_class_entry,
        fptr_ptr: *mut *mut zend_function,
        obj_ptr: *mut *mut zend_object,
        check_only: bool,
    ) -> zend_result,
>;
pub type zend_object_get_gc_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zend_object,
        table: *mut *mut zval,
        n: *mut ::std::os::raw::c_int,
    ) -> *mut HashTable,
>;
pub type zend_object_do_operation_t = ::std::option::Option<
    unsafe extern "C" fn(
        opcode: u8,
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> zend_result,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_object_handlers {
    pub offset: ::std::os::raw::c_int,
    pub free_obj: zend_object_free_obj_t,
    pub dtor_obj: zend_object_dtor_obj_t,
    pub clone_obj: zend_object_clone_obj_t,
    pub read_property: zend_object_read_property_t,
    pub write_property: zend_object_write_property_t,
    pub read_dimension: zend_object_read_dimension_t,
    pub write_dimension: zend_object_write_dimension_t,
    pub get_property_ptr_ptr: zend_object_get_property_ptr_ptr_t,
    pub has_property: zend_object_has_property_t,
    pub unset_property: zend_object_unset_property_t,
    pub has_dimension: zend_object_has_dimension_t,
    pub unset_dimension: zend_object_unset_dimension_t,
    pub get_properties: zend_object_get_properties_t,
    pub get_method: zend_object_get_method_t,
    pub get_constructor: zend_object_get_constructor_t,
    pub get_class_name: zend_object_get_class_name_t,
    pub cast_object: zend_object_cast_t,
    pub count_elements: zend_object_count_elements_t,
    pub get_debug_info: zend_object_get_debug_info_t,
    pub get_closure: zend_object_get_closure_t,
    pub get_gc: zend_object_get_gc_t,
    pub do_operation: zend_object_do_operation_t,
    pub compare: zend_object_compare_t,
    pub get_properties_for: zend_object_get_properties_for_t,
}
#[test]
fn bindgen_test_layout__zend_object_handlers() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_object_handlers> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_object_handlers>(),
        200usize,
        concat!("Size of: ", stringify!(_zend_object_handlers)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_object_handlers>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_object_handlers)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(offset),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_obj) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(free_obj),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dtor_obj) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(dtor_obj),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clone_obj) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(clone_obj),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_property) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(read_property),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_property) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(write_property),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_dimension) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(read_dimension),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_dimension) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(write_dimension),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_property_ptr_ptr) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_property_ptr_ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_property) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(has_property),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unset_property) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(unset_property),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_dimension) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(has_dimension),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unset_dimension) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(unset_dimension),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_properties) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_properties),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_method) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_method),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_constructor) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_constructor),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_class_name) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_class_name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cast_object) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(cast_object),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count_elements) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(count_elements),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_debug_info) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_debug_info),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_closure) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_closure),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_gc) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_gc),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_operation) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(do_operation),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compare) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(compare),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_properties_for) as usize - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_properties_for),
        ),
    );
}
pub type zend_op_array = _zend_op_array;
pub type zend_op = _zend_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _znode_op {
    pub constant: u32,
    pub var: u32,
    pub num: u32,
    pub opline_num: u32,
    pub jmp_offset: u32,
}
#[test]
fn bindgen_test_layout__znode_op() {
    const UNINIT: ::std::mem::MaybeUninit<_znode_op> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_znode_op>(),
        4usize,
        concat!("Size of: ", stringify!(_znode_op)),
    );
    assert_eq!(
        ::std::mem::align_of::<_znode_op>(),
        4usize,
        concat!("Alignment of ", stringify!(_znode_op)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constant) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_znode_op), "::", stringify!(constant)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).var) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_znode_op), "::", stringify!(var)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_znode_op), "::", stringify!(num)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opline_num) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_znode_op), "::", stringify!(opline_num)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jmp_offset) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_znode_op), "::", stringify!(jmp_offset)),
    );
}
pub type znode_op = _znode_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_op {
    pub handler: *const ::std::os::raw::c_void,
    pub op1: znode_op,
    pub op2: znode_op,
    pub result: znode_op,
    pub extended_value: u32,
    pub lineno: u32,
    pub opcode: u8,
    pub op1_type: u8,
    pub op2_type: u8,
    pub result_type: u8,
}
#[test]
fn bindgen_test_layout__zend_op() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_op> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_op>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_op)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_op>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_op)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_op), "::", stringify!(handler)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op1) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_op), "::", stringify!(op1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op2) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(_zend_op), "::", stringify!(op2)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_zend_op), "::", stringify!(result)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extended_value) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(extended_value),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineno) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_zend_op), "::", stringify!(lineno)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(_zend_op), "::", stringify!(opcode)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op1_type) as usize - ptr as usize },
        29usize,
        concat!("Offset of field: ", stringify!(_zend_op), "::", stringify!(op1_type)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op2_type) as usize - ptr as usize },
        30usize,
        concat!("Offset of field: ", stringify!(_zend_op), "::", stringify!(op2_type)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result_type) as usize - ptr as usize },
        31usize,
        concat!("Offset of field: ", stringify!(_zend_op), "::", stringify!(result_type)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_try_catch_element {
    pub try_op: u32,
    pub catch_op: u32,
    pub finally_op: u32,
    pub finally_end: u32,
}
#[test]
fn bindgen_test_layout__zend_try_catch_element() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_try_catch_element> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_try_catch_element>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_try_catch_element)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_try_catch_element>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_try_catch_element)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).try_op) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_try_catch_element),
            "::",
            stringify!(try_op),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).catch_op) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_try_catch_element),
            "::",
            stringify!(catch_op),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).finally_op) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_try_catch_element),
            "::",
            stringify!(finally_op),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).finally_end) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_try_catch_element),
            "::",
            stringify!(finally_end),
        ),
    );
}
pub type zend_try_catch_element = _zend_try_catch_element;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_live_range {
    pub var: u32,
    pub start: u32,
    pub end: u32,
}
#[test]
fn bindgen_test_layout__zend_live_range() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_live_range> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_live_range>(),
        12usize,
        concat!("Size of: ", stringify!(_zend_live_range)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_live_range>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_live_range)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).var) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_live_range), "::", stringify!(var)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_live_range),
            "::",
            stringify!(start),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_live_range), "::", stringify!(end)),
    );
}
pub type zend_live_range = _zend_live_range;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_property_info {
    pub offset: u32,
    pub flags: u32,
    pub name: *mut zend_string,
    pub doc_comment: *mut zend_string,
    pub attributes: *mut HashTable,
    pub ce: *mut zend_class_entry,
    pub type_: zend_type,
}
#[test]
fn bindgen_test_layout__zend_property_info() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_property_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_property_info>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_property_info)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_property_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_property_info)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_property_info),
            "::",
            stringify!(offset),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_property_info),
            "::",
            stringify!(flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_property_info),
            "::",
            stringify!(name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).doc_comment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_property_info),
            "::",
            stringify!(doc_comment),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_property_info),
            "::",
            stringify!(attributes),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ce) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_property_info),
            "::",
            stringify!(ce),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_property_info),
            "::",
            stringify!(type_),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_internal_arg_info {
    pub name: *const ::std::os::raw::c_char,
    pub type_: zend_type,
    pub default_value: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__zend_internal_arg_info() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_internal_arg_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_internal_arg_info>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_internal_arg_info)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_internal_arg_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_internal_arg_info)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_arg_info),
            "::",
            stringify!(name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_arg_info),
            "::",
            stringify!(type_),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_arg_info),
            "::",
            stringify!(default_value),
        ),
    );
}
pub type zend_internal_arg_info = _zend_internal_arg_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_arg_info {
    pub name: *mut zend_string,
    pub type_: zend_type,
    pub default_value: *mut zend_string,
}
#[test]
fn bindgen_test_layout__zend_arg_info() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_arg_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_arg_info>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_arg_info)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_arg_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_arg_info)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_arg_info), "::", stringify!(name)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_arg_info), "::", stringify!(type_)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_arg_info),
            "::",
            stringify!(default_value),
        ),
    );
}
pub type zend_arg_info = _zend_arg_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_op_array {
    pub type_: u8,
    pub arg_flags: [u8; 3usize],
    pub fn_flags: u32,
    pub function_name: *mut zend_string,
    pub scope: *mut zend_class_entry,
    pub prototype: *mut zend_function,
    pub num_args: u32,
    pub required_num_args: u32,
    pub arg_info: *mut zend_arg_info,
    pub attributes: *mut HashTable,
    pub run_time_cache__ptr: *mut *mut ::std::os::raw::c_void,
    pub T: u32,
    pub cache_size: ::std::os::raw::c_int,
    pub last_var: ::std::os::raw::c_int,
    pub last: u32,
    pub opcodes: *mut zend_op,
    pub static_variables_ptr__ptr: *mut HashTable,
    pub static_variables: *mut HashTable,
    pub vars: *mut *mut zend_string,
    pub refcount: *mut u32,
    pub last_live_range: ::std::os::raw::c_int,
    pub last_try_catch: ::std::os::raw::c_int,
    pub live_range: *mut zend_live_range,
    pub try_catch_array: *mut zend_try_catch_element,
    pub filename: *mut zend_string,
    pub line_start: u32,
    pub line_end: u32,
    pub doc_comment: *mut zend_string,
    pub last_literal: ::std::os::raw::c_int,
    pub num_dynamic_func_defs: u32,
    pub literals: *mut zval,
    pub dynamic_func_defs: *mut *mut zend_op_array,
    pub reserved: [*mut ::std::os::raw::c_void; 6usize],
}
#[test]
fn bindgen_test_layout__zend_op_array() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_op_array> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_op_array>(),
        240usize,
        concat!("Size of: ", stringify!(_zend_op_array)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_op_array>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_op_array)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_op_array), "::", stringify!(type_)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_flags) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(arg_flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fn_flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(fn_flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(function_name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scope) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_zend_op_array), "::", stringify!(scope)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prototype) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(prototype),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_args) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(num_args),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).required_num_args) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(required_num_args),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_info) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(arg_info),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(attributes),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).run_time_cache__ptr) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(run_time_cache__ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).T) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(_zend_op_array), "::", stringify!(T)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_size) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(cache_size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_var) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(last_var),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize },
        76usize,
        concat!("Offset of field: ", stringify!(_zend_op_array), "::", stringify!(last)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcodes) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(opcodes),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).static_variables_ptr__ptr) as usize
                - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(static_variables_ptr__ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).static_variables) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(static_variables),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vars) as usize - ptr as usize },
        104usize,
        concat!("Offset of field: ", stringify!(_zend_op_array), "::", stringify!(vars)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(refcount),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_live_range) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(last_live_range),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_try_catch) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(last_try_catch),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).live_range) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(live_range),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).try_catch_array) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(try_catch_array),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(filename),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_start) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(line_start),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_end) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(line_end),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).doc_comment) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(doc_comment),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_literal) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(last_literal),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_dynamic_func_defs) as usize - ptr as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(num_dynamic_func_defs),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).literals) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(literals),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dynamic_func_defs) as usize - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(dynamic_func_defs),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(reserved),
        ),
    );
}
pub type zif_handler = ::std::option::Option<
    unsafe extern "C" fn(execute_data: *mut zend_execute_data, return_value: *mut zval),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_internal_function {
    pub type_: u8,
    pub arg_flags: [u8; 3usize],
    pub fn_flags: u32,
    pub function_name: *mut zend_string,
    pub scope: *mut zend_class_entry,
    pub prototype: *mut zend_function,
    pub num_args: u32,
    pub required_num_args: u32,
    pub arg_info: *mut zend_internal_arg_info,
    pub attributes: *mut HashTable,
    pub run_time_cache__ptr: *mut *mut ::std::os::raw::c_void,
    pub T: u32,
    pub handler: zif_handler,
    pub module: *mut _zend_module_entry,
    pub reserved: [*mut ::std::os::raw::c_void; 6usize],
}
#[test]
fn bindgen_test_layout__zend_internal_function() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_internal_function> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_internal_function>(),
        136usize,
        concat!("Size of: ", stringify!(_zend_internal_function)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_internal_function>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_internal_function)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(type_),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_flags) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(arg_flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fn_flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(fn_flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(function_name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scope) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(scope),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prototype) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(prototype),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_args) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(num_args),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).required_num_args) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(required_num_args),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_info) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(arg_info),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(attributes),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).run_time_cache__ptr) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(run_time_cache__ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).T) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(T),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(handler),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(module),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(reserved),
        ),
    );
}
pub type zend_internal_function = _zend_internal_function;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_function {
    pub type_: u8,
    pub quick_arg_flags: u32,
    pub common: _zend_function__bindgen_ty_1,
    pub op_array: zend_op_array,
    pub internal_function: zend_internal_function,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_function__bindgen_ty_1 {
    pub type_: u8,
    pub arg_flags: [u8; 3usize],
    pub fn_flags: u32,
    pub function_name: *mut zend_string,
    pub scope: *mut zend_class_entry,
    pub prototype: *mut zend_function,
    pub num_args: u32,
    pub required_num_args: u32,
    pub arg_info: *mut zend_arg_info,
    pub attributes: *mut HashTable,
    pub run_time_cache__ptr: *mut *mut ::std::os::raw::c_void,
    pub T: u32,
}
#[test]
fn bindgen_test_layout__zend_function__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_function__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_function__bindgen_ty_1>(),
        72usize,
        concat!("Size of: ", stringify!(_zend_function__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_function__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_function__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(type_),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_flags) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(arg_flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fn_flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(fn_flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(function_name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scope) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(scope),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prototype) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(prototype),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_args) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(num_args),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).required_num_args) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(required_num_args),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_info) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(arg_info),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(attributes),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).run_time_cache__ptr) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(run_time_cache__ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).T) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(T),
        ),
    );
}
#[test]
fn bindgen_test_layout__zend_function() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_function> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_function>(),
        240usize,
        concat!("Size of: ", stringify!(_zend_function)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_function>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_function)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_function), "::", stringify!(type_)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quick_arg_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function),
            "::",
            stringify!(quick_arg_flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).common) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function),
            "::",
            stringify!(common),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function),
            "::",
            stringify!(op_array),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).internal_function) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function),
            "::",
            stringify!(internal_function),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_execute_data {
    pub opline: *const zend_op,
    pub call: *mut zend_execute_data,
    pub return_value: *mut zval,
    pub func: *mut zend_function,
    pub This: zval,
    pub prev_execute_data: *mut zend_execute_data,
    pub symbol_table: *mut zend_array,
    pub run_time_cache: *mut *mut ::std::os::raw::c_void,
    pub extra_named_params: *mut zend_array,
}
#[test]
fn bindgen_test_layout__zend_execute_data() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_execute_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_execute_data>(),
        80usize,
        concat!("Size of: ", stringify!(_zend_execute_data)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_execute_data>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_execute_data)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opline) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(opline),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).call) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(call),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).return_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(return_value),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(func),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).This) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(This),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).prev_execute_data) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(prev_execute_data),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol_table) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(symbol_table),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).run_time_cache) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(run_time_cache),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extra_named_params) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(extra_named_params),
        ),
    );
}
pub type zend_ini_entry = _zend_ini_entry;
pub type zend_module_entry = _zend_module_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_module_entry {
    pub size: ::std::os::raw::c_ushort,
    pub zend_api: ::std::os::raw::c_uint,
    pub zend_debug: ::std::os::raw::c_uchar,
    pub zts: ::std::os::raw::c_uchar,
    pub ini_entry: *const _zend_ini_entry,
    pub deps: *const _zend_module_dep,
    pub name: *const ::std::os::raw::c_char,
    pub functions: *const _zend_function_entry,
    pub module_startup_func: ::std::option::Option<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_int,
            module_number: ::std::os::raw::c_int,
        ) -> zend_result,
    >,
    pub module_shutdown_func: ::std::option::Option<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_int,
            module_number: ::std::os::raw::c_int,
        ) -> zend_result,
    >,
    pub request_startup_func: ::std::option::Option<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_int,
            module_number: ::std::os::raw::c_int,
        ) -> zend_result,
    >,
    pub request_shutdown_func: ::std::option::Option<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_int,
            module_number: ::std::os::raw::c_int,
        ) -> zend_result,
    >,
    pub info_func: ::std::option::Option<
        unsafe extern "C" fn(zend_module: *mut zend_module_entry),
    >,
    pub version: *const ::std::os::raw::c_char,
    pub globals_size: usize,
    pub globals_ptr: *mut ::std::os::raw::c_void,
    pub globals_ctor: ::std::option::Option<
        unsafe extern "C" fn(global: *mut ::std::os::raw::c_void),
    >,
    pub globals_dtor: ::std::option::Option<
        unsafe extern "C" fn(global: *mut ::std::os::raw::c_void),
    >,
    pub post_deactivate_func: ::std::option::Option<
        unsafe extern "C" fn() -> zend_result,
    >,
    pub module_started: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_uchar,
    pub handle: *mut ::std::os::raw::c_void,
    pub module_number: ::std::os::raw::c_int,
    pub build_id: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__zend_module_entry() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_module_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_module_entry>(),
        168usize,
        concat!("Size of: ", stringify!(_zend_module_entry)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_module_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_module_entry)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zend_api) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(zend_api),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zend_debug) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(zend_debug),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zts) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(zts),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ini_entry) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(ini_entry),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deps) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(deps),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functions) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(functions),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).module_startup_func) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(module_startup_func),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).module_shutdown_func) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(module_shutdown_func),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).request_startup_func) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(request_startup_func),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).request_shutdown_func) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(request_shutdown_func),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info_func) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(info_func),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(version),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globals_size) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(globals_size),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globals_ptr) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(globals_ptr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globals_ctor) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(globals_ctor),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globals_dtor) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(globals_dtor),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).post_deactivate_func) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(post_deactivate_func),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_started) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(module_started),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(type_),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(handle),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_number) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(module_number),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).build_id) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(build_id),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_module_dep {
    pub name: *const ::std::os::raw::c_char,
    pub rel: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__zend_module_dep() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_module_dep> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_module_dep>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_module_dep)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_module_dep>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_module_dep)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_dep),
            "::",
            stringify!(name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rel) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_zend_module_dep), "::", stringify!(rel)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_dep),
            "::",
            stringify!(version),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_dep),
            "::",
            stringify!(type_),
        ),
    );
}
extern "C" {
    pub fn zend_eval_string(
        str_: *const ::std::os::raw::c_char,
        retval_ptr: *mut zval,
        string_name: *const ::std::os::raw::c_char,
    ) -> zend_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_function_entry {
    pub fname: *const ::std::os::raw::c_char,
    pub handler: zif_handler,
    pub arg_info: *const _zend_internal_arg_info,
    pub num_args: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout__zend_function_entry() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_function_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_function_entry>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_function_entry)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_function_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_function_entry)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function_entry),
            "::",
            stringify!(fname),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function_entry),
            "::",
            stringify!(handler),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_info) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function_entry),
            "::",
            stringify!(arg_info),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_args) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function_entry),
            "::",
            stringify!(num_args),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function_entry),
            "::",
            stringify!(flags),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_ini_entry {
    pub name: *mut zend_string,
    pub on_modify: ::std::option::Option<
        unsafe extern "C" fn(
            entry: *mut zend_ini_entry,
            new_value: *mut zend_string,
            mh_arg1: *mut ::std::os::raw::c_void,
            mh_arg2: *mut ::std::os::raw::c_void,
            mh_arg3: *mut ::std::os::raw::c_void,
            stage: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub mh_arg1: *mut ::std::os::raw::c_void,
    pub mh_arg2: *mut ::std::os::raw::c_void,
    pub mh_arg3: *mut ::std::os::raw::c_void,
    pub value: *mut zend_string,
    pub orig_value: *mut zend_string,
    pub displayer: ::std::option::Option<
        unsafe extern "C" fn(
            ini_entry: *mut zend_ini_entry,
            type_: ::std::os::raw::c_int,
        ),
    >,
    pub module_number: ::std::os::raw::c_int,
    pub modifiable: u8,
    pub orig_modifiable: u8,
    pub modified: u8,
}
#[test]
fn bindgen_test_layout__zend_ini_entry() {
    const UNINIT: ::std::mem::MaybeUninit<_zend_ini_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_zend_ini_entry>(),
        72usize,
        concat!("Size of: ", stringify!(_zend_ini_entry)),
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ini_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ini_entry)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_zend_ini_entry), "::", stringify!(name)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).on_modify) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(on_modify),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mh_arg1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(mh_arg1),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mh_arg2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(mh_arg2),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mh_arg3) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(mh_arg3),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(value),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orig_value) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(orig_value),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayer) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(displayer),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_number) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(module_number),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modifiable) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(modifiable),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orig_modifiable) as usize - ptr as usize },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(orig_modifiable),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modified) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(modified),
        ),
    );
}
extern "C" {
    pub fn php_embed_init(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn php_embed_shutdown();
}
